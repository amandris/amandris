package com.amandris.clients.util.translator;import com.amandris.clients.service.vo.Contact;import com.amandris.clients.util.ConfigurationParameterManager;import com.amandris.clients.util.DBUtils;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.web.view.SellerContactView;public class ContactToSellerContactViewTranslator extends Translator {	public Object translateView() throws TranslateValueObjectErrorException	{		SellerContactView 	sellerContactView 	= new SellerContactView();		Contact				contact				= ( Contact) object;		try{			sellerContactView.setId						( DBUtils.controlNull( contact.getId()));			sellerContactView.setSellerId				( DBUtils.controlNull( contact.getSellerId()));			sellerContactView.setBuyerId				( DBUtils.controlNull( contact.getBuyerId()));			sellerContactView.setBuyerAge				( Integer.toString( DBUtils.getAge( contact.getBuyer().getBirthdate(), locale)));			sellerContactView.setBuyerHasPicture		( DBUtils.controlNull( contact.getBuyer().getHasPicture()));			sellerContactView.setBuyerMainPicture		( DBUtils.controlNull( contact.getBuyer().getMainPicture()));			sellerContactView.setBuyerMainPictureCode	( DBUtils.controlNull( contact.getBuyer().getMainPictureCode()));			sellerContactView.setBuyerSex				( DBUtils.controlNull( contact.getBuyer().getSexConst()));			sellerContactView.setLength					( DBUtils.controlNull( contact.getLength()));			sellerContactView.setMessageBriefDate		( DBUtils.getDate( contact.getContactDate()));			sellerContactView.setMessageDate			( DBUtils.getDate( contact.getContactDate(), 4));			sellerContactView.setMessageStatusConst		( DBUtils.controlNull( contact.getMessageStatusConst()));			sellerContactView.setMessageStatusText		( ConfigurationParameterManager.getMessages().getMessage( locale, "messageStatus." + DBUtils.controlNull( contact.getMessageStatusConst())));			sellerContactView.setMessageTime			( DBUtils.getTime( contact.getContactDate()));			sellerContactView.setMessageTimeFrom		( ConfigurationParameterManager.getMessages().getMessage( locale, "timeTypeFrom." + DBUtils.getTimeFromType( contact.getContactDate(), locale, true), Integer.toString( DBUtils.getTimeFrom( contact.getContactDate(), locale, true))));			sellerContactView.setMessageAnswer			( DBUtils.removeCR( contact.getMessageAnswer()));			sellerContactView.setDateBriefDate			( DBUtils.getDate( contact.getDateDate()));			sellerContactView.setDateDate				( DBUtils.getDate( contact.getDateDate(), 4));						sellerContactView.setDateStatusConst		( DBUtils.controlNull( contact.getDateStatusConst()));			sellerContactView.setDateStatusText			( ConfigurationParameterManager.getMessages().getMessage( locale, "dateStatus." + DBUtils.controlNull( contact.getDateStatusConst())));			sellerContactView.setDateTime				( DBUtils.getTime( contact.getDateDate()));			sellerContactView.setDateTimeTo				( ConfigurationParameterManager.getMessages().getMessage( locale, "timeTypeTo." + DBUtils.getTimeFromType( contact.getDateDate(), locale, false), Integer.toString( DBUtils.getTimeFrom( contact.getDateDate(), locale, false))));			sellerContactView.setDateTimeToValue		( Integer.toString( DBUtils.getTimeFrom( contact.getDateDate(), locale, false)));			sellerContactView.setBuyerCountry			( ConfigurationParameterManager.getMessages().getMessage( locale, "country." + DBUtils.controlNull( contact.getBuyer().getState().getCountry().getText())));			sellerContactView.setBuyerLogin				( DBUtils.controlNull( contact.getBuyer().getLogin(), 15));			sellerContactView.setBuyerFullLogin			( DBUtils.controlNull( contact.getBuyer().getLogin()));			sellerContactView.setBuyerNegativeVotes		( DBUtils.controlNull( contact.getBuyer().getNegativeVotes()));			sellerContactView.setBuyerPositiveVotes		( DBUtils.controlNull( contact.getBuyer().getPositiveVotes()));			sellerContactView.setBuyerState				( ConfigurationParameterManager.getMessages().getMessage( locale, "state." + DBUtils.controlNull( contact.getBuyer().getState().getText())));			sellerContactView.setBuyerCity				( DBUtils.controlNull( contact.getBuyer().getCity(), 15));						sellerContactView.setPaymentStatusConst		( DBUtils.controlNull( contact.getPaymentStatusConst()));			sellerContactView.setPaymentStatusText		( ConfigurationParameterManager.getMessages().getMessage( locale, "paymentStatus." + DBUtils.controlNull( contact.getPaymentStatusConst())));			sellerContactView.setVoteStatusConst		( DBUtils.controlNull( contact.getVoteStatusConst()));			sellerContactView.setVoteStatusText			( ConfigurationParameterManager.getMessages().getMessage( locale, "voteStatus." + DBUtils.controlNull( contact.getVoteStatusConst())));			sellerContactView.setSellerVoteStatusConst	( DBUtils.controlNull( contact.getSellerVoteStatusConst()));			sellerContactView.setSellerVoteStatusText	( ConfigurationParameterManager.getMessages().getMessage( locale, "voteStatus." + DBUtils.controlNull( contact.getSellerVoteStatusConst())));			sellerContactView.setBuyerMadePayment		( DBUtils.controlNull( contact.getBuyerMadePayment()));			sellerContactView.setPrice					( DBUtils.controlNull( contact.getPrice()));			sellerContactView.setCurrency				( ( ConfigurationParameterManager.getMessages().getMessage( locale, "currency." + contact.getCurrencyConst())));			sellerContactView.setState					( DBUtils.controlNull( contact.getState()));			sellerContactView.setCity					( DBUtils.controlNull( contact.getCity()));			sellerContactView.setAddress1				( DBUtils.controlNull( contact.getAddress1()));			sellerContactView.setAddress2				( DBUtils.controlNull( contact.getAddress2()));			sellerContactView.setPostalCode				( DBUtils.controlNull( contact.getPostalCode()));			sellerContactView.setCountry				( DBUtils.controlNull( contact.getCountry()));						sellerContactView.setVote					( DBUtils.controlNull( contact.getVote()));			sellerContactView.setSellerVote				( DBUtils.controlNull( contact.getSellerVote()));						sellerContactView.setServiceTypeConst		( DBUtils.controlNull( contact.getServiceTypeConst()));			sellerContactView.setServiceTypeText		( ConfigurationParameterManager.getMessages().getMessage( locale, "service." + DBUtils.controlNull( contact.getServiceTypeConst())));			sellerContactView.setCancelDateText			( DBUtils.removeCR( contact.getCancelDateText()));						if( contact.getPrice().doubleValue() == 0)				sellerContactView.setIsFree( "1");			else				sellerContactView.setIsFree( "0");						switch( contact.getMessageStatusConst().intValue()){				case 1: sellerContactView.setMessageStatusColor( ConfigurationParameterManager.getParameterString( "status.waiting"));	break;				case 2: sellerContactView.setMessageStatusColor( ConfigurationParameterManager.getParameterString( "status.ok"));		break;				case 3: sellerContactView.setMessageStatusColor( ConfigurationParameterManager.getParameterString( "status.fail"));		break;				case 4: sellerContactView.setMessageStatusColor( ConfigurationParameterManager.getParameterString( "status.passed"));	break;				default: sellerContactView.setMessageStatusColor( ConfigurationParameterManager.getParameterString( "status.default"));	break;			}						switch( contact.getDateStatusConst().intValue()){				case 1: sellerContactView.setDateStatusColor( ConfigurationParameterManager.getParameterString( "status.waiting"));	break;				case 2: sellerContactView.setDateStatusColor( ConfigurationParameterManager.getParameterString( "status.fail"));		break;				case 3: sellerContactView.setDateStatusColor( ConfigurationParameterManager.getParameterString( "status.ok"));		break;				case 4: sellerContactView.setDateStatusColor( ConfigurationParameterManager.getParameterString( "status.passed"));	break;				default: sellerContactView.setDateStatusColor( ConfigurationParameterManager.getParameterString( "status.default"));	break;			}						switch( contact.getPaymentStatusConst().intValue()){				case 1: sellerContactView.setPaymentStatusColor( ConfigurationParameterManager.getParameterString( "status.waiting"));	break;				case 2: sellerContactView.setPaymentStatusColor( ConfigurationParameterManager.getParameterString( "status.ok"));		break;				case 3: sellerContactView.setPaymentStatusColor( ConfigurationParameterManager.getParameterString( "status.passed"));	break;				case 4: sellerContactView.setPaymentStatusColor( ConfigurationParameterManager.getParameterString( "status.notNeeded"));	break;				default: sellerContactView.setPaymentStatusColor( ConfigurationParameterManager.getParameterString( "status.default"));	break;			}						switch( contact.getVoteStatusConst().intValue()){				case 1: sellerContactView.setVoteStatusColor( ConfigurationParameterManager.getParameterString( "status.waiting"));	break;				case 2: sellerContactView.setVoteStatusColor( ConfigurationParameterManager.getParameterString( "status.ok"));		break;				case 3: sellerContactView.setVoteStatusColor( ConfigurationParameterManager.getParameterString( "status.passed"));	break;				default: sellerContactView.setVoteStatusColor( ConfigurationParameterManager.getParameterString( "status.default"));	break;			}						switch( contact.getSellerVoteStatusConst().intValue()){			case 1: sellerContactView.setSellerVoteStatusColor( ConfigurationParameterManager.getParameterString( "status.waiting"));	break;			case 2: sellerContactView.setSellerVoteStatusColor( ConfigurationParameterManager.getParameterString( "status.ok"));		break;			case 3: sellerContactView.setSellerVoteStatusColor( ConfigurationParameterManager.getParameterString( "status.passed"));	break;			default: sellerContactView.setSellerVoteStatusColor( ConfigurationParameterManager.getParameterString( "status.default"));	break;		}					}catch( Exception e) {			e.printStackTrace();			throw new TranslateValueObjectErrorException( object.getClass().getName(), sellerContactView.getClass().getName(), e);		}				return sellerContactView;	}}