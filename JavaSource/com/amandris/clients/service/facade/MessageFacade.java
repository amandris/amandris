package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;import java.util.Locale;import com.amandris.clients.service.dao.MessageDAO;import com.amandris.clients.service.vo.BuyerMessage;import com.amandris.clients.service.vo.SellerMessage;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.view.MessageDataView;import com.amandris.clients.web.view.MessageView;public class MessageFacade {			public boolean deleteBuyerMessageById( Integer id, Integer buyerId) throws DataDeleteErrorException, DataAccessErrorException	{		MessageDAO 		messageDAO 		= new MessageDAO();		BuyerMessage	buyerMessage	= null;				buyerMessage = messageDAO.getBuyerMessageById( id);				if( buyerMessage == null)			return false;				if( buyerMessage.getBuyerId().intValue() != buyerId.intValue())			return false;				messageDAO.deleteBuyerMessage( buyerMessage);				return true;	}		public boolean deleteSellerMessageById( Integer id, Integer sellerId) throws DataDeleteErrorException, DataAccessErrorException	{		MessageDAO 		messageDAO 		= new MessageDAO();		SellerMessage	sellerMessage	= null;				sellerMessage = messageDAO.getSellerMessageById( id);				if( sellerMessage == null)			return false;				if( sellerMessage.getSellerId().intValue() != sellerId.intValue())			return false;				messageDAO.deleteSellerMessage( sellerMessage);				return true;	}		public boolean markBuyerMessageAsNewById( Integer id, Integer buyerId) throws DataUpdateErrorException, DataAccessErrorException	{		MessageDAO 		messageDAO 		= new MessageDAO();		BuyerMessage	buyerMessage	= null;		MessageView		messageView		= null;				buyerMessage = messageDAO.getBuyerMessageById( id);				if( buyerMessage == null)			return false;				if( buyerMessage.getBuyerId().intValue() != buyerId.intValue())			return false;				buyerMessage.setIsNew( new Integer( 1));				messageDAO.setBuyerMessage( buyerMessage);				return true;	}		public boolean markSellerMessageAsNewById( Integer id, Integer sellerId) throws DataUpdateErrorException, DataAccessErrorException	{		MessageDAO 		messageDAO 		= new MessageDAO();		SellerMessage	sellerMessage	= null;		MessageView		messageView		= null;				sellerMessage = messageDAO.getSellerMessageById( id);				if( sellerMessage == null)			return false;				if( sellerMessage.getSellerId().intValue() != sellerId.intValue())			return false;				sellerMessage.setIsNew( new Integer( 1));				messageDAO.setSellerMessage( sellerMessage);				return true;	}		public MessageView getBuyerMessageById( Integer id, Locale locale, boolean setNotNew) throws DataAccessErrorException, TranslateValueObjectErrorException, DataUpdateErrorException	{		MessageDAO 		messageDAO 		= new MessageDAO();		BuyerMessage	buyerMessage	= null;		MessageView		messageView		= null;				buyerMessage = messageDAO.getBuyerMessageById( id);				if( buyerMessage == null)			return null;				messageView = ( MessageView) TranslatorFactory.getTranslator( buyerMessage, locale).translateView();				if( setNotNew) {			buyerMessage.setIsNew( new Integer(0));			messageDAO.setBuyerMessage( buyerMessage);		}				return messageView;	}		public MessageView getSellerMessageById( Integer id, Locale locale, boolean setNotNew) throws DataAccessErrorException, TranslateValueObjectErrorException, DataUpdateErrorException	{		MessageDAO 		messageDAO 		= new MessageDAO();		SellerMessage	sellerMessage	= null;		MessageView		messageView		= null;				sellerMessage = messageDAO.getSellerMessageById( id);				if( sellerMessage == null)			return null;				messageView = ( MessageView) TranslatorFactory.getTranslator( sellerMessage, locale).translateView();				if( setNotNew) {			sellerMessage.setIsNew( new Integer(0));			messageDAO.setSellerMessage( sellerMessage);		}				return messageView;	}			public MessageDataView getBuyerMessageDataByBuyerId( Integer buyerId, Boolean onlyNews, Boolean onlyActives, String orderBy, boolean orderDirection, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		MessageDAO 			messageDAO 		= new MessageDAO();		Collection 			collection 		= null;		MessageDataView 	result			= new MessageDataView();		BuyerMessage		buyerMessage	= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		MessageView			messageView		= null;		int					newMessages		= 0;		int					totalMessages	= 0;		boolean				odd				= true;				collection = messageDAO.getBuyerMessageByBuyerId( buyerId, onlyNews, onlyActives, orderBy, orderDirection, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			buyerMessage = ( BuyerMessage) iterator.next();						messageView = ( MessageView) TranslatorFactory.getTranslator( buyerMessage, locale).translateView();						if( buyerMessage.getIsNew().intValue() == 1)				newMessages = newMessages + 1;						totalMessages = totalMessages + 1;						if( odd)				messageView.setOddOrEven( "odd");			else				messageView.setOddOrEven( "even");											list.add( messageView);		}				result.setMessages		( list);		result.setNewMessages	( Integer.toString( newMessages));		result.setReadMessages	( Integer.toString( totalMessages - newMessages));		result.setTotalMessages	( Integer.toString( totalMessages));				return result;	}		public MessageDataView getSellerMessageDataBySellerId( Integer sellerId, Boolean onlyNews, Boolean onlyActives, String orderBy, boolean orderDirection, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		MessageDAO 			messageDAO 		= new MessageDAO();		Collection 			collection 		= null;		MessageDataView 	result			= new MessageDataView();		SellerMessage		sellerMessage	= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		MessageView			messageView		= null;		int					newMessages		= 0;		int					totalMessages	= 0;		boolean				odd				= true;				collection = messageDAO.getSellerMessageBySellerId( sellerId, onlyNews, onlyActives, orderBy, orderDirection, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			sellerMessage = ( SellerMessage) iterator.next();						messageView = ( MessageView) TranslatorFactory.getTranslator( sellerMessage, locale).translateView();						if( sellerMessage.getIsNew().intValue() == 1)				newMessages = newMessages + 1;						totalMessages = totalMessages + 1;						if( odd)				messageView.setOddOrEven( "odd");			else				messageView.setOddOrEven( "even");											list.add( messageView);		}				result.setMessages		( list);		result.setNewMessages	( Integer.toString( newMessages));		result.setReadMessages	( Integer.toString( totalMessages - newMessages));		result.setTotalMessages	( Integer.toString( totalMessages));				return result;	}	}