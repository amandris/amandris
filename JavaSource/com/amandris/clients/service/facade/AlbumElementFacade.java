package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;import java.util.Locale;import com.amandris.clients.service.dao.AlbumElementDAO;import com.amandris.clients.service.dao.SellerDAO;import com.amandris.clients.service.dao.UtilDAO;import com.amandris.clients.service.vo.AlbumElement;import com.amandris.clients.service.vo.Seller;import com.amandris.clients.util.Constant;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.util.SellerSession;import com.amandris.clients.web.view.AlbumElementView;public class AlbumElementFacade {		public boolean setAlbumElement( SellerSession sellerSession, int randomNumber) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO		sellerDAO		= new SellerDAO();		AlbumElementDAO	albumElementDAO	= new AlbumElementDAO();		Seller			seller			= null;		AlbumElement	albumElement	= new AlbumElement();		UtilDAO			utilDAO			= new UtilDAO();		int				index			= 0;		int				count			= 0;				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				if( albumElementDAO.getAlbumElementCount( sellerSession.getId()) >= 60)			return false;						albumElement.setActive			( new Integer( 0));		albumElement.setCode			( new Integer( randomNumber));		albumElement.setMediaTypeConst	( new Integer( Constant.MEDIA_TYPE_PICTURE));		albumElement.setSeller			( seller);		albumElement.setSellerId		( seller.getId());		albumElement.setText			( "");		albumElement.setViews			( new Integer( 0));		albumElement.setVotes			( new Integer( 0));				albumElementDAO.setAlbumElement( albumElement);				return true;	}		public boolean setAlbumElementAproved( Integer id) throws DataAccessErrorException, DataUpdateErrorException	{		AlbumElementDAO	albumElementDAO	= new AlbumElementDAO();		AlbumElement	albumElement	= null;				albumElement = albumElementDAO.getAlbumElementById( id, null);				if( albumElement == null)			return false;				albumElement.setActive( new Integer( 1));			albumElementDAO.setAlbumElement( albumElement);				return true;	}		public AlbumElementView getAlbumElementById( Integer id, Boolean onlyActive, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		AlbumElementDAO albumElementDAO	= new AlbumElementDAO();		AlbumElement	albumElement	= null;				albumElement = albumElementDAO.getAlbumElementById( id, onlyActive );				if( albumElement == null)			return null;				return ( AlbumElementView) TranslatorFactory.getTranslator( albumElement, locale).translateView();	}		public Collection getAlbumElement( Integer sellerId, Boolean onlyActive, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		AlbumElementDAO				 		albumElementDAO 	= new AlbumElementDAO();		AlbumElement						albumElement		= null;		Iterator							iterator			= null;		ArrayList							result				= new ArrayList();		AlbumElementView	 				albumElementView 	= null;				iterator = albumElementDAO.getAlbumElement( sellerId, onlyActive).iterator();				while( iterator.hasNext()) {			albumElement = ( AlbumElement) iterator.next();									albumElementView = ( AlbumElementView) TranslatorFactory.getTranslator( albumElement, locale).translateView();						result.add( albumElementView);		}				return result;	}		public Collection getAlbumElementToCensor( Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		AlbumElementDAO				 		albumElementDAO 	= new AlbumElementDAO();		AlbumElement						albumElement		= null;		Iterator							iterator			= null;		ArrayList							result				= new ArrayList();		AlbumElementView 					albumElementView 	= null;				iterator = albumElementDAO.getAlbumElementToCensor( ).iterator();				while( iterator.hasNext()) {			albumElement = ( AlbumElement) iterator.next();						albumElementView = ( AlbumElementView) TranslatorFactory.getTranslator( albumElement, locale).translateView();						result.add( albumElementView);		}				return result;	}		public int getAlbumElementCount( Integer sellerId) throws DataAccessErrorException, TranslateValueObjectErrorException	{		AlbumElementDAO	albumElementDAO = new AlbumElementDAO();		return albumElementDAO.getAlbumElementCount( sellerId);	}		public boolean deletePicture( Integer id, SellerSession sellerSession) throws DataAccessErrorException, DataUpdateErrorException	{		AlbumElementDAO	albumElementDAO	= new AlbumElementDAO();		AlbumElement	albumElement	= null;		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				albumElement = albumElementDAO.getAlbumElementById( id, null);				if( albumElement == null)			return false;		if( albumElement.getSeller().getId().intValue() != sellerSession.getId().intValue())			return false;				albumElementDAO.deleteAlbumElement( albumElement);				return true;	}	}