package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Collection;import java.util.Hashtable;import java.util.Iterator;import java.util.Locale;import com.amandris.clients.service.dao.UtilDAO;import com.amandris.clients.service.vo.Country;import com.amandris.clients.service.vo.State;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.translator.StateToStateViewTranslator;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.util.CountryState;import com.amandris.clients.web.view.CountryView;import com.amandris.clients.web.view.StateView;public class UtilFacade {		static private UtilFacade 	singleton 		= null;	static private Hashtable 	countryStates 	= null;		private UtilFacade() 	{ 	 countryStates = new Hashtable();	}	static public UtilFacade getInstance() 	{		if ( singleton == null) {			singleton = new UtilFacade();		}	    return singleton;	}		public CountryView getCountryById( Integer countryId) throws DataAccessErrorException, TranslateValueObjectErrorException	{		UtilDAO 	utilDAO 	= new UtilDAO();		Country		country		= null;				country = utilDAO.getCountryById( countryId);				if( country == null)			return null;		return ( CountryView) TranslatorFactory.getTranslator( country, null).translateView();	}		public StateView getStateById( Integer stateId) throws DataAccessErrorException, TranslateValueObjectErrorException	{		UtilDAO 	utilDAO 	= new UtilDAO();		State		state		= null;				state = utilDAO.getStateById( stateId);				if( state == null)			return null;		return ( StateView) TranslatorFactory.getTranslator( state, null).translateView();	}		public Collection getCountry() throws DataAccessErrorException, TranslateValueObjectErrorException	{		UtilDAO 	utilDAO 	= new UtilDAO();		Collection 	collection 	= null;		ArrayList 	result		= new ArrayList();		Country		country		= null;		Iterator	iterator	= null;				collection = utilDAO.getCountry();				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			country = ( Country) iterator.next();			result.add( ( CountryView) TranslatorFactory.getTranslator( country, null).translateView());		}				return result;	}	public Collection getState() throws DataAccessErrorException, TranslateValueObjectErrorException	{		UtilDAO 	utilDAO 	= new UtilDAO();		Collection 	collection 	= null;		ArrayList 	result		= new ArrayList();		State		state		= null;		Iterator	iterator	= null;				collection = utilDAO.getState();				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			state = ( State) iterator.next();			result.add( ( StateView) TranslatorFactory.getTranslator( state, null).translateView());		}				return result;	}		public CountryState getCountryState( boolean withAllCountries, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		UtilDAO 		utilDAO 		= new UtilDAO();		Collection 		collection 		= null;		State			state			= null;		Country			country			= null;		Iterator		countryIterator	= null;		Iterator		stateIterator	= null;		CountryState	countryState	= new CountryState();		CountryView		countryView		= null;		StateView		stateView		= null;				if( countryStates.get( locale.getLanguage()) == null) {			collection = utilDAO.getCountry();			StateToStateViewTranslator translator = new StateToStateViewTranslator();			translator.setLocale( locale);						if( collection == null)				return null;						countryIterator = collection.iterator();			while( countryIterator.hasNext()){				country = ( Country) countryIterator.next();				countryView = ( CountryView) TranslatorFactory.getTranslator( country, null).translateView();										if ( withAllCountries || ( country.getStates().size() != 0)) {									stateIterator = country.getStates().iterator();										while( stateIterator.hasNext()){						state = ( State) stateIterator.next();												translator.setObject( state);						stateView = ( StateView) translator.translateView();						countryView.getStates().add( stateView);					}										countryState.getCountry().add( countryView);				}			}						countryStates.put( locale.getLanguage(), countryState);		}				return ( CountryState) countryStates.get( locale.getLanguage());	}}