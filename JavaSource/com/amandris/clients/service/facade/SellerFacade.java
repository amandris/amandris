package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Collection;import java.util.Date;import java.util.GregorianCalendar;import java.util.Iterator;import java.util.Locale;import com.amandris.clients.service.dao.BuyerDAO;import com.amandris.clients.service.dao.CalendarDAO;import com.amandris.clients.service.dao.ContactDAO;import com.amandris.clients.service.dao.MessageDAO;import com.amandris.clients.service.dao.RecommendationDAO;import com.amandris.clients.service.dao.SellerDAO;import com.amandris.clients.service.dao.SellerHistoricCreditDAO;import com.amandris.clients.service.dao.SellerServiceDAO;import com.amandris.clients.service.dao.UtilDAO;import com.amandris.clients.service.vo.BuyerRecomendation;import com.amandris.clients.service.vo.Calendar;import com.amandris.clients.service.vo.Contact;import com.amandris.clients.service.vo.Seller;import com.amandris.clients.service.vo.SellerHistoricCredit;import com.amandris.clients.service.vo.SellerRecomendation;import com.amandris.clients.service.vo.SellerService;import com.amandris.clients.util.ConfigurationParameterManager;import com.amandris.clients.util.Constant;import com.amandris.clients.util.DBUtils;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.mail.Mail;import com.amandris.clients.util.mail.RecommendationUsedMailObject;import com.amandris.clients.util.translator.SellerToSellerSessionTranslator;import com.amandris.clients.util.translator.SellerToSellerToCensorViewTranslator;import com.amandris.clients.util.translator.SellerToSellerViewListTranslator;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.form.AdminCensorSellerForm;import com.amandris.clients.web.form.BuyCreditsForm;import com.amandris.clients.web.form.BuyerSellerSearchForm;import com.amandris.clients.web.form.NewSellerForm;import com.amandris.clients.web.form.PictureForm;import com.amandris.clients.web.form.SellerAccountForm;import com.amandris.clients.web.form.SellerParameterForm;import com.amandris.clients.web.form.SellerPasswordForm;import com.amandris.clients.web.form.SellerPreferencesForm;import com.amandris.clients.web.form.SellerProfileForm;import com.amandris.clients.web.util.BuyerSession;import com.amandris.clients.web.util.SellerSession;import com.amandris.clients.web.view.ContactWaysView;import com.amandris.clients.web.view.SellerStartView;import com.amandris.clients.web.view.SellerToCensorView;import com.amandris.clients.web.view.SellerView;import com.amandris.clients.web.view.SellerViewList;import com.amandris.clients.web.view.StartContactView;public class SellerFacade {	public boolean setSeller( NewSellerForm newSellerForm, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= new Seller();		UtilDAO		utilDAO		= new UtilDAO();				seller.setLogin							( DBUtils.controlNull( newSellerForm.getLogin()));		seller.setActive						( new Integer( 0));		seller.setActivationCode				( newSellerForm.getActivationCode());		seller.setAddress1						( DBUtils.controlNull( newSellerForm.getAddress1()));		seller.setAddress2						( DBUtils.controlNull( newSellerForm.getAddress2()));		seller.setBirthdate						( DBUtils.parseDate( newSellerForm.getBirthDate()));		seller.setBreastSizeConst				( DBUtils.controlNullInteger( newSellerForm.getBreastSize(), Constant.BREAST_SIZE_NA));		seller.setCity							( DBUtils.controlNull( newSellerForm.getCity()));		seller.setHasMeetingPlace				( new Integer( 0));		seller.setContactsAccepted				( new Integer( 0));		seller.setContactsNotReplied			( new Integer( 0));		seller.setContactsRejected				( new Integer( 0));		seller.setContactsReceived				( new Integer( 0));		seller.setCountry						( utilDAO.getCountryById( newSellerForm.getCountry()));		seller.setCountryId						( newSellerForm.getCountry());		seller.setCredits						( new Integer(ConfigurationParameterManager.getParameterInt( "initialSellerCredits")));		seller.setDatesCanceled					( new Integer( 0));		seller.setEducationLevelConst			( newSellerForm.getEducationLevel());		seller.setEmail							( DBUtils.controlNull( newSellerForm.getEmail().toLowerCase()));		seller.setEyeColorConst					( newSellerForm.getEyeColor());		seller.setHairColorConst				( newSellerForm.getHairColor());		seller.setHairLengthConst				( newSellerForm.getHairLength());		seller.setHasPicture					( new Integer( 0));		seller.setHeightConst					( newSellerForm.getHeight());		seller.setIntro							( DBUtils.controlNull( newSellerForm.getIntro()));		seller.setIsOnLine						( new Integer( 0));		seller.setIsCalendarGenerated			( new Integer( 0));		seller.setLanguage1Const				( newSellerForm.getLanguage1());		seller.setLanguage2Const				( newSellerForm.getLanguage2());		seller.setLanguage3Const				( newSellerForm.getLanguage3());		seller.setLastLogin						( GregorianCalendar.getInstance( locale).getTime());		seller.setName							( DBUtils.controlNull( newSellerForm.getName()));		seller.setNegativeVotes					( new Integer( 0));		seller.setOrientationConst				( newSellerForm.getOrientation());		seller.setOriginConst					( newSellerForm.getOrigin());		seller.setPassword						( DBUtils.digest( DBUtils.controlNull( newSellerForm.getPassword())));		seller.setPaypalAccount					( "");		seller.setPennisSizeConst				( DBUtils.controlNullInteger( newSellerForm.getPennisSize(), Constant.PENNIS_SIZE_NA));		seller.setPhoneNumberCall				( "");		seller.setPhoneNumberSMS				( "");		seller.setPhysiqueConst					( newSellerForm.getPhysique());		seller.setPicture1						( new Integer( 0));		seller.setPicture2						( new Integer( 0));		seller.setPicture3						( new Integer( 0));		seller.setPicture4						( new Integer( 0));		seller.setPicture5						( new Integer( 0));		seller.setPicture1Waiting				( new Integer( 0));		seller.setPicture2Waiting				( new Integer( 0));		seller.setPicture3Waiting				( new Integer( 0));		seller.setPicture4Waiting				( new Integer( 0));		seller.setPicture5Waiting				( new Integer( 0));				seller.setMainPicture					( new Integer( 0));		seller.setMainPictureCode				( new Integer( 0));		seller.setPositiveVotes					( new Integer( 0));		seller.setPostalCode					( DBUtils.controlNull( newSellerForm.getPostalCode()));		seller.setSendNews						( DBUtils.boolean2Integer( newSellerForm.getSendNews().booleanValue()));		seller.setDefaultCurrency				( newSellerForm.getDefaultCurrency());		seller.setCalendarPattern				( new Integer( 0));		seller.setSexConst						( newSellerForm.getSex());		seller.setSkinColorConst				( newSellerForm.getSkinColor());		seller.setSkypeAccount					( "");		seller.setSmokerConst					( newSellerForm.getSmoker());		seller.setState							( utilDAO.getStateById( newSellerForm.getState()));		seller.setStateId						( newSellerForm.getState());		seller.setSurname						( DBUtils.controlNull( newSellerForm.getSurname()));		seller.setText							( DBUtils.controlNull( newSellerForm.getText()));		seller.setTextActive					( new Integer( 0));		seller.setViews							( new Integer( 0));		seller.setPreferredBreastSizeConst		( new Integer( Constant.BREAST_SIZE_NA));		seller.setPreferredEducationLevelConst	( new Integer( Constant.EDUCATION_LEVEL_NA));		seller.setPreferredEyeColorConst		( new Integer( Constant.EYE_COLOR_NA));		seller.setPreferredHairColorConst		( new Integer( Constant.HAIR_COLOR_NA));		seller.setPreferredHairLengthConst		( new Integer( Constant.HAIR_LENGTH_NA));		seller.setPreferredHeightConst			( new Integer( Constant.HEIGHT_NA));		seller.setPreferredLanguageConst		( new Integer( Constant.LANGUAGE_NA));		seller.setPreferredOrientationConst		( new Integer( Constant.ORIENTATION_NA));		seller.setPreferredOriginConst			( new Integer( Constant.ORIGIN_NA));		seller.setPreferredPennisSizeConst		( new Integer( Constant.PENNIS_SIZE_NA));		seller.setPreferredPhysiqueConst		( new Integer( Constant.PHYSIQUE_NA));		seller.setPreferredSexConst				( new Integer( Constant.SEX_NA));		seller.setPreferredSkinColorConst		( new Integer( Constant.SKIN_COLOR_NA));		seller.setPreferredSmokerConst			( new Integer( Constant.SMOKER_NO));		seller.setPreferredAgeLow				( new Integer( 18));		seller.setPreferredAgeHigh				( new Integer( 99));		seller.setPreferredText					( "");				seller.setAllowBankPayment				( new Integer( 0));		seller.setAllowEmail					( new Integer( 0));		seller.setAllowPaypalPayment			( new Integer( 0));		seller.setAllowMessenger				( new Integer( 0));		seller.setAllowPhoneCall				( new Integer( 0));		seller.setAllowSkype					( new Integer( 0));		seller.setAllowSms						( new Integer( 0));		seller.setAllowUrl						( new Integer( 0));		seller.setUrl							( "");		seller.setAnalSex						( new Integer( 0));		seller.setBankAccount					( "");		seller.setBdsm							( new Integer( 0));		seller.setBuyerPaysDisplacement			( new Integer( 0));		seller.setDisplacementPrize				( new Double ( 0));		seller.setHasAlbum						( new Integer( 0));		seller.setInBuyerHouse					( new Integer( 0));		seller.setInCar							( new Integer( 0));		seller.setInHotel						( new Integer( 0));		seller.setInSellerHouse					( new Integer( 0));		seller.setMessengerAccount				( "");		seller.setOralSex						( new Integer( 0));		seller.setPaymentBeforeDate				( new Integer( 0));		seller.setServicesSaved					( new Integer( 0));		seller.setParametersSaved				( new Integer( 0));		seller.setPreferencesSaved				( new Integer( 0));		seller.setPicturesSaved					( new Integer( 0));		seller.setIsEscort						( DBUtils.controlNullInteger( newSellerForm.getIsEscort(), 0));		seller.setPromoCode						( newSellerForm.getPromoCode());						if( newSellerForm.getIsEscort() != null && newSellerForm.getIsEscort().intValue() == 1){			seller.setCredits( new Integer( 1000000));			sellerDAO.setSeller( seller);		}else{			if( sellerDAO.getSellerByEmail( newSellerForm.getEmail()) == null){				sellerDAO.setSeller( seller);			}		}				return true;	}		public boolean setSellerAccount( SellerAccountForm sellerAccountForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				seller.setAddress1						( DBUtils.controlNull( sellerAccountForm.getAddress1()));		seller.setAddress2						( DBUtils.controlNull( sellerAccountForm.getAddress2()));		seller.setBirthdate						( DBUtils.parseDate( sellerAccountForm.getBirthDate()));		seller.setCity							( DBUtils.controlNull( sellerAccountForm.getCity()));		seller.setCountry						( utilDAO.getCountryById( sellerAccountForm.getCountry()));		seller.setCountryId						( sellerAccountForm.getCountry());		seller.setName							( DBUtils.controlNull( sellerAccountForm.getName()));		seller.setPostalCode						( DBUtils.controlNull( sellerAccountForm.getPostalCode()));		seller.setSendNews						( DBUtils.boolean2Integer( sellerAccountForm.getSendNews().booleanValue()));		seller.setSexConst						( sellerAccountForm.getSex());		seller.setState							( utilDAO.getStateById( sellerAccountForm.getState()));		seller.setStateId						( sellerAccountForm.getState());		seller.setSurname						( DBUtils.controlNull( sellerAccountForm.getSurname()));				if(	( !sellerSession.getAddress1().equals( sellerAccountForm.getAddress1())) || 			( !sellerSession.getAddress2().equals( sellerAccountForm.getAddress2())) ||			( !sellerSession.getCity().equals( sellerAccountForm.getCity())) ||			( !sellerSession.getPostalCode().equals( sellerAccountForm.getPostalCode()))) {			seller.setTextActive( new Integer( 0));		}				sellerDAO.setSeller( seller);				return true;	}		public String getSellerActivationCodeById( Integer id) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO 	sellerDAO 	= new SellerDAO();		Seller		seller		= null;				seller = sellerDAO.getSellerById( id);				if( seller == null)			return null;				return seller.getActivationCode();	}		public String getSellerEmailById( Integer id) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO 	sellerDAO 	= new SellerDAO();		Seller		seller		= null;				seller = sellerDAO.getSellerById( id);				if( seller == null)			return null;				return seller.getEmail();	}		public boolean setSellerPassword( SellerPasswordForm sellerPasswordForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				if( ! sellerPasswordForm.getPassword().equals( sellerPasswordForm.getRepeatPassword()))			return false;				if( ! sellerSession.getPassword().equals( DBUtils.digest( sellerPasswordForm.getPresentPassword())))			return false;				seller.setPassword( DBUtils.digest( sellerPasswordForm.getPassword()));				sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerResetPassword( Integer sellerId, String password) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return false;				seller.setPassword( password);				sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerActivationCode( Integer sellerId, String code) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;			seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return false;				seller.setActivationCode( code);				sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerProfile( SellerProfileForm sellerProfileForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				seller.setBreastSizeConst  		( sellerProfileForm.getBreastSize());		seller.setEducationLevelConst	( sellerProfileForm.getEducationLevel());		seller.setEyeColorConst			( sellerProfileForm.getEyeColor());		seller.setHairColorConst		( sellerProfileForm.getHairColor());		seller.setHairLengthConst		( sellerProfileForm.getHairLength());		seller.setHeightConst			( sellerProfileForm.getHeight());		seller.setIntro					( sellerProfileForm.getIntro());		seller.setLanguage1Const		( sellerProfileForm.getLanguage1());		seller.setLanguage2Const		( sellerProfileForm.getLanguage2());		seller.setLanguage3Const		( sellerProfileForm.getLanguage3());		seller.setOrientationConst		( sellerProfileForm.getOrientation());		seller.setOriginConst			( sellerProfileForm.getOrigin());		seller.setPennisSizeConst		( sellerProfileForm.getPennisSize());		seller.setPhysiqueConst			( sellerProfileForm.getPhysique());		seller.setSkinColorConst		( sellerProfileForm.getSkinColor());		seller.setSmokerConst			( sellerProfileForm.getSmoker());		seller.setText					( sellerProfileForm.getText());				if(	( !sellerSession.getIntro().equals( sellerProfileForm.getIntro())) || 			( !sellerSession.getText().equals( sellerProfileForm.getText()))) {			seller.setTextActive( new Integer( 0));		}				sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerPreferences( SellerPreferencesForm sellerPreferencesForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();		int			ageHigh		= 99;		int			ageLow		= 18;				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				ageHigh = DBUtils.parseInteger( sellerPreferencesForm.getAgeHigh(), 99).intValue();		ageLow 	= DBUtils.parseInteger( sellerPreferencesForm.getAgeLow(), 18).intValue();				if( ageHigh > 99)			ageHigh = 99;				if( ageHigh < 18)			ageHigh = 18;				if( ageLow > 99)			ageLow = 99;				if( ageLow < 18)			ageLow = 18;				seller.setPreferredSexConst				( sellerPreferencesForm.getSex());		seller.setPreferredAgeHigh				( new Integer( ageHigh));		seller.setPreferredAgeLow				( new Integer( ageLow));		seller.setPreferredBreastSizeConst  	( sellerPreferencesForm.getBreastSize());		seller.setPreferredEducationLevelConst	( sellerPreferencesForm.getEducationLevel());		seller.setPreferredEyeColorConst		( sellerPreferencesForm.getEyeColor());		seller.setPreferredHairColorConst		( sellerPreferencesForm.getHairColor());		seller.setPreferredHairLengthConst		( sellerPreferencesForm.getHairLength());		seller.setPreferredHeightConst			( sellerPreferencesForm.getHeight());		seller.setPreferredLanguageConst		( sellerPreferencesForm.getLanguage());		seller.setPreferredOrientationConst		( sellerPreferencesForm.getOrientation());		seller.setPreferredOriginConst			( sellerPreferencesForm.getOrigin());		seller.setPreferredPennisSizeConst		( sellerPreferencesForm.getPennisSize());		seller.setPreferredPhysiqueConst		( sellerPreferencesForm.getPhysique());		seller.setPreferredSkinColorConst		( sellerPreferencesForm.getSkinColor());		seller.setPreferredSmokerConst			( sellerPreferencesForm.getSmoker());		seller.setPreferredText					( sellerPreferencesForm.getText());		seller.setPreferencesSaved				( new Integer( 1));				if(	!sellerSession.getText().equals( sellerPreferencesForm.getText())) { 			seller.setTextActive( new Integer( 0));		}				sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerParameter( SellerParameterForm sellerParameterForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				if( ( !DBUtils.controlNull( seller.getMeetingAddress1()).equals( sellerParameterForm.getMeetingAddress1()))		||			( !DBUtils.controlNull( seller.getMeetingAddress2()).equals( sellerParameterForm.getMeetingAddress2())) 		||			( !DBUtils.controlNull( seller.getMeetingCountry()).equals( sellerParameterForm.getMeetingCountry())) 		||			( !DBUtils.controlNull( seller.getMeetingCity()).equals( sellerParameterForm.getMeetingCity()))				||			( !DBUtils.controlNull( seller.getMeetingPostalCode()).equals( sellerParameterForm.getMeetingPostalCode()))	 ||			( !DBUtils.controlNull( seller.getMeetingState()).equals( sellerParameterForm.getMeetingState()))) {						seller.setTextActive( new Integer (0));		}				seller.setAllowBankPayment		( DBUtils.boolean2Integer( sellerParameterForm.getAllowBankPayment()));		seller.setAllowEmail			( DBUtils.boolean2Integer( sellerParameterForm.getAllowEmail()));		seller.setAllowMessenger		( DBUtils.boolean2Integer( sellerParameterForm.getAllowMessenger()));		seller.setAllowPaypalPayment	( DBUtils.boolean2Integer( sellerParameterForm.getAllowPaypalPayment()));		seller.setAllowPhoneCall		( DBUtils.boolean2Integer( sellerParameterForm.getAllowPhoneCall()));		seller.setAllowUrl				( DBUtils.boolean2Integer( sellerParameterForm.getAllowUrl()));		seller.setAllowSkype			( DBUtils.boolean2Integer( sellerParameterForm.getAllowSkype()));		seller.setAllowSms				( DBUtils.boolean2Integer( sellerParameterForm.getAllowSms()));		seller.setAnalSex				( DBUtils.boolean2Integer( sellerParameterForm.getAnalSex()));		seller.setBankAccount			( sellerParameterForm.getBankAccount());		seller.setBdsm					( DBUtils.boolean2Integer( sellerParameterForm.getBdsm()));		seller.setBuyerPaysDisplacement	( DBUtils.boolean2Integer( sellerParameterForm.getBuyerPaysDisplacement()));		seller.setDisplacementPrize		( DBUtils.parseDouble( sellerParameterForm.getDisplacementPrize(), 0));		seller.setGoogleMapsUrl			( sellerParameterForm.getGoogleMapsUrl());		seller.setHasMeetingPlace		( DBUtils.boolean2Integer( sellerParameterForm.getHasMeetingPlace()));		seller.setInBuyerHouse			( DBUtils.boolean2Integer( sellerParameterForm.getInBuyerHouse()));		seller.setInCar					( DBUtils.boolean2Integer( sellerParameterForm.getInCar()));		seller.setInHotel				( DBUtils.boolean2Integer( sellerParameterForm.getInHotel()));		seller.setInSellerHouse			( DBUtils.boolean2Integer( sellerParameterForm.getInSellerHouse()));		seller.setMeetingAddress1		( sellerParameterForm.getMeetingAddress1());		seller.setMeetingAddress2		( sellerParameterForm.getMeetingAddress2());		seller.setMeetingCity			( sellerParameterForm.getMeetingCity());		seller.setMeetingCountry		( sellerParameterForm.getMeetingCountry());		seller.setMeetingPostalCode		( sellerParameterForm.getMeetingPostalCode());		seller.setMeetingState			( sellerParameterForm.getMeetingState());		seller.setMessengerAccount		( sellerParameterForm.getMessengerAccount());		seller.setOralSex				( DBUtils.boolean2Integer( sellerParameterForm.getOralSex()));		seller.setPaymentBeforeDate		( DBUtils.boolean2Integer( sellerParameterForm.getPaymentBeforeDate()));		seller.setPaypalAccount			( sellerParameterForm.getPaypalAccount());		seller.setPhoneNumberCall		( sellerParameterForm.getPhoneNumberCall());		seller.setPhoneNumberSMS		( sellerParameterForm.getPhoneNumberSMS());		seller.setUrl					( sellerParameterForm.getUrl());		seller.setSkypeAccount			( sellerParameterForm.getSkypeAccount());		seller.setParametersSaved		( new Integer( 1));						sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerOffLine( Integer sellerId, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return false;				seller.setIsOnLine( new Integer( 0));				sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerPicture( PictureForm pictureForm, SellerSession sellerSession, int randomNumber) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();		int			index		= 0;				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				index = DBUtils.parseInteger( pictureForm.getIndex(), 0).intValue();				/*if( ( buyer.getPicture1().intValue() == 0) &&			( buyer.getPicture2().intValue() == 0) &&			( buyer.getPicture3().intValue() == 0) &&			( buyer.getPicture4().intValue() == 0) &&			( buyer.getPicture5().intValue() == 0)) {				buyer.setMainPicture( new Integer( index));				buyer.setMainPictureCode( new Integer( randomNumber));			}		*/		switch( index) {			case 1: 				seller.setPicture1( new Integer( randomNumber)); 				seller.setPicture1Waiting( new Integer( 1));			break;			case 2: 				seller.setPicture2( new Integer( randomNumber));				seller.setPicture2Waiting( new Integer( 1));			break;			case 3: 				seller.setPicture3( new Integer( randomNumber));				seller.setPicture3Waiting( new Integer( 1));			break;			case 4: 				seller.setPicture4( new Integer( randomNumber));				seller.setPicture4Waiting( new Integer( 1));			break;			case 5: 				seller.setPicture5( new Integer( randomNumber));				seller.setPicture5Waiting( new Integer( 1));			break;		}				seller.setPicturesSaved( new Integer( 1));				sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerPictureAproved( Integer sellerId, int index) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return false;				switch( index) {			case 1:  				seller.setPicture1Waiting( new Integer( 0));			break;			case 2: 				seller.setPicture2Waiting( new Integer( 0));			break;			case 3: 				seller.setPicture3Waiting( new Integer( 0));			break;			case 4: 				seller.setPicture4Waiting( new Integer( 0));			break;			case 5: 				seller.setPicture5Waiting( new Integer( 0));			break;		}				if( seller.getMainPicture().intValue() == 0){			seller.setMainPicture( new Integer( index));			switch( index) {				case 1:  					seller.setMainPictureCode( seller.getPicture1());				break;				case 2: 					seller.setMainPictureCode( seller.getPicture2());				break;				case 3: 					seller.setMainPictureCode( seller.getPicture3());				break;				case 4: 					seller.setMainPictureCode( seller.getPicture4());				break;				case 5: 					seller.setMainPictureCode( seller.getPicture5());				break;			}		}				if( seller.getHasPicture().intValue() == 0)			seller.setHasPicture( new Integer( 1));				sellerDAO.setSeller( seller);				return true;	}		public boolean setSellerCensor( AdminCensorSellerForm adminCensorSellerForm) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( DBUtils.parseInteger( adminCensorSellerForm.getId(), 0));				if( seller == null)			return false;				seller.setAddress1			( adminCensorSellerForm.getAddress1());		seller.setAddress2			( adminCensorSellerForm.getAddress2());		seller.setCity				( adminCensorSellerForm.getCity());		seller.setName				( adminCensorSellerForm.getName());		seller.setSurname			( adminCensorSellerForm.getSurname());		seller.setPostalCode		( adminCensorSellerForm.getPostalCode());		seller.setIntro				( adminCensorSellerForm.getIntro());		seller.setText				( adminCensorSellerForm.getText());		seller.setPreferredText		( adminCensorSellerForm.getPreferredText());		seller.setTextActive		( new Integer( 1));						sellerDAO.setSeller( seller);				return true;	}		public boolean markAsMainPicture( Integer index, SellerSession sellerSession) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;								switch( index.intValue()) {			case 1: if( ( seller.getPicture1().intValue() == 0) || ( seller.getPicture1Waiting().intValue() == 1))						return false;					seller.setMainPicture( new Integer( 1));					seller.setMainPictureCode( seller.getPicture1());			break;						case 2: if( ( seller.getPicture2().intValue() == 0) || ( seller.getPicture2Waiting().intValue() == 1))						return false;					seller.setMainPicture( new Integer( 2)); 					seller.setMainPictureCode( seller.getPicture2());			break;			case 3: if( ( seller.getPicture3().intValue() == 0) || ( seller.getPicture3Waiting().intValue() == 1))						return false;					seller.setMainPicture( new Integer( 3)); 					seller.setMainPictureCode( seller.getPicture3());			break;			case 4: if( ( seller.getPicture4().intValue() == 0) || ( seller.getPicture4Waiting().intValue() == 1))						return false;					seller.setMainPicture( new Integer( 4)); 					seller.setMainPictureCode( seller.getPicture4());				break;			case 5: if( ( seller.getPicture5().intValue() == 0) || ( seller.getPicture5Waiting().intValue() == 1))						return false;					seller.setMainPicture( new Integer( 5)); 					seller.setMainPictureCode( seller.getPicture5());			break;		}				sellerDAO.setSeller( seller);				return true;	}		public boolean deletePicture( Integer index, Integer id) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO	sellerDAO	= new SellerDAO();		Seller		seller		= null;		UtilDAO		utilDAO		= new UtilDAO();				seller = sellerDAO.getSellerById( id);				if( seller == null)			return false;				switch( index.intValue()) {			case 1: 				seller.setPicture1( new Integer( 0));				seller.setPicture1Waiting( new Integer( 0));			break;			case 2: 				seller.setPicture2( new Integer( 0));				seller.setPicture2Waiting( new Integer( 0));			break;			case 3: 				seller.setPicture3( new Integer( 0));				seller.setPicture3Waiting( new Integer( 0));			break;			case 4: 				seller.setPicture4( new Integer( 0));				seller.setPicture4Waiting( new Integer( 0));			break;			case 5: 				seller.setPicture5( new Integer( 0));				seller.setPicture5Waiting( new Integer( 0));			break;		}				if( ( seller.getPicture1().intValue() == 0) &&			( seller.getPicture2().intValue() == 0) &&			( seller.getPicture3().intValue() == 0) &&			( seller.getPicture4().intValue() == 0) &&			( seller.getPicture5().intValue() == 0)) {			seller.setHasPicture( new Integer( 0));			seller.setMainPicture( new Integer( 0));			seller.setMainPictureCode( new Integer( 0));		} else {			if( seller.getMainPicture().intValue() == index.intValue()){				if( seller.getPicture1().intValue() > 1){					seller.setMainPicture( new Integer( 1));					seller.setMainPictureCode( seller.getPicture1());				}else if( seller.getPicture2().intValue() > 1) {					seller.setMainPicture( new Integer( 2));					seller.setMainPictureCode( seller.getPicture2());				}else if( seller.getPicture3().intValue() > 1) {					seller.setMainPicture( new Integer( 3));					seller.setMainPictureCode( seller.getPicture3());				}else if( seller.getPicture4().intValue() > 1) {					seller.setMainPicture( new Integer( 4));					seller.setMainPictureCode( seller.getPicture4());				}else if( seller.getPicture5().intValue() > 1) {					seller.setMainPicture( new Integer( 5));					seller.setMainPictureCode( seller.getPicture5());				}			}		}				sellerDAO.setSeller( seller);				return true;	}			public boolean decreaseCredits( Integer sellerId, Integer credits, int type, Locale locale)  throws DataAccessErrorException, DataUpdateErrorException{		SellerDAO				sellerDAO 	= new SellerDAO();		Seller					seller		= null;		SellerHistoricCreditDAO	sellerHistoricCreditDAO	= new SellerHistoricCreditDAO();		SellerHistoricCredit	sellerHistoricCredit	= new SellerHistoricCredit();				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return false;				if( seller.getCredits().intValue() < credits.intValue())			return false;				seller.setCredits( new Integer( seller.getCredits().intValue() - credits.intValue()));				sellerHistoricCredit.setSeller	( seller);		sellerHistoricCredit.setSellerId( seller.getId());				switch( type) {			case 1: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_CONTACT)); break;			case 2: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_PROMOTION)); break;			case 3: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_OTHER)); break;			default: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_OTHER)); break;		}				sellerHistoricCredit.setCredits	( credits);		sellerHistoricCredit.setDate	( GregorianCalendar.getInstance( locale).getTime());		sellerHistoricCredit.setResult	( seller.getCredits());				sellerDAO.setSeller( seller);		sellerHistoricCreditDAO.setSellerHistoricCredit( sellerHistoricCredit);						return true;	}		public boolean increaseCredits( BuyCreditsForm buyCreditsForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO				sellerDAO				= new SellerDAO();		SellerHistoricCreditDAO	sellerHistoricCreditDAO	= new SellerHistoricCreditDAO();		Seller					seller					= null;		SellerHistoricCredit	sellerHistoricCredit	= new SellerHistoricCredit();				seller = sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				if( seller.getId().intValue() != DBUtils.parseInteger( buyCreditsForm.getUserId(), 0).intValue())			return false;				seller.setCredits( new Integer( seller.getCredits().intValue() + DBUtils.parseInteger( buyCreditsForm.getCredits(), 0).intValue()));				sellerHistoricCredit.setSeller( seller);		sellerHistoricCredit.setSellerId( seller.getId());		switch( DBUtils.parseInteger( buyCreditsForm.getType(), 0).intValue()) {			case 1: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_TRANSFER)); break;			case 2: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_CREDIT_CARD)); break;			case 3: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_PAYPAL)); break;			case 4: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_SMS)); break;			default: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_OTHER)); break;		}		sellerHistoricCredit.setCredits	( DBUtils.parseInteger( buyCreditsForm.getCredits(), 0));		sellerHistoricCredit.setDate	( GregorianCalendar.getInstance( locale).getTime());		sellerHistoricCredit.setResult	( seller.getCredits());		sellerDAO.setSeller( seller);		sellerHistoricCreditDAO.setSellerHistoricCredit( sellerHistoricCredit);				return true;	}		public Seller increaseCredits( Integer sellerId, Integer credits, int type, Locale locale)  throws DataAccessErrorException, DataUpdateErrorException{		SellerDAO				sellerDAO 	= new SellerDAO();		Seller					seller		= null;		SellerHistoricCreditDAO	sellerHistoricCreditDAO	= new SellerHistoricCreditDAO();		SellerHistoricCredit	sellerHistoricCredit	= new SellerHistoricCredit();				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return null;						seller.setCredits( new Integer( seller.getCredits().intValue() + credits.intValue()));				sellerHistoricCredit.setSeller	( seller);		sellerHistoricCredit.setSellerId( seller.getId());				switch( type) {			case 1: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_CONTACT)); break;			case 2: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_PROMOTION)); break;			case 3: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_OTHER)); break;			default: sellerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_OTHER)); break;		}				sellerHistoricCredit.setCredits	( credits);		sellerHistoricCredit.setDate	( GregorianCalendar.getInstance( locale).getTime());		sellerHistoricCredit.setResult	( seller.getCredits());				sellerDAO.setSeller( seller);		sellerHistoricCreditDAO.setSellerHistoricCredit( sellerHistoricCredit);						return seller;	}		public Seller setSubscription( Integer sellerId, Integer years, int type, Locale locale)  throws DataAccessErrorException, DataUpdateErrorException{		SellerDAO				sellerDAO 	= new SellerDAO();		Seller					seller		= null;		SellerHistoricCreditDAO	sellerHistoricCreditDAO	= new SellerHistoricCreditDAO();		SellerHistoricCredit	sellerHistoricCredit	= new SellerHistoricCredit();		GregorianCalendar		gc						= ( GregorianCalendar) GregorianCalendar.getInstance( locale);				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return null;				gc.add( GregorianCalendar.YEAR, years.intValue());				seller.setSubscriptionUntil( gc.getTime());				sellerHistoricCredit.setSeller	( seller);		sellerHistoricCredit.setSellerId( seller.getId());		sellerHistoricCredit.setCreditActionConst( new Integer( type));		sellerHistoricCredit.setCredits	( years);		sellerHistoricCredit.setDate	( GregorianCalendar.getInstance( locale).getTime());		sellerHistoricCredit.setResult	( seller.getCredits());				sellerDAO.setSeller( seller);		sellerHistoricCreditDAO.setSellerHistoricCredit( sellerHistoricCredit);						return seller;	}		public boolean activateSellerByLogin( String login, String activationCode, boolean sendMail, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerDAO 						sellerDAO 						= new SellerDAO();		BuyerDAO 						buyerDAO 						= new BuyerDAO();		RecommendationDAO				recommendationDAO				= new RecommendationDAO();		Seller							seller							= null;		Iterator						iterator						= null;		BuyerRecomendation				buyerRecomendation				= null;		SellerRecomendation				sellerRecomendation				= null;		RecommendationUsedMailObject	recommendationUsedMailObject	= new RecommendationUsedMailObject( locale);				seller = sellerDAO.getSellerByLogin( login);				if( seller == null)			return false;				if( seller.getActive().intValue() == 1)			return false;				if( ! seller.getActivationCode().equals( activationCode))			return false;				seller.setActive( new Integer( 1));				sellerDAO.setSeller( seller);				iterator = recommendationDAO.getBuyerRecomendationByEmail( seller.getEmail()).iterator();		while( iterator.hasNext()) {			buyerRecomendation = ( BuyerRecomendation) iterator.next();						if( recommendationDAO.getBuyerUsedRecommendationCount( buyerRecomendation.getBuyer().getId()) < 5) {				buyerRecomendation.getBuyer().setCredits( new Integer( buyerRecomendation.getBuyer().getCredits().intValue() + 1));				buyerRecomendation.setUsed( new Integer( 1));								buyerDAO.setBuyer( buyerRecomendation.getBuyer());				recommendationDAO.setBuyerRecommendation( buyerRecomendation);								if( sendMail) {					recommendationUsedMailObject.setCredits	( buyerRecomendation.getBuyer().getCredits().toString());										String text = ConfigurationParameterManager.getMessages().getMessage( locale, "recommendationUsedMailObject.subject");										Mail.sendMail( buyerRecomendation.getBuyer().getEmail(), text, recommendationUsedMailObject);				}			}		}				iterator = recommendationDAO.getSellerRecomendationByEmail( seller.getEmail()).iterator();		while( iterator.hasNext()) {			sellerRecomendation = ( SellerRecomendation) iterator.next();						if( recommendationDAO.getSellerUsedRecommendationCount( sellerRecomendation.getSeller().getId()) < 5) {				sellerRecomendation.getSeller().setCredits( new Integer( sellerRecomendation.getSeller().getCredits().intValue() + 1));				sellerRecomendation.setUsed( new Integer( 1));								sellerDAO.setSeller( sellerRecomendation.getSeller());				recommendationDAO.setSellerRecommendation( sellerRecomendation);								if( sendMail) {					recommendationUsedMailObject.setCredits	( sellerRecomendation.getSeller().getCredits().toString());										String text = ConfigurationParameterManager.getMessages().getMessage( locale, "recommendationUsedMailObject.subject");										Mail.sendMail( sellerRecomendation.getSeller().getEmail(), text, recommendationUsedMailObject);				}			}		}				return true;	}		public Collection getSellerToCensor() throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO					 			sellerDAO 			= new SellerDAO();		Seller									seller				= null;		Iterator								iterator			= null;		ArrayList								result				= new ArrayList();		SellerToCensorView 						sellerToCensorView 	= null;		SellerToSellerToCensorViewTranslator	translator			= new SellerToSellerToCensorViewTranslator();				iterator = sellerDAO.getSellerToCensor( ).iterator();				while( iterator.hasNext()) {			seller = ( Seller) iterator.next();			translator.setObject( seller);						sellerToCensorView = ( SellerToCensorView) translator.translateView();						result.add( sellerToCensorView);		}				return result;	}		public Collection getSellerToCensorPicture() throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO				 			sellerDAO 			= new SellerDAO();		Seller								seller				= null;		Iterator							iterator			= null;		ArrayList							result				= new ArrayList();		SellerToCensorView 					sellerToCensorView 	= null;		SellerToSellerToCensorViewTranslator	translator			= new SellerToSellerToCensorViewTranslator();				iterator = sellerDAO.getSellerToCensorPicture( ).iterator();				while( iterator.hasNext()) {			seller = ( Seller) iterator.next();			translator.setObject( seller);						sellerToCensorView = ( SellerToCensorView) translator.translateView();						result.add( sellerToCensorView);		}				return result;	}		public SellerToCensorView getSellerToCensorById( Integer sellerId) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO				 				sellerDAO 			= new SellerDAO();		Seller									seller				= null;		SellerToSellerToCensorViewTranslator	translator			= new SellerToSellerToCensorViewTranslator();				seller = sellerDAO.getSellerById( sellerId);		if( seller == null)			return null;				translator.setObject( seller);					return ( SellerToCensorView) translator.translateView();				}		public SellerSession getSellerSessionByLoginAndPassword( String login, String password, boolean onlyActives, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{				SellerDAO						sellerDAO 		= new SellerDAO();		Seller							seller			= null;		SellerSession 					sellerSession 	= null;		SellerToSellerSessionTranslator	translator		= new SellerToSellerSessionTranslator();		if( (login == null) || ( password == null))			return null;				if( (login.length() == 0) || ( password.length() == 0))			return null;				seller = sellerDAO.getSellerByLoginAndPassword( login, password, onlyActives);				if ( seller == null)			return null;					translator.setObject( seller);		translator.setLocale( locale);				sellerSession = ( SellerSession) translator.translateView();				return sellerSession;	}		public SellerSession getSellerSessionByEmailAndPassword( String email, String password, boolean onlyActives, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{				SellerDAO						sellerDAO 		= new SellerDAO();		Seller							seller			= null;		SellerSession 					sellerSession 	= null;		SellerToSellerSessionTranslator	translator		= new SellerToSellerSessionTranslator();		if( (email == null) || ( password == null))			return null;				if( (email.length() == 0) || ( password.length() == 0))			return null;				seller = sellerDAO.getSellerByEmailAndPassword( email, password, onlyActives);				if ( seller == null)			return null;					translator.setObject( seller);		translator.setLocale( locale);				sellerSession = ( SellerSession) translator.translateView();				return sellerSession;	}		public SellerSession getSellerSessionBySellerId( Integer sellerId, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{				SellerDAO						sellerDAO 		= new SellerDAO();		Seller							seller			= null;		SellerSession 					sellerSession 	= null;		SellerToSellerSessionTranslator	translator		= new SellerToSellerSessionTranslator();		if( sellerId == null || sellerId.intValue() <= 0)			return null;				seller = sellerDAO.getSellerById( sellerId);				if ( seller == null)			return null;					translator.setObject( seller);		translator.setLocale( locale);				sellerSession = ( SellerSession) translator.translateView();				return sellerSession;	}		public SellerView getSellerById( Integer id, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO 	sellerDAO 	= new SellerDAO();		Seller		seller		= null;				seller = sellerDAO.getSellerById( id);				if( seller == null)			return null;						return ( SellerView) TranslatorFactory.getTranslator( seller, locale).translateView();	}		public SellerView getSellerByLogin( String login, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO 	sellerDAO 	= new SellerDAO();		Seller		seller		= null;				seller = sellerDAO.getSellerByLogin( login);				if( seller == null)			return null;				return ( SellerView) TranslatorFactory.getTranslator( seller, locale).translateView();	}		public SellerView getSellerByEmail( String email, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO 	sellerDAO 	= new SellerDAO();		Seller		seller		= null;				seller = sellerDAO.getSellerByEmail( email);				if( seller == null)			return null;				return ( SellerView) TranslatorFactory.getTranslator( seller, locale).translateView();	}		public ContactWaysView getSellerContactWaysByContactId( Integer id, BuyerSession buyerSession, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO 		sellerDAO 		= new SellerDAO();		ContactDAO 		contactDAO 		= new ContactDAO();		ContactWaysView	contactWaysView = null;		Seller			seller			= null;		Contact			contact			= null;				contact = contactDAO.getContactById( id);				if( contact == null)			return null;				if( contact.getBuyerId().intValue() != buyerSession.getId().intValue())			return null;				if( contact.getMessageStatusConst().intValue() != Constant.MESSAGE_STATUS_ACCEPTED)			return null;				seller = sellerDAO.getSellerById( contact.getSellerId());				if( seller == null)			return null;				contactWaysView = new ContactWaysView();				contactWaysView.setSellerId			( DBUtils.controlNull( seller.getId()));		contactWaysView.setContactId		( DBUtils.controlNull( contact.getId()));		contactWaysView.setSellerLogin		( DBUtils.controlNull( seller.getLogin()));		contactWaysView.setAllowEmail		( DBUtils.controlNull( seller.getAllowEmail()));		contactWaysView.setAllowMessenger	( DBUtils.controlNull( seller.getAllowMessenger()));		contactWaysView.setAllowPhoneCall	( DBUtils.controlNull( seller.getAllowPhoneCall()));		contactWaysView.setAllowSkype		( DBUtils.controlNull( seller.getAllowSkype()));		contactWaysView.setAllowSms			( DBUtils.controlNull( seller.getAllowSms()));		contactWaysView.setEmail			( DBUtils.controlNull( seller.getEmail()));		contactWaysView.setMessenger		( DBUtils.controlNull( seller.getMessengerAccount()));		contactWaysView.setPhoneCall		( DBUtils.controlNull( seller.getPhoneNumberCall()));		contactWaysView.setSms				( DBUtils.controlNull( seller.getPhoneNumberSMS()));		contactWaysView.setSkype			( DBUtils.controlNull( seller.getSkypeAccount()));				return contactWaysView;	}		public StartContactView getStartContactBySellerId( Integer id, BuyerSession buyerSession, Date startDate, Date endDate, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerDAO 					sellerDAO 			= new SellerDAO();		SellerServiceDAO 			sellerServiceDAO 	= new SellerServiceDAO();		CalendarDAO					calendarDAO			= new CalendarDAO();		StartContactView			startContactView 	= null;		Seller						seller				= null;		SellerService				sellerService		= null;		Contact						contact				= null;		Calendar					calendar			= null;		Collection					calendarCollection	= null;		Iterator					calendarIterator	= null;		StartContactView.DateDate	dateDate			= null;		StartContactView.HourList	hourList			= null;		GregorianCalendar			date				= null;				seller = sellerDAO.getSellerById( id);				if( seller == null)			return null;				startContactView = new StartContactView();				calendarCollection = calendarDAO.getCalendarBySellerId( id, startDate, endDate, "date", true, 0, 12*24);			calendarIterator = calendarCollection.iterator();				while( calendarIterator.hasNext()) {			calendar = ( Calendar) calendarIterator.next();			dateDate = startContactView.new DateDate();						date = new GregorianCalendar();			date.setTime( calendar.getDate());					if( hourList == null) {				hourList = startContactView.new HourList();								hourList.setJavaDate	( calendar.getDate());				hourList.setDate		( DBUtils.getDate( calendar.getDate(), 4));				hourList.setBriefDate	( DBUtils.getDate( calendar.getDate(), 1));			}						if( ! DBUtils.getDate( hourList.getJavaDate(), 1).equals( DBUtils.getDate( calendar.getDate(), 1))) {								if( hourList.getHourList().size() >= 23) {					startContactView.getDateList().add( hourList);				} 								hourList = startContactView.new HourList();				hourList.setJavaDate	( calendar.getDate());				hourList.setDate		( DBUtils.getDate( calendar.getDate(), 4));				hourList.setBriefDate	( DBUtils.getDate( calendar.getDate(), 1));			}						dateDate.setHour( DBUtils.controlNull( new Integer( date.get( GregorianCalendar.HOUR_OF_DAY)), 2));						if( calendar.getDate().before( new Date( GregorianCalendar.getInstance( locale).getTime().getTime() + 7200000))) //two hours				dateDate.setStatus( "2");			else {				if( calendar.getHourStatusConst().intValue() == Constant.HOUR_STATUS_FREE)					dateDate.setStatus( "1");				else					dateDate.setStatus( "2");			}						dateDate.setOddOrEven((( date.get( GregorianCalendar.HOUR_OF_DAY) % 2 == 0)? "odd": "even"));						hourList.getHourList().add( dateDate);		}				sellerService = sellerServiceDAO.getSellerServiceBySellerIdServiceTypeAndBuyerSex( id, new Integer( Constant.SERVICE_TYPE_COMPANY_WITHOUT_SEX), buyerSession.getSexConst());		if( sellerService == null) {			startContactView.setAllowCompanyWithoutSex( "0");		} else {			startContactView.setAllowCompanyWithoutSex( "1");						if( sellerService.getServiceFirstHourPrice().intValue() == 0) {				startContactView.setCompanyWithoutSexIsFree( "1");			} else {				startContactView.setCompanyWithoutSexIsFree( "0");				startContactView.setCompanyWithoutSexFirstHourPrize			( DBUtils.controlNull( sellerService.getServiceFirstHourPrice()));				startContactView.setCompanyWithoutSexAdditionalHoursPrize	( DBUtils.controlNull( sellerService.getServiceAdditionalHoursPrice()));				startContactView.setCurrency								( ( ConfigurationParameterManager.getMessages().getMessage( locale, "currency." + sellerService.getCurrencyConst())));			}		}				sellerService = sellerServiceDAO.getSellerServiceBySellerIdServiceTypeAndBuyerSex( id, new Integer( Constant.SERVICE_TYPE_COMPANY_WITH_SEX), buyerSession.getSexConst());		if( sellerService == null) {			startContactView.setAllowCompanyWithSex( "0");		} else {			startContactView.setAllowCompanyWithSex( "1");						if( sellerService.getServiceFirstHourPrice().intValue() == 0) {				startContactView.setCompanyWithSexIsFree( "1");			} else {				startContactView.setCompanyWithSexIsFree( "0");				startContactView.setCompanyWithSexFirstHourPrize		( DBUtils.controlNull( sellerService.getServiceFirstHourPrice()));				startContactView.setCompanyWithSexAdditionalHoursPrize	( DBUtils.controlNull( sellerService.getServiceAdditionalHoursPrice()));				startContactView.setCurrency							( ( ConfigurationParameterManager.getMessages().getMessage( locale, "currency." + sellerService.getCurrencyConst())));			}		}				sellerService = sellerServiceDAO.getSellerServiceBySellerIdServiceTypeAndBuyerSex( id, new Integer( Constant.SERVICE_TYPE_SEX), buyerSession.getSexConst());		if( sellerService == null) {			startContactView.setAllowSex( "0");		} else {			startContactView.setAllowSex( "1");						if( sellerService.getServiceFirstHourPrice().intValue() == 0) {				startContactView.setSexIsFree( "1");			} else {				startContactView.setSexIsFree( "0");				startContactView.setSexFirstHourPrize			( DBUtils.controlNull( sellerService.getServiceFirstHourPrice()));				startContactView.setSexAdditionalHoursPrize		( DBUtils.controlNull( sellerService.getServiceAdditionalHoursPrice()));				startContactView.setCurrency					( ( ConfigurationParameterManager.getMessages().getMessage( locale, "currency." + sellerService.getCurrencyConst())));			}		}				sellerService = sellerServiceDAO.getSellerServiceBySellerIdServiceTypeAndBuyerSex( id, new Integer( Constant.SERVICE_TYPE_EROTIC_SHOW), buyerSession.getSexConst());		if( sellerService == null) {			startContactView.setAllowEroticShow( "0");		} else {			startContactView.setAllowEroticShow( "1");						if( sellerService.getServiceFirstHourPrice().intValue() == 0) {				startContactView.setEroticShowIsFree( "1");			} else {				startContactView.setEroticShowIsFree( "0");				startContactView.setEroticShowFirstHourPrize		( DBUtils.controlNull( sellerService.getServiceFirstHourPrice()));				startContactView.setEroticShowAdditionalHoursPrize	( DBUtils.controlNull( sellerService.getServiceAdditionalHoursPrice()));				startContactView.setCurrency						( ( ConfigurationParameterManager.getMessages().getMessage( locale, "currency." + sellerService.getCurrencyConst())));			}		}				startContactView.setBuyerPaysDisplacement	( DBUtils.controlNull( seller.getBuyerPaysDisplacement()));		startContactView.setDisplacementPrize		( DBUtils.controlNull( seller.getDisplacementPrize()));		/*startContactView.setSellerState				( ConfigurationParameterManager.getMessages().getMessage( locale, "state." + DBUtils.controlNull( seller.getState().getText())));		startContactView.setSellerCountry			( ConfigurationParameterManager.getMessages().getMessage( locale, "country." + DBUtils.controlNull( seller.getState().getCountry().getText())));*/				startContactView.setSellerState				( DBUtils.controlNull( seller.getMeetingState()));		startContactView.setSellerCountry			( DBUtils.controlNull( seller.getMeetingCountry()));					if( seller.getTextActive().intValue() == 1) {			startContactView.setSellerAddress1			( DBUtils.controlNull( seller.getMeetingAddress1()));			startContactView.setSellerAddress2			( DBUtils.controlNull( seller.getMeetingAddress2()));			startContactView.setSellerCity				( DBUtils.controlNull( seller.getMeetingCity()));		} else {			startContactView.setSellerAddress1			( ConfigurationParameterManager.getMessages().getMessage( locale, "common.waitingForRevision"));			startContactView.setSellerAddress2			( "");			startContactView.setSellerCity				( ConfigurationParameterManager.getMessages().getMessage( locale, "common.waitingForRevision"));		}				/*if( (seller.getInBuyerHouse().intValue() == 1) || ( seller.getInHotel().intValue() == 1) || ( seller.getInCar().intValue() == 1)) 			startContactView.setAllowOtherPlace( "1");		else			startContactView.setAllowOtherPlace( "0");*/				startContactView.setAllowOtherPlace( DBUtils.controlNull( seller.getHasMeetingPlace()));				if( ( startContactView.getAllowCompanyWithoutSex().equals( "0")) && ( startContactView.getAllowCompanyWithSex().equals( "0")) &&			( startContactView.getAllowSex().equals( "0")) &&( startContactView.getAllowEroticShow().equals( "0"))) {			startContactView.setHasServicesForThisUser( "0");		} else {			startContactView.setHasServicesForThisUser( "1");		}				return startContactView;	}		public Collection getSeller( BuyerSellerSearchForm form, boolean firstPlaceInSearch, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		ArrayList 			Result 				= new ArrayList();		Iterator			sellerIterator 		= null;						SellerServiceDAO 	sellerServiceDAO	= new SellerServiceDAO();		Seller				seller				= null;		SellerViewList		sellerViewList		= null;		boolean				odd					= true;		Date 				birthDateLow;		Date				birthDateHigh;		int 				ageHight 			= 99;		int 				ageLow 				= 18;		int					breastSize 			= 0;		int					educationLevel		= 0;		int					eyeColor			= 0;		int					hairColor			= 0;		int					hairLength			= 0;		int					height				= 0;		int					language			= 0;		int					orientation			= 0;		int					origin				= 0;		int					pennisSize			= 0;		int					physique			= 0;		int					sex					= 0;		int					skinColor			= 0;		int					smoker				= 0;		int 				service				= 0;		boolean				isFreeContact		= false;		boolean				isOnline			= false;		boolean				hasAlbum			= false;		String				login				= "";				Integer 			companyWithoutSexPriceHigh 	= null;		Integer 			companyWithSexPriceHigh 	= null;		Integer 			sexPriceHigh 				= null;		Integer 			eroticShowPriceHigh			= null;				if( form.getService_companyWithoutSex().booleanValue())			service = service | Constant.SERVICE_TYPE_COMPANY_WITHOUT_SEX;		if( form.getService_companyWithSex().booleanValue())			service = service | Constant.SERVICE_TYPE_COMPANY_WITH_SEX;		if( form.getService_sex().booleanValue())			service = service | Constant.SERVICE_TYPE_SEX;		if( form.getService_eroticShow().booleanValue())			service = service | Constant.SERVICE_TYPE_EROTIC_SHOW;				if( form.getBreastSize_big().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_BIG;		if( form.getBreastSize_normal().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_NORMAL;		if( form.getBreastSize_small().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_SMALL;		if( form.getBreastSize_veryBig().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_VERY_BIG;				if( form.getEducationLevel_postDegree().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_POSTDEGREE;		if( form.getEducationLevel_primary().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_PRIMARY;		if( form.getEducationLevel_seconday().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_SECONDARY;		if( form.getEducationLevel_universitary().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_UNIVERSITARY;				if( form.getEyeColor_black().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BLACK;		if( form.getEyeColor_blue().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BLUE;		if( form.getEyeColor_brown().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BROWN;		if( form.getEyeColor_green().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_GREEN;				if( form.getHairColor_blonde().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_BLONDE;		if( form.getHairColor_brown().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_BROWN;		if( form.getHairColor_dark().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_DARK;		if( form.getHairColor_red().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_RED;		if( form.getHairColor_white().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_WHITE;				if( form.getHairLength_beyondShoulders().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_BEYOND_SHOULDERS;		if( form.getHairLength_noHair().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_NOT_HAIR;		if( form.getHairLength_short().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_SHORT;		if( form.getHairLength_untilNeck().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_UNTIL_NECK;		if( form.getHairLength_untilShoulders().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_UNTIL_SHOULDERS;		if( form.getHeight_between150And159().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_150_AND_159;		if( form.getHeight_between160And169().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_160_AND_169;		if( form.getHeight_between170And179().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_170_AND_179;		if( form.getHeight_between180And189().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_180_AND_189;		if( form.getHeight_between190And200().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_190_AND_200;		if( form.getHeight_lessThan150().booleanValue())			height = height | Constant.HEIGHT_LESS_THAN_150;		if( form.getHeight_moreThan200().booleanValue())			height = height | Constant.HEIGHT_MORE_THAN_200;				if( form.getLanguage_arabian().booleanValue())			language = language | Constant.LANGUAGE_ARABIAN;		if( form.getLanguage_chinesse().booleanValue())			language = language | Constant.LANGUAGE_CHINESSE;		if( form.getLanguage_english().booleanValue())			language = language | Constant.LANGUAGE_ENGLISH;		if( form.getLanguage_french().booleanValue())			language = language | Constant.LANGUAGE_FRENCH;		if( form.getLanguage_german().booleanValue())			language = language | Constant.LANGUAGE_GERMAN;		if( form.getLanguage_italian().booleanValue())			language = language | Constant.LANGUAGE_ITALIAN;		if( form.getLanguage_japanesse().booleanValue())			language = language | Constant.LANGUAGE_JAPANESSE;		if( form.getLanguage_portuguese().booleanValue())			language = language | Constant.LANGUAGE_PORTUGUESE;		if( form.getLanguage_spanish().booleanValue())			language = language | Constant.LANGUAGE_SPANISH;				if( form.getOrientation_bicurious().booleanValue())			orientation = orientation | Constant.ORIENTATION_BICURIOUS;		if( form.getOrientation_bisexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_BISEXUAL;		if( form.getOrientation_heterosexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_HETEROSEXUAL;		if( form.getOrientation_homosexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_HOMOSEXUAL;				if( form.getOrigin_african().booleanValue())			origin = origin | Constant.ORIGIN_AFRICAN;		if( form.getOrigin_arabian().booleanValue())			origin = origin | Constant.ORIGIN_ARABIAN;		if( form.getOrigin_caucasic().booleanValue())			origin = origin | Constant.ORIGIN_CAUCASIC;		if( form.getOrigin_hispanic().booleanValue())			origin = origin | Constant.ORIGIN_HISPANIC;		if( form.getOrigin_indian().booleanValue())			origin = origin | Constant.ORIGIN_INDIAN;		if( form.getOrigin_mediterranean().booleanValue())			origin = origin | Constant.ORIGIN_MEDITERRANEAN;		if( form.getOrigin_oriental().booleanValue())			origin = origin | Constant.ORIGIN_ORIENTAL;				if( form.getPennisSize_big().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_BIG;		if( form.getPennisSize_biggerThanNormal().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_BIGGER_THAN_NORMAL;		if( form.getPennisSize_normal().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_NORMAL;		if( form.getPennisSize_veryBig().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_VERY_BIG;				if( form.getPhysique_atlethic().booleanValue())			physique = physique | Constant.PHYSIQUE_ATLETHIC;		if( form.getPhysique_fat().booleanValue())			physique = physique | Constant.PHYSIQUE_FAT;		if( form.getPhysique_muscled().booleanValue())			physique = physique | Constant.PHYSIQUE_MUSCLED;		if( form.getPhysique_normal().booleanValue())			physique = physique | Constant.PHYSIQUE_NORMAL;		if( form.getPhysique_thin().booleanValue())			physique = physique | Constant.PHYSIQUE_THIN;		if( form.getSex_boy().booleanValue())			sex = sex | Constant.SEX_BOY;		if( form.getSex_boyAndGirlCouple().booleanValue())			sex = sex | Constant.SEX_BOY_AND_GIRL_COUPLE;		if( form.getSex_boysCouple().booleanValue())			sex = sex | Constant.SEX_BOYS_COUPLE;		if( form.getSex_girl().booleanValue())			sex = sex | Constant.SEX_GIRL;		if( form.getSex_girlsCouple().booleanValue())			sex = sex | Constant.SEX_GIRLS_COUPLE;		if( form.getSex_group().booleanValue())			sex = sex | Constant.SEX_GROUP;		if( form.getSex_shemale().booleanValue())			sex = sex | Constant.SEX_SHEMALE;				if( form.getSkinColor_black().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_BLACK;		if( form.getSkinColor_dark().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_DARK;		if( form.getSkinColor_veryDark().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_VERY_DARK;		if( form.getSkinColor_white().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_WHITE;				if( form.getSmoker_eventuallySmoker().booleanValue())			smoker = smoker | Constant.SMOKER_EVENTUALLY;		if( form.getSmoker_noSmoker().booleanValue())			smoker = smoker | Constant.SMOKER_NO;		if( form.getSmoker_smoker().booleanValue())			smoker = smoker | Constant.SMOKER_YES;				birthDateLow 	= DBUtils.getBirthDate( DBUtils.parseInteger( form.getAgeHigh(), 99).intValue(), locale);		birthDateHigh 	= DBUtils.getBirthDate( DBUtils.parseInteger( form.getAgeLow(), 18).intValue(), locale);				companyWithoutSexPriceHigh 	= DBUtils.parseInteger( form.getCompanyWithoutSexPriceHigh(), Integer.MAX_VALUE);		companyWithSexPriceHigh 	= DBUtils.parseInteger( form.getCompanyWithSexPriceHigh(), Integer.MAX_VALUE);		sexPriceHigh 				= DBUtils.parseInteger( form.getSexPriceHigh(), Integer.MAX_VALUE);		eroticShowPriceHigh 		= DBUtils.parseInteger( form.getEroticShowPriceHigh(), Integer.MAX_VALUE);				isOnline 		= form.getIsOnline().booleanValue();		isFreeContact 	= form.getIsFreeContact().booleanValue();		hasAlbum 		= form.getHasAlbum().booleanValue();		login			= DBUtils.controlNull( form.getLogin());				sellerIterator = sellerServiceDAO.getSellerService( 	form.getMySex(), 																new Integer( sex), 																form.getCountry(), 																form.getState(), 																birthDateLow, 																birthDateHigh, 																new Integer( service),																companyWithoutSexPriceHigh,																companyWithSexPriceHigh,																sexPriceHigh,																eroticShowPriceHigh,																new Integer( origin), 																new Integer( skinColor), 																new Integer( hairColor), 																new Integer( hairLength), 																new Integer( eyeColor), 																new Integer( language), 																new Integer( educationLevel), 																new Integer( smoker), 																new Integer( physique), 																new Integer( height), 																new Integer( orientation), 																new Integer( pennisSize), 																new Integer( breastSize),																firstPlaceInSearch,																isOnline,																isFreeContact,																hasAlbum,																login,																form.getOrderedBy(),																startIndex, 																offset).iterator();		while( sellerIterator.hasNext()){			seller = (( SellerService) sellerIterator.next()).getSeller();						SellerToSellerViewListTranslator translator = new SellerToSellerViewListTranslator();						translator.setObject( seller);			translator.setLocale( locale);						sellerViewList = ( SellerViewList) translator.translateView();						if( odd)				sellerViewList.setOddOrEven( "odd");			else				sellerViewList.setOddOrEven( "even");						odd = ! odd;						Result.add( sellerViewList);		}				return Result;	}		public int getSellerCount( BuyerSellerSearchForm form, boolean firstPlaceInSearch, Locale locale) throws DataAccessErrorException	{		ArrayList 			Result 			= new ArrayList();		Iterator			sellerIterator 	= null;						SellerServiceDAO 	theDAO			= new SellerServiceDAO();		Seller				seller			= null;		SellerView			sellerView		= null;		boolean				odd				= true;		Date 				birthDateLow;		Date				birthDateHigh;		int 				ageHight 		= 99;		int 				ageLow 			= 18;		int					breastSize 		= 0;		int					educationLevel	= 0;		int					eyeColor		= 0;		int					hairColor		= 0;		int					hairLength		= 0;		int					height			= 0;		int					language		= 0;		int					orientation		= 0;		int					origin			= 0;		int					pennisSize		= 0;		int					physique		= 0;		int					sex				= 0;		int					skinColor		= 0;		int					smoker			= 0;		int 				service			= 0;		boolean				isFreeContact	= false;		boolean				isOnline		= false;		boolean				hasAlbum		= false;		String				login			= "";				Integer 			companyWithoutSexPriceHigh 	= null;		Integer 			companyWithSexPriceHigh 	= null;		Integer 			sexPriceHigh 				= null;		Integer 			eroticShowPriceHigh			= null;				if( form.getService_companyWithoutSex().booleanValue())			service = service | Constant.SERVICE_TYPE_COMPANY_WITHOUT_SEX;		if( form.getService_companyWithSex().booleanValue())			service = service | Constant.SERVICE_TYPE_COMPANY_WITH_SEX;		if( form.getService_sex().booleanValue())			service = service | Constant.SERVICE_TYPE_SEX;		if( form.getService_eroticShow().booleanValue())			service = service | Constant.SERVICE_TYPE_EROTIC_SHOW;				if( form.getBreastSize_big().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_BIG;		if( form.getBreastSize_normal().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_NORMAL;		if( form.getBreastSize_small().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_SMALL;		if( form.getBreastSize_veryBig().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_VERY_BIG;				if( form.getEducationLevel_postDegree().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_POSTDEGREE;		if( form.getEducationLevel_primary().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_PRIMARY;		if( form.getEducationLevel_seconday().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_SECONDARY;		if( form.getEducationLevel_universitary().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_UNIVERSITARY;				if( form.getEyeColor_black().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BLACK;		if( form.getEyeColor_blue().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BLUE;		if( form.getEyeColor_brown().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BROWN;		if( form.getEyeColor_green().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_GREEN;				if( form.getHairColor_blonde().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_BLONDE;		if( form.getHairColor_brown().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_BROWN;		if( form.getHairColor_dark().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_DARK;		if( form.getHairColor_red().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_RED;		if( form.getHairColor_white().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_WHITE;				if( form.getHairLength_beyondShoulders().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_BEYOND_SHOULDERS;		if( form.getHairLength_noHair().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_NOT_HAIR;		if( form.getHairLength_short().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_SHORT;		if( form.getHairLength_untilNeck().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_UNTIL_NECK;		if( form.getHairLength_untilShoulders().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_UNTIL_SHOULDERS;		if( form.getHeight_between150And159().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_150_AND_159;		if( form.getHeight_between160And169().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_160_AND_169;		if( form.getHeight_between170And179().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_170_AND_179;		if( form.getHeight_between180And189().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_180_AND_189;		if( form.getHeight_between190And200().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_190_AND_200;		if( form.getHeight_lessThan150().booleanValue())			height = height | Constant.HEIGHT_LESS_THAN_150;		if( form.getHeight_moreThan200().booleanValue())			height = height | Constant.HEIGHT_MORE_THAN_200;				if( form.getLanguage_arabian().booleanValue())			language = language | Constant.LANGUAGE_ARABIAN;		if( form.getLanguage_chinesse().booleanValue())			language = language | Constant.LANGUAGE_CHINESSE;		if( form.getLanguage_english().booleanValue())			language = language | Constant.LANGUAGE_ENGLISH;		if( form.getLanguage_french().booleanValue())			language = language | Constant.LANGUAGE_FRENCH;		if( form.getLanguage_german().booleanValue())			language = language | Constant.LANGUAGE_GERMAN;		if( form.getLanguage_italian().booleanValue())			language = language | Constant.LANGUAGE_ITALIAN;		if( form.getLanguage_japanesse().booleanValue())			language = language | Constant.LANGUAGE_JAPANESSE;		if( form.getLanguage_portuguese().booleanValue())			language = language | Constant.LANGUAGE_PORTUGUESE;		if( form.getLanguage_spanish().booleanValue())			language = language | Constant.LANGUAGE_SPANISH;				if( form.getOrientation_bicurious().booleanValue())			orientation = orientation | Constant.ORIENTATION_BICURIOUS;		if( form.getOrientation_bisexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_BISEXUAL;		if( form.getOrientation_heterosexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_HETEROSEXUAL;		if( form.getOrientation_homosexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_HOMOSEXUAL;				if( form.getOrigin_african().booleanValue())			origin = origin | Constant.ORIGIN_AFRICAN;		if( form.getOrigin_arabian().booleanValue())			origin = origin | Constant.ORIGIN_ARABIAN;		if( form.getOrigin_caucasic().booleanValue())			origin = origin | Constant.ORIGIN_CAUCASIC;		if( form.getOrigin_hispanic().booleanValue())			origin = origin | Constant.ORIGIN_HISPANIC;		if( form.getOrigin_indian().booleanValue())			origin = origin | Constant.ORIGIN_INDIAN;		if( form.getOrigin_mediterranean().booleanValue())			origin = origin | Constant.ORIGIN_MEDITERRANEAN;		if( form.getOrigin_oriental().booleanValue())			origin = origin | Constant.ORIGIN_ORIENTAL;				if( form.getPennisSize_big().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_BIG;		if( form.getPennisSize_biggerThanNormal().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_BIGGER_THAN_NORMAL;		if( form.getPennisSize_normal().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_NORMAL;		if( form.getPennisSize_veryBig().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_VERY_BIG;				if( form.getPhysique_atlethic().booleanValue())			physique = physique | Constant.PHYSIQUE_ATLETHIC;		if( form.getPhysique_fat().booleanValue())			physique = physique | Constant.PHYSIQUE_FAT;		if( form.getPhysique_muscled().booleanValue())			physique = physique | Constant.PHYSIQUE_MUSCLED;		if( form.getPhysique_normal().booleanValue())			physique = physique | Constant.PHYSIQUE_NORMAL;		if( form.getPhysique_thin().booleanValue())			physique = physique | Constant.PHYSIQUE_THIN;		if( form.getSex_boy().booleanValue())			sex = sex | Constant.SEX_BOY;		if( form.getSex_boyAndGirlCouple().booleanValue())			sex = sex | Constant.SEX_BOY_AND_GIRL_COUPLE;		if( form.getSex_boysCouple().booleanValue())			sex = sex | Constant.SEX_BOYS_COUPLE;		if( form.getSex_girl().booleanValue())			sex = sex | Constant.SEX_GIRL;		if( form.getSex_girlsCouple().booleanValue())			sex = sex | Constant.SEX_GIRLS_COUPLE;		if( form.getSex_group().booleanValue())			sex = sex | Constant.SEX_GROUP;		if( form.getSex_shemale().booleanValue())			sex = sex | Constant.SEX_SHEMALE;				if( form.getSkinColor_black().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_BLACK;		if( form.getSkinColor_dark().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_DARK;		if( form.getSkinColor_veryDark().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_VERY_DARK;		if( form.getSkinColor_white().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_WHITE;				if( form.getSmoker_eventuallySmoker().booleanValue())			smoker = smoker | Constant.SMOKER_EVENTUALLY;		if( form.getSmoker_noSmoker().booleanValue())			smoker = smoker | Constant.SMOKER_NO;		if( form.getSmoker_smoker().booleanValue())			smoker = smoker | Constant.SMOKER_YES;				birthDateLow 	= DBUtils.getBirthDate( DBUtils.parseInteger( form.getAgeHigh(), 99).intValue(), locale);		birthDateHigh 	= DBUtils.getBirthDate( DBUtils.parseInteger( form.getAgeLow(), 18).intValue(), locale);				companyWithoutSexPriceHigh 	= DBUtils.parseInteger( form.getCompanyWithoutSexPriceHigh(), Integer.MAX_VALUE);		companyWithSexPriceHigh 	= DBUtils.parseInteger( form.getCompanyWithSexPriceHigh(), Integer.MAX_VALUE);		sexPriceHigh 				= DBUtils.parseInteger( form.getSexPriceHigh(), Integer.MAX_VALUE);		eroticShowPriceHigh 		= DBUtils.parseInteger( form.getEroticShowPriceHigh(), Integer.MAX_VALUE);				isOnline 		= form.getIsOnline().booleanValue();		isFreeContact 	= form.getIsFreeContact().booleanValue();		hasAlbum 		= form.getHasAlbum().booleanValue();				login			= DBUtils.controlNull( form.getLogin());				return theDAO.getSellerServiceCount( 	form.getMySex(), 												new Integer( sex), 												form.getCountry(), 												form.getState(), 												birthDateLow, 												birthDateHigh, 												new Integer( service),												companyWithoutSexPriceHigh,												companyWithSexPriceHigh,												sexPriceHigh,												eroticShowPriceHigh,												new Integer( origin), 												new Integer( skinColor), 												new Integer( hairColor), 												new Integer( hairLength), 												new Integer( eyeColor), 												new Integer( language), 												new Integer( educationLevel), 												new Integer( smoker), 												new Integer( physique), 												new Integer( height), 												new Integer( orientation), 												new Integer( pennisSize), 												new Integer( breastSize),												firstPlaceInSearch,												isOnline,												isFreeContact,												hasAlbum,												login);			}		public SellerStartView getSellerStartById( Integer id, Locale locale) throws DataAccessErrorException, DataUpdateErrorException, TranslateValueObjectErrorException	{				SellerDAO			sellerDAO 			= new SellerDAO();		MessageDAO			messageDAO			= new MessageDAO();		UtilDAO				utilDAO				= new UtilDAO();		Seller				seller				= null;		SellerStartView		sellerStartView 	= new SellerStartView();		Double 				positiveVotesPercent= new Double( 0); 		boolean 			odd					= true;				seller = sellerDAO.getSellerById( id);				if ( seller == null)			return null;									if( seller.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.seven")){			sellerStartView.setUserLevel( "7");		}else if( seller.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.six")){			sellerStartView.setUserLevel( "6");		}else if( seller.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.five")){			sellerStartView.setUserLevel( "5");		}else if( seller.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.four")){			sellerStartView.setUserLevel( "4");		}else if( seller.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.three")){			sellerStartView.setUserLevel( "3");		}else if( seller.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.two")){			sellerStartView.setUserLevel( "2");		}else if( seller.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.one")){			sellerStartView.setUserLevel( "1");		} else {			sellerStartView.setUserLevel( "0");		}						if( ( seller.getPositiveVotes().intValue() + seller.getNegativeVotes().intValue()) != 0)			positiveVotesPercent = new Double(( ( double) seller.getPositiveVotes().intValue() / ( ( double) seller.getPositiveVotes().intValue() + ( double) seller.getNegativeVotes().intValue())) * 100);				sellerStartView.setId					( DBUtils.controlNull( seller.getId()));		sellerStartView.setHasPicture			( DBUtils.controlNull( seller.getHasPicture()));		sellerStartView.setMainPicture			( DBUtils.controlNull( seller.getMainPicture()));		sellerStartView.setMainPictureCode		( DBUtils.controlNull( seller.getMainPictureCode()));		sellerStartView.setUserLevelText		( ConfigurationParameterManager.getMessages().getMessage( locale, "userLevel." + sellerStartView.getUserLevel()));		sellerStartView.setCredits				( DBUtils.controlNull( seller.getCredits()));		sellerStartView.setLogin				( DBUtils.controlNull( seller.getLogin()));		sellerStartView.setBriefLogin			( DBUtils.controlNull( seller.getLogin(), 15));		sellerStartView.setNegativeVotes		( DBUtils.controlNull( seller.getNegativeVotes()));		sellerStartView.setPositiveVotes		( DBUtils.controlNull( seller.getPositiveVotes()));		sellerStartView.setPositiveVotesPercent	( DBUtils.controlNull( positiveVotesPercent));		sellerStartView.setNewMessages			( Integer.toString( messageDAO.getSellerMessageBySellerIdCount(id, Boolean.TRUE, Boolean.TRUE)));		sellerStartView.setParametersSaved		( DBUtils.controlNull( seller.getParametersSaved()));		sellerStartView.setServicesSaved		( DBUtils.controlNull( seller.getServicesSaved()));		sellerStartView.setPreferencesSaved		( DBUtils.controlNull( seller.getPreferencesSaved()));		sellerStartView.setCalendarSaved		( DBUtils.controlNull( seller.getIsCalendarGenerated()));		sellerStartView.setPicturesSaved		( DBUtils.controlNull( seller.getPicturesSaved()));				if( ( seller.getParametersSaved().intValue() == 1) &&			( seller.getServicesSaved().intValue() == 1) &&			( seller.getPreferencesSaved().intValue() == 1) &&			( seller.getPicturesSaved().intValue() == 1) &&			( seller.getIsCalendarGenerated().intValue() == 1)) {			sellerStartView.setHasPenddingTasks( "0");		} else {			sellerStartView.setHasPenddingTasks( "1");		}				if( seller.getIsEscort().intValue() == 1 && ( seller.getSubscriptionUntil() == null || seller.getSubscriptionUntil().before( GregorianCalendar.getInstance( locale).getTime()))) {			sellerStartView.setHasPenddingTasks( "1");		}								return sellerStartView;	}		public Seller setSellerMaxCredits( Integer sellerId )  throws DataAccessErrorException, DataUpdateErrorException{		SellerDAO				sellerDAO 	= new SellerDAO();		Seller					seller		= null;		seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return null;				seller.setCredits(new Integer(ConfigurationParameterManager.getParameterInt( "initialSellerCredits")));		sellerDAO.setSeller( seller);				return seller;	}	}