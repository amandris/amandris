package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Collection;import java.util.GregorianCalendar;import java.util.Iterator;import java.util.Locale;import com.amandris.clients.service.dao.BuyerDAO;import com.amandris.clients.service.dao.ContactDAO;import com.amandris.clients.service.dao.SellerDAO;import com.amandris.clients.service.dao.VoteDAO;import com.amandris.clients.service.vo.Buyer;import com.amandris.clients.service.vo.Contact;import com.amandris.clients.service.vo.Seller;import com.amandris.clients.service.vo.VoteToBuyer;import com.amandris.clients.service.vo.VoteToSeller;import com.amandris.clients.util.Constant;import com.amandris.clients.util.DBUtils;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.form.AdminCensorVoteForm;import com.amandris.clients.web.form.ReplyVoteForm;import com.amandris.clients.web.form.VoteForm;import com.amandris.clients.web.view.OtherUserVoteDataView;import com.amandris.clients.web.view.VoteDataView;import com.amandris.clients.web.view.VoteView;public class VoteFacade {		public boolean setVoteToSeller( VoteForm voteForm, Integer buyerId, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		VoteDAO				voteDAO				= new VoteDAO();		ContactDAO			contactDAO			= new ContactDAO();		BuyerDAO			buyerDAO			= new BuyerDAO();		SellerDAO			sellerDAO			= new SellerDAO();		Contact				contact				= null;		Buyer				buyer				= null;		Seller				seller				= null;		VoteToSeller		voteToSeller		= new VoteToSeller();				contact = contactDAO.getContactById( DBUtils.parseInteger( voteForm.getContactId(), 0));				if( contact == null)			return false;			seller = sellerDAO.getSellerById( DBUtils.parseInteger( voteForm.getSellerId(), 0));				if( seller == null)			return false;				buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return false;				if( ( contact.getBuyerId().intValue() != buyerId.intValue()) || ( contact.getSellerId().intValue() != seller.getId().intValue()))			return false;				if( voteDAO.getVoteToSellerByContactId( contact.getId()) != null)			return false;				voteToSeller.setContact			( contact);		voteToSeller.setContactId		( contact.getId());		voteToSeller.setDate			( GregorianCalendar.getInstance( locale).getTime());		voteToSeller.setActive			( new Integer( 0));		voteToSeller.setBuyer			( buyer);		voteToSeller.setBuyerId			( buyerId);		voteToSeller.setSeller			( seller);		voteToSeller.setSellerId		( seller.getId());		voteToSeller.setComment			( voteForm.getText());		voteToSeller.setReply			( null);		voteToSeller.setReplyActive		( new Integer( 0));		voteToSeller.setVote			( DBUtils.parseInteger( voteForm.getVote(), 1));				contact.setVoteStatusConst		( new Integer( Constant.VOTE_STATUS_DONE));		contact.setVote					( DBUtils.parseInteger( voteForm.getVote(), 1));						if( voteToSeller.getVote().intValue() == 1) 			seller.setPositiveVotes( new Integer( seller.getPositiveVotes().intValue() + 1));		else if( voteToSeller.getVote().intValue() == -1) 			seller.setNegativeVotes( new Integer( seller.getNegativeVotes().intValue() + 1));		voteDAO.setVoteToSeller	( voteToSeller);		contactDAO.setContact	( contact);		sellerDAO.setSeller		( seller);				return true;	}		public boolean setVoteToBuyer( VoteForm voteForm, Integer sellerId, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		VoteDAO				voteDAO				= new VoteDAO();		ContactDAO			contactDAO			= new ContactDAO();		BuyerDAO			buyerDAO			= new BuyerDAO();		SellerDAO			sellerDAO			= new SellerDAO();		Contact				contact				= null;		Buyer				buyer				= null;		Seller				seller				= null;		VoteToBuyer			voteToBuyer			= new VoteToBuyer();				contact = contactDAO.getContactById( DBUtils.parseInteger( voteForm.getContactId(), 0));				if( contact == null)			return false;		seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return false;				buyer = buyerDAO.getBuyerById( DBUtils.parseInteger( voteForm.getBuyerId(), 0), null);				if( buyer == null)			return false;				if( ( contact.getSellerId().intValue() != sellerId.intValue()) || ( contact.getBuyerId().intValue() != buyer.getId().intValue()))			return false;				if( voteDAO.getVoteToBuyerByContactId( contact.getId()) != null)			return false;				voteToBuyer.setContact			( contact);		voteToBuyer.setContactId		( contact.getId());		voteToBuyer.setDate				( GregorianCalendar.getInstance( locale).getTime());		voteToBuyer.setActive			( new Integer( 0));		voteToBuyer.setBuyer			( buyer);		voteToBuyer.setBuyerId			( buyer.getId());		voteToBuyer.setSeller			( seller);		voteToBuyer.setSellerId			( sellerId);		voteToBuyer.setComment			( voteForm.getText());		voteToBuyer.setReply			( null);		voteToBuyer.setReplyActive		( new Integer( 0));		voteToBuyer.setVote				( DBUtils.parseInteger( voteForm.getVote(), 1));				contact.setSellerVoteStatusConst	( new Integer( Constant.VOTE_STATUS_DONE));		contact.setSellerVote				( DBUtils.parseInteger( voteForm.getVote(), 1));				if( voteToBuyer.getVote().intValue() == 1) 			buyer.setPositiveVotes( new Integer( buyer.getPositiveVotes().intValue() + 1));		else if( voteToBuyer.getVote().intValue() == -1) 			buyer.setNegativeVotes( new Integer( buyer.getNegativeVotes().intValue() + 1));				voteDAO.setVoteToBuyer	( voteToBuyer);		contactDAO.setContact	( contact);		buyerDAO.setBuyer		( buyer);				return true;	}		public VoteToBuyer setVoteToBuyerCensor( AdminCensorVoteForm adminCensorVoteForm) throws DataAccessErrorException, DataUpdateErrorException	{		VoteDAO				voteDAO				= new VoteDAO();		VoteToBuyer			voteToBuyer			= new VoteToBuyer();			if( adminCensorVoteForm == null)			return null;		voteToBuyer = voteDAO.getVoteToBuyerById( DBUtils.parseInteger( adminCensorVoteForm.getId(), 0));				if( voteToBuyer == null)			return null;		voteToBuyer.setActive	( new Integer( 1));		voteToBuyer.setComment	( adminCensorVoteForm.getComment());				if( adminCensorVoteForm != null && !adminCensorVoteForm.getReply().trim().equals("")){			voteToBuyer.setReplyActive	( new Integer(1));			voteToBuyer.setReply		( adminCensorVoteForm.getReply());		}						voteDAO.setVoteToBuyer	( voteToBuyer);				return voteToBuyer;	}		public VoteToSeller setVoteToSellerCensor( AdminCensorVoteForm adminCensorVoteForm) throws DataAccessErrorException, DataUpdateErrorException	{		VoteDAO				voteDAO				= new VoteDAO();		VoteToSeller		voteToSeller		= new VoteToSeller();					if( adminCensorVoteForm == null)			return null;		voteToSeller = voteDAO.getVoteToSellerById( DBUtils.parseInteger( adminCensorVoteForm.getId(), 0));				if( voteToSeller == null)			return null;		voteToSeller.setActive	( new Integer( 1));		voteToSeller.setComment	( adminCensorVoteForm.getComment());				if( adminCensorVoteForm != null && !adminCensorVoteForm.getReply().trim().equals("")){			voteToSeller.setReplyActive	( new Integer(1));			voteToSeller.setReply		( adminCensorVoteForm.getReply());		}				voteDAO.setVoteToSeller	( voteToSeller);				return voteToSeller;	}		public boolean setBuyerReplyVote( ReplyVoteForm replyVoteForm, Integer buyerId, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		VoteDAO				voteDAO				= new VoteDAO();		VoteToBuyer			voteToBuyer			= new VoteToBuyer();								voteToBuyer = voteDAO.getVoteToBuyerById( DBUtils.parseInteger( replyVoteForm.getVoteId(), 0));					if( voteToBuyer == null)			return false;				if( voteToBuyer.getBuyerId().intValue() != buyerId.intValue())			return false;				if( ( voteToBuyer.getReply() != null) && ( ! voteToBuyer.getReply().equals( "")))			return false;				voteToBuyer.setReply		( replyVoteForm.getText());		voteToBuyer.setReplyActive	( new Integer( 0));				voteDAO.setVoteToBuyer( voteToBuyer);				return true;	}		public boolean setSellerReplyVote( ReplyVoteForm replyVoteForm, Integer sellerId, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		VoteDAO				voteDAO				= new VoteDAO();		VoteToSeller		voteToSeller		= new VoteToSeller();								voteToSeller = voteDAO.getVoteToSellerById( DBUtils.parseInteger( replyVoteForm.getVoteId(), 0));					if( voteToSeller == null)			return false;				if( voteToSeller.getSellerId().intValue() != sellerId.intValue())			return false;				if( ( voteToSeller.getReply() != null) && ( ! voteToSeller.getReply().equals( "")))			return false;				voteToSeller.setReply		( replyVoteForm.getText());		voteToSeller.setReplyActive	( new Integer( 0));				voteDAO.setVoteToSeller( voteToSeller);				return true;	}		public Collection getVoteToSellerBySellerId( Integer sellerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 		voteDAO 		= new VoteDAO();		Collection 		collection 		= null;		ArrayList 		result			= new ArrayList();		VoteToSeller	voteToSeller	= null;		Iterator		iterator		= null;				collection = voteDAO.getVoteToSellerBySellerId( sellerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToSeller = ( VoteToSeller) iterator.next();			result.add( ( VoteView) TranslatorFactory.getTranslator( voteToSeller, null).translateView());		}				return result;	}		public Collection getVoteToBuyerByBuyerId( Integer buyerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 		voteDAO 		= new VoteDAO();		Collection 		collection 		= null;		ArrayList 		result			= new ArrayList();		VoteToBuyer		voteToBuyer		= null;		Iterator		iterator		= null;				collection = voteDAO.getVoteToBuyerByBuyerId( buyerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToBuyer = ( VoteToBuyer) iterator.next();			result.add( ( VoteView) TranslatorFactory.getTranslator( voteToBuyer, null).translateView());		}				return result;	}		public VoteView getVoteToBuyerById( Integer id, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 		voteDAO 		= new VoteDAO();		VoteToBuyer		voteToBuyer		= null;				voteToBuyer = voteDAO.getVoteToBuyerById( id);				if( voteToBuyer == null)			return null;				return ( VoteView) TranslatorFactory.getTranslator( voteToBuyer, locale).translateView();	}		public VoteView getVoteToSellerById( Integer id, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 		voteDAO 		= new VoteDAO();		VoteToSeller	voteToSeller		= null;				voteToSeller = voteDAO.getVoteToSellerById( id);				if( voteToSeller == null)			return null;				return ( VoteView) TranslatorFactory.getTranslator( voteToSeller, locale).translateView();	}		public VoteDataView getBuyerVoteDataByBuyerId( Integer buyerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 			voteDAO 		= new VoteDAO();		Collection 			collection 		= null;		VoteDataView 		result			= new VoteDataView();		VoteToBuyer			voteToBuyer		= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		VoteView			voteView		= null;		int					positiveVotes	= 0;		int					negativeVotes	= 0;		boolean				odd				= true;				collection = voteDAO.getVoteToBuyerByBuyerId( buyerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToBuyer = ( VoteToBuyer) iterator.next();						if ( voteToBuyer.getVote().intValue() == 1)				positiveVotes ++;			else				negativeVotes ++;						voteView = ( VoteView) TranslatorFactory.getTranslator( voteToBuyer, locale).translateView();						if( odd)				voteView.setOddOrEven( "odd");			else				voteView.setOddOrEven( "even");											list.add( voteView);		}				result.setVotes			( list);		result.setPositiveVotes	( Integer.toString( positiveVotes));		result.setNegativeVotes	( Integer.toString( negativeVotes));		result.setTotalVotes	( Integer.toString( negativeVotes + positiveVotes));				if( negativeVotes + positiveVotes == 0)			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( 0), 2));		else			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( (positiveVotes * 100) / ( positiveVotes + negativeVotes)), 2));				return result;	}		public VoteDataView getSellerVoteDataBySellerId( Integer sellerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 			voteDAO 		= new VoteDAO();		Collection 			collection 		= null;		VoteDataView 		result			= new VoteDataView();		VoteToSeller		voteToSeller	= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		VoteView			voteView		= null;		int					positiveVotes	= 0;		int					negativeVotes	= 0;		boolean				odd				= true;				collection = voteDAO.getVoteToSellerBySellerId( sellerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToSeller = ( VoteToSeller) iterator.next();						if ( voteToSeller.getVote().intValue() == 1)				positiveVotes ++;			else				negativeVotes ++;						voteView = ( VoteView) TranslatorFactory.getTranslator( voteToSeller, locale).translateView();						if( odd)				voteView.setOddOrEven( "odd");			else				voteView.setOddOrEven( "even");											list.add( voteView);		}				result.setVotes			( list);		result.setPositiveVotes	( Integer.toString( positiveVotes));		result.setNegativeVotes	( Integer.toString( negativeVotes));		result.setTotalVotes	( Integer.toString( negativeVotes + positiveVotes));				if( negativeVotes + positiveVotes == 0)			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( 0), 2));		else			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( (positiveVotes * 100) / ( positiveVotes + negativeVotes)), 2));				return result;	}		public VoteDataView getBuyerGivenVoteDataByBuyerId( Integer buyerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 			voteDAO 		= new VoteDAO();		Collection 			collection 		= null;		VoteDataView 		result			= new VoteDataView();		VoteToSeller		voteToSeller	= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		VoteView			voteView		= null;		int					positiveVotes	= 0;		int					negativeVotes	= 0;		boolean				odd				= true;				collection = voteDAO.getVoteToSellerByBuyerId( buyerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToSeller = ( VoteToSeller) iterator.next();						if ( voteToSeller.getVote().intValue() == 1)				positiveVotes ++;			else				negativeVotes ++;						voteView = ( VoteView) TranslatorFactory.getTranslator( voteToSeller, locale).translateView();						if( odd)				voteView.setOddOrEven( "odd");			else				voteView.setOddOrEven( "even");											list.add( voteView);		}				result.setVotes			( list);		result.setPositiveVotes	( Integer.toString( positiveVotes));		result.setNegativeVotes	( Integer.toString( negativeVotes));		result.setTotalVotes	( Integer.toString( negativeVotes + positiveVotes));				if( negativeVotes + positiveVotes == 0)			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( 0), 2));		else			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( (positiveVotes * 100) / ( positiveVotes + negativeVotes)), 2));				return result;	}		public VoteDataView getSellerGivenVoteDataBySellerId( Integer sellerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 			voteDAO 		= new VoteDAO();		Collection 			collection 		= null;		VoteDataView 		result			= new VoteDataView();		VoteToBuyer			voteToBuyer	= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		VoteView			voteView		= null;		int					positiveVotes	= 0;		int					negativeVotes	= 0;		boolean				odd				= true;				collection = voteDAO.getVoteToBuyerBySellerId( sellerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToBuyer = ( VoteToBuyer) iterator.next();						if ( voteToBuyer.getVote().intValue() == 1)				positiveVotes ++;			else				negativeVotes ++;						voteView = ( VoteView) TranslatorFactory.getTranslator( voteToBuyer, locale).translateView();						if( odd)				voteView.setOddOrEven( "odd");			else				voteView.setOddOrEven( "even");											list.add( voteView);		}				result.setVotes			( list);		result.setPositiveVotes	( Integer.toString( positiveVotes));		result.setNegativeVotes	( Integer.toString( negativeVotes));		result.setTotalVotes	( Integer.toString( negativeVotes + positiveVotes));				if( negativeVotes + positiveVotes == 0)			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( 0), 2));		else			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( (positiveVotes * 100) / ( positiveVotes + negativeVotes)), 2));				return result;	}		public OtherUserVoteDataView getOtherSellerVoteDataBySellerId( Integer sellerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 				voteDAO 		= new VoteDAO();		SellerDAO				sellerDAO		= new SellerDAO();		Collection 				collection 		= null;		OtherUserVoteDataView 	result			= new OtherUserVoteDataView();		VoteToSeller			voteToSeller	= null;		Iterator				iterator		= null;		ArrayList				list			= new ArrayList();		VoteView				voteView		= null;		Seller					seller			= null;		int						positiveVotes	= 0;		int						negativeVotes	= 0;		boolean					odd				= true;				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return null;				collection = voteDAO.getVoteToSellerBySellerId( sellerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToSeller = ( VoteToSeller) iterator.next();						if ( voteToSeller.getVote().intValue() == 1)				positiveVotes ++;			else				negativeVotes ++;						voteView = ( VoteView) TranslatorFactory.getTranslator( voteToSeller, locale).translateView();						if( odd)				voteView.setOddOrEven( "odd");			else				voteView.setOddOrEven( "even");											list.add( voteView);		}				result.setVotes			( list);		result.setPositiveVotes	( Integer.toString( positiveVotes));		result.setNegativeVotes	( Integer.toString( negativeVotes));		result.setTotalVotes	( Integer.toString( negativeVotes + positiveVotes));		result.setId			( DBUtils.controlNull( seller.getId()));		result.setLogin			( DBUtils.controlNull( seller.getLogin()));						if( negativeVotes + positiveVotes == 0)			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( 0), 2));		else			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( ( positiveVotes * 100) / ( positiveVotes + negativeVotes)), 2));				return result;	}		public OtherUserVoteDataView getOtherSellerGivenVoteDataBySellerId( Integer sellerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 				voteDAO 		= new VoteDAO();		SellerDAO				sellerDAO		= new SellerDAO();		Collection 				collection 		= null;		OtherUserVoteDataView 	result			= new OtherUserVoteDataView();		VoteToBuyer				voteToBuyer		= null;		Iterator				iterator		= null;		ArrayList				list			= new ArrayList();		VoteView				voteView		= null;		Seller					seller			= null;		int						positiveVotes	= 0;		int						negativeVotes	= 0;		boolean					odd				= true;				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return null;				collection = voteDAO.getVoteToBuyerBySellerId( sellerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToBuyer = ( VoteToBuyer) iterator.next();						if ( voteToBuyer.getVote().intValue() == 1)				positiveVotes ++;			else				negativeVotes ++;						voteView = ( VoteView) TranslatorFactory.getTranslator( voteToBuyer, locale).translateView();						if( odd)				voteView.setOddOrEven( "odd");			else				voteView.setOddOrEven( "even");											list.add( voteView);		}				result.setVotes			( list);		result.setPositiveVotes	( Integer.toString( positiveVotes));		result.setNegativeVotes	( Integer.toString( negativeVotes));		result.setTotalVotes	( Integer.toString( negativeVotes + positiveVotes));		result.setId			( DBUtils.controlNull( seller.getId()));		result.setLogin			( DBUtils.controlNull( seller.getLogin()));				if( negativeVotes + positiveVotes == 0)			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( 0), 2));		else			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( ( positiveVotes * 100) / ( positiveVotes + negativeVotes)), 2));				return result;	}		public OtherUserVoteDataView getOtherBuyerVoteDataByBuyerId( Integer buyerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 				voteDAO 		= new VoteDAO();		BuyerDAO				buyerDAO		= new BuyerDAO();		Collection 				collection 		= null;		OtherUserVoteDataView 	result			= new OtherUserVoteDataView();		VoteToBuyer				voteToBuyer		= null;		Iterator				iterator		= null;		ArrayList				list			= new ArrayList();		VoteView				voteView		= null;		Buyer					buyer			= null;		int						positiveVotes	= 0;		int						negativeVotes	= 0;		boolean					odd				= true;				buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return null;				collection = voteDAO.getVoteToBuyerByBuyerId( buyerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToBuyer = ( VoteToBuyer) iterator.next();						if ( voteToBuyer.getVote().intValue() == 1)				positiveVotes ++;			else				negativeVotes ++;						voteView = ( VoteView) TranslatorFactory.getTranslator( voteToBuyer, locale).translateView();						if( odd)				voteView.setOddOrEven( "odd");			else				voteView.setOddOrEven( "even");											list.add( voteView);		}				result.setVotes			( list);		result.setPositiveVotes	( Integer.toString( positiveVotes));		result.setNegativeVotes	( Integer.toString( negativeVotes));		result.setTotalVotes	( Integer.toString( negativeVotes + positiveVotes));		result.setId			( DBUtils.controlNull( buyer.getId()));		result.setLogin			( DBUtils.controlNull( buyer.getLogin()));						if( negativeVotes + positiveVotes == 0)			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( 0), 2));		else			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( ( positiveVotes * 100) / ( positiveVotes + negativeVotes)), 2));				return result;	}		public OtherUserVoteDataView getOtherBuyerGivenVoteDataByBuyerId( Integer buyerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 				voteDAO 		= new VoteDAO();		BuyerDAO				buyerDAO		= new BuyerDAO();		Collection 				collection 		= null;		OtherUserVoteDataView 	result			= new OtherUserVoteDataView();		VoteToSeller			voteToSeller	= null;		Iterator				iterator		= null;		ArrayList				list			= new ArrayList();		VoteView				voteView		= null;		Buyer					buyer			= null;		int						positiveVotes	= 0;		int						negativeVotes	= 0;		boolean					odd				= true;				buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return null;				collection = voteDAO.getVoteToSellerByBuyerId( buyerId, orderBy, orderDirection, onlyActives, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToSeller = ( VoteToSeller) iterator.next();						if ( voteToSeller.getVote().intValue() == 1)				positiveVotes ++;			else				negativeVotes ++;						voteView = ( VoteView) TranslatorFactory.getTranslator( voteToSeller, locale).translateView();						if( odd)				voteView.setOddOrEven( "odd");			else				voteView.setOddOrEven( "even");											list.add( voteView);		}				result.setVotes			( list);		result.setPositiveVotes	( Integer.toString( positiveVotes));		result.setNegativeVotes	( Integer.toString( negativeVotes));		result.setTotalVotes	( Integer.toString( negativeVotes + positiveVotes));		result.setId			( DBUtils.controlNull( buyer.getId()));		result.setLogin			( DBUtils.controlNull( buyer.getLogin()));				if( negativeVotes + positiveVotes == 0)			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( 0), 2));		else			result.setPositiveVotesPercentage( DBUtils.controlNull( new Double( ( positiveVotes * 100) / ( positiveVotes + negativeVotes)), 2));				return result;	}		public Collection getVoteToBuyerToCensor( Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 		voteDAO 		= new VoteDAO();		Collection 		collection 		= null;		ArrayList 		result			= new ArrayList();		VoteToBuyer		voteToBuyer		= null;		Iterator		iterator		= null;				collection = voteDAO.getVoteToBuyerToCensor( );				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToBuyer = ( VoteToBuyer) iterator.next();			result.add( ( VoteView) TranslatorFactory.getTranslator( voteToBuyer, null).translateView());		}				return result;	}		public Collection getVoteToSellerToCensor( Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		VoteDAO 		voteDAO 		= new VoteDAO();		Collection 		collection 		= null;		ArrayList 		result			= new ArrayList();		VoteToSeller	voteToSeller	= null;		Iterator		iterator		= null;				collection = voteDAO.getVoteToSellerToCensor( );				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			voteToSeller = ( VoteToSeller) iterator.next();			result.add( ( VoteView) TranslatorFactory.getTranslator( voteToSeller, null).translateView());		}				return result;	}	}