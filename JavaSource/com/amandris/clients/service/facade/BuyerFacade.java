package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Collection;import java.util.Date;import java.util.GregorianCalendar;import java.util.Iterator;import java.util.Locale;import org.apache.ojb.broker.PersistenceBroker;import com.amandris.clients.service.dao.BuyerDAO;import com.amandris.clients.service.dao.BuyerHistoricCreditDAO;import com.amandris.clients.service.dao.InvitationDAO;import com.amandris.clients.service.dao.MessageDAO;import com.amandris.clients.service.dao.RecommendationDAO;import com.amandris.clients.service.dao.SellerDAO;import com.amandris.clients.service.dao.UtilDAO;import com.amandris.clients.service.vo.Buyer;import com.amandris.clients.service.vo.BuyerHistoricCredit;import com.amandris.clients.service.vo.BuyerRecomendation;import com.amandris.clients.service.vo.SellerRecomendation;import com.amandris.clients.util.ConfigurationParameterManager;import com.amandris.clients.util.Constant;import com.amandris.clients.util.DBUtils;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.mail.Mail;import com.amandris.clients.util.mail.RecommendationUsedMailObject;import com.amandris.clients.util.translator.BuyerToBuyerSessionTranslator;import com.amandris.clients.util.translator.BuyerToBuyerToCensorViewTranslator;import com.amandris.clients.util.translator.BuyerToBuyerViewListTranslator;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.form.AdminCensorBuyerForm;import com.amandris.clients.web.form.BuyCreditsForm;import com.amandris.clients.web.form.BuyerAccountForm;import com.amandris.clients.web.form.BuyerPasswordForm;import com.amandris.clients.web.form.BuyerPreferencesForm;import com.amandris.clients.web.form.BuyerProfileForm;import com.amandris.clients.web.form.NewBuyerForm;import com.amandris.clients.web.form.PictureForm;import com.amandris.clients.web.form.SellerBuyerSearchForm;import com.amandris.clients.web.util.BuyerSession;import com.amandris.clients.web.view.BuyerStartView;import com.amandris.clients.web.view.BuyerToCensorView;import com.amandris.clients.web.view.BuyerView;import com.amandris.clients.web.view.BuyerViewList;public class BuyerFacade {		public boolean setBuyer( NewBuyerForm newBuyerForm, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= new Buyer();		UtilDAO		utilDAO		= new UtilDAO();				buyer.setLogin							( DBUtils.controlNull( newBuyerForm.getLogin()));		buyer.setActive							( new Integer( 0));		buyer.setActivationCode					( newBuyerForm.getActivationCode());		buyer.setAddress1						( DBUtils.controlNull( newBuyerForm.getAddress1()));		buyer.setAddress2						( DBUtils.controlNull( newBuyerForm.getAddress2()));		buyer.setBirthdate						( DBUtils.parseDate( newBuyerForm.getBirthDate()));		buyer.setBreastSizeConst				( DBUtils.controlNullInteger( newBuyerForm.getBreastSize(), Constant.BREAST_SIZE_NA));		buyer.setCity							( DBUtils.controlNull( newBuyerForm.getCity()));		buyer.setContactsAccepted				( new Integer( 0));		buyer.setContactsNotReplied				( new Integer( 0));		buyer.setContactsRejected				( new Integer( 0));		buyer.setContactsSent					( new Integer( 0));		buyer.setCountry						( utilDAO.getCountryById( newBuyerForm.getCountry()));		buyer.setCountryId						( newBuyerForm.getCountry());		buyer.setCredits						( new Integer(ConfigurationParameterManager.getParameterInt( "initialBuyerCredits")));		buyer.setDatesCanceled					( new Integer( 0));		buyer.setEducationLevelConst			( newBuyerForm.getEducationLevel());		buyer.setEmail							( DBUtils.controlNull( newBuyerForm.getEmail().toLowerCase()));		buyer.setEyeColorConst					( newBuyerForm.getEyeColor());		buyer.setHairColorConst					( newBuyerForm.getHairColor());		buyer.setHairLengthConst				( newBuyerForm.getHairLength());		buyer.setHasPicture						( new Integer( 0));		buyer.setHeightConst					( newBuyerForm.getHeight());		buyer.setIntro							( DBUtils.controlNull( newBuyerForm.getIntro()));		buyer.setIsOnLine						( new Integer( 0));		buyer.setIsPublic						( DBUtils.boolean2Integer( newBuyerForm.getIsPublic().booleanValue()));		buyer.setLanguage1Const					( newBuyerForm.getLanguage1());		buyer.setLanguage2Const					( newBuyerForm.getLanguage2());		buyer.setLanguage3Const					( newBuyerForm.getLanguage3());		buyer.setLastLogin						( GregorianCalendar.getInstance( locale).getTime());		buyer.setName							( DBUtils.controlNull( newBuyerForm.getName()));		buyer.setNegativeVotes					( new Integer( 0));		buyer.setOrientationConst				( newBuyerForm.getOrientation());		buyer.setOriginConst					( newBuyerForm.getOrigin());		buyer.setPassword						( DBUtils.digest( DBUtils.controlNull( newBuyerForm.getPassword())));		buyer.setPaypalAccount					( "");		buyer.setPennisSizeConst				( DBUtils.controlNullInteger( newBuyerForm.getPennisSize(), Constant.PENNIS_SIZE_NA));		buyer.setPhoneNumberCall				( "");		buyer.setPhoneNumberSMS					( "");		buyer.setPhysiqueConst					( newBuyerForm.getPhysique());		buyer.setPicture1						( new Integer( 0));		buyer.setPicture2						( new Integer( 0));		buyer.setPicture3						( new Integer( 0));		buyer.setPicture4						( new Integer( 0));		buyer.setPicture5						( new Integer( 0));		buyer.setPicture1Waiting				( new Integer( 0));		buyer.setPicture2Waiting				( new Integer( 0));		buyer.setPicture3Waiting				( new Integer( 0));		buyer.setPicture4Waiting				( new Integer( 0));		buyer.setPicture5Waiting				( new Integer( 0));				buyer.setMainPicture					( new Integer( 0));		buyer.setMainPictureCode				( new Integer( 0));		buyer.setPositiveVotes					( new Integer( 0));		buyer.setPostalCode						( DBUtils.controlNull( newBuyerForm.getPostalCode()));		buyer.setSendBulletin					( DBUtils.boolean2Integer( newBuyerForm.getSendBulletin().booleanValue()));		buyer.setSendNews						( DBUtils.boolean2Integer( newBuyerForm.getSendNews().booleanValue()));		buyer.setSexConst						( newBuyerForm.getSex());		buyer.setSkinColorConst					( newBuyerForm.getSkinColor());		buyer.setSkypeAccount					( "");		buyer.setSmokerConst					( newBuyerForm.getSmoker());		buyer.setState							( utilDAO.getStateById( newBuyerForm.getState()));		buyer.setStateId						( newBuyerForm.getState());		buyer.setSurname						( DBUtils.controlNull( newBuyerForm.getSurname()));		buyer.setText							( DBUtils.controlNull( newBuyerForm.getText()));		buyer.setTextActive						( new Integer( 0));		buyer.setViews							( new Integer( 0));		buyer.setPreferredBreastSizeConst		( new Integer( Constant.BREAST_SIZE_NA));		buyer.setPreferredEducationLevelConst	( new Integer( Constant.EDUCATION_LEVEL_NA));		buyer.setPreferredEyeColorConst			( new Integer( Constant.EYE_COLOR_NA));		buyer.setPreferredHairColorConst		( new Integer( Constant.HAIR_COLOR_NA));		buyer.setPreferredHairLengthConst		( new Integer( Constant.HAIR_LENGTH_NA));		buyer.setPreferredHeightConst			( new Integer( Constant.HEIGHT_NA));		buyer.setPreferredLanguageConst			( new Integer( Constant.LANGUAGE_NA));		buyer.setPreferredOrientationConst		( new Integer( Constant.ORIENTATION_NA));		buyer.setPreferredOriginConst			( new Integer( Constant.ORIGIN_NA));		buyer.setPreferredPennisSizeConst		( new Integer( Constant.PENNIS_SIZE_NA));		buyer.setPreferredPhysiqueConst			( new Integer( Constant.PHYSIQUE_NA));		buyer.setPreferredSexConst				( new Integer( Constant.SEX_NA));		buyer.setPreferredSkinColorConst		( new Integer( Constant.SKIN_COLOR_NA));		buyer.setPreferredSmokerConst			( new Integer( Constant.SMOKER_NO));		buyer.setPreferredAgeLow				( new Integer( 18));		buyer.setPreferredAgeHigh				( new Integer( 99));		buyer.setPreferredText					( "");		buyer.setPreferencesSaved				( new Integer( 0));		buyer.setPicturesSaved					( new Integer( 0));						if( buyerDAO.getBuyerByEmail( newBuyerForm.getEmail()) == null)			buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerAccount( BuyerAccountForm buyerAccountForm, BuyerSession buyerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();				buyer = buyerDAO.getBuyerById( buyerSession.getId(), null);				if( buyer == null)			return false;				buyer.setAddress1						( DBUtils.controlNull( buyerAccountForm.getAddress1()));		buyer.setAddress2						( DBUtils.controlNull( buyerAccountForm.getAddress2()));		buyer.setBirthdate						( DBUtils.parseDate( buyerAccountForm.getBirthDate()));		buyer.setCity							( DBUtils.controlNull( buyerAccountForm.getCity()));		buyer.setCountry						( utilDAO.getCountryById( buyerAccountForm.getCountry()));		buyer.setCountryId						( buyerAccountForm.getCountry());		buyer.setIsPublic						( DBUtils.boolean2Integer( buyerAccountForm.getIsPublic().booleanValue()));		buyer.setName							( DBUtils.controlNull( buyerAccountForm.getName()));		buyer.setPostalCode						( DBUtils.controlNull( buyerAccountForm.getPostalCode()));		buyer.setSendBulletin					( DBUtils.boolean2Integer( buyerAccountForm.getSendBulletin().booleanValue()));		buyer.setSendNews						( DBUtils.boolean2Integer( buyerAccountForm.getSendNews().booleanValue()));		buyer.setSexConst						( buyerAccountForm.getSex());		buyer.setState							( utilDAO.getStateById( buyerAccountForm.getState()));		buyer.setStateId						( buyerAccountForm.getState());		buyer.setSurname						( DBUtils.controlNull( buyerAccountForm.getSurname()));				if(	( !buyerSession.getAddress1().equals( buyerAccountForm.getAddress1())) || 			( !buyerSession.getAddress2().equals( buyerAccountForm.getAddress2())) ||			( !buyerSession.getCity().equals( buyerAccountForm.getCity())) ||			( !buyerSession.getPostalCode().equals( buyerAccountForm.getPostalCode()))) {			buyer.setTextActive( new Integer( 0));		}				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerActivationCode( Integer buyerId, String code) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;			buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return false;				buyer.setActivationCode( code);				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerPassword( BuyerPasswordForm buyerPasswordForm, BuyerSession buyerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();				buyer = buyerDAO.getBuyerById( buyerSession.getId(), null);		if( buyer == null)			return false;				if( ! buyerPasswordForm.getPassword().equals( buyerPasswordForm.getRepeatPassword()))			return false;				if( ! buyerSession.getPassword().equals( DBUtils.digest( buyerPasswordForm.getPresentPassword())))			return false;				buyer.setPassword( DBUtils.digest( buyerPasswordForm.getPassword()));				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerResetPassword( Integer buyerId, String password) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();				buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return false;				buyer.setPassword( password);				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerProfile( BuyerProfileForm buyerProfileForm, BuyerSession buyerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();				buyer = buyerDAO.getBuyerById( buyerSession.getId(), null);				if( buyer == null)			return false;				buyer.setBreastSizeConst  		( buyerProfileForm.getBreastSize());		buyer.setEducationLevelConst	( buyerProfileForm.getEducationLevel());		buyer.setEyeColorConst			( buyerProfileForm.getEyeColor());		buyer.setHairColorConst			( buyerProfileForm.getHairColor());		buyer.setHairLengthConst		( buyerProfileForm.getHairLength());		buyer.setHeightConst			( buyerProfileForm.getHeight());		buyer.setIntro					( buyerProfileForm.getIntro());		buyer.setLanguage1Const			( buyerProfileForm.getLanguage1());		buyer.setLanguage2Const			( buyerProfileForm.getLanguage2());		buyer.setLanguage3Const			( buyerProfileForm.getLanguage3());		buyer.setOrientationConst		( buyerProfileForm.getOrientation());		buyer.setOriginConst			( buyerProfileForm.getOrigin());		buyer.setPennisSizeConst		( buyerProfileForm.getPennisSize());		buyer.setPhysiqueConst			( buyerProfileForm.getPhysique());		buyer.setSkinColorConst			( buyerProfileForm.getSkinColor());		buyer.setSmokerConst			( buyerProfileForm.getSmoker());		buyer.setText					( buyerProfileForm.getText());				if(	( !buyerSession.getIntro().equals( buyerProfileForm.getIntro())) || 			( !buyerSession.getText().equals( buyerProfileForm.getText()))) {			buyer.setTextActive( new Integer( 0));		}				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerOffLine( Integer buyerId, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;				buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return false;				buyer.setIsOnLine( new Integer( 0));				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerPicture( PictureForm pictureForm, BuyerSession buyerSession, int randomNumber) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();		int			index		= 0;				buyer = buyerDAO.getBuyerById( buyerSession.getId(), null);				if( buyer == null)			return false;				index = DBUtils.parseInteger( pictureForm.getIndex(), 0).intValue();				/*if( ( buyer.getPicture1().intValue() == 0) &&			( buyer.getPicture2().intValue() == 0) &&			( buyer.getPicture3().intValue() == 0) &&			( buyer.getPicture4().intValue() == 0) &&			( buyer.getPicture5().intValue() == 0)) {				buyer.setMainPicture( new Integer( index));				buyer.setMainPictureCode( new Integer( randomNumber));			}		*/		switch( index) {			case 1: 				buyer.setPicture1( new Integer( randomNumber)); 				buyer.setPicture1Waiting( new Integer( 1));			break;			case 2: 				buyer.setPicture2( new Integer( randomNumber));				buyer.setPicture2Waiting( new Integer( 1));			break;			case 3: 				buyer.setPicture3( new Integer( randomNumber));				buyer.setPicture3Waiting( new Integer( 1));			break;			case 4: 				buyer.setPicture4( new Integer( randomNumber));				buyer.setPicture4Waiting( new Integer( 1));			break;			case 5: 				buyer.setPicture5( new Integer( randomNumber));				buyer.setPicture5Waiting( new Integer( 1));			break;		}				buyer.setPicturesSaved( new Integer( 1));				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerPictureAproved( Integer buyerId, int index) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();				buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return false;				switch( index) {			case 1:  				buyer.setPicture1Waiting( new Integer( 0));			break;			case 2: 				buyer.setPicture2Waiting( new Integer( 0));			break;			case 3: 				buyer.setPicture3Waiting( new Integer( 0));			break;			case 4: 				buyer.setPicture4Waiting( new Integer( 0));			break;			case 5: 				buyer.setPicture5Waiting( new Integer( 0));			break;		}				if( buyer.getMainPicture().intValue() == 0){			buyer.setMainPicture( new Integer( index));			switch( index) {				case 1:  					buyer.setMainPictureCode( buyer.getPicture1());				break;				case 2: 					buyer.setMainPictureCode( buyer.getPicture2());				break;				case 3: 					buyer.setMainPictureCode( buyer.getPicture3());				break;				case 4: 					buyer.setMainPictureCode( buyer.getPicture4());				break;				case 5: 					buyer.setMainPictureCode( buyer.getPicture5());				break;			}		}				if( buyer.getHasPicture().intValue() == 0)			buyer.setHasPicture( new Integer( 1));				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerCensor( AdminCensorBuyerForm adminCensorBuyerForm) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();				buyer = buyerDAO.getBuyerById( DBUtils.parseInteger( adminCensorBuyerForm.getId(), 0), null);				if( buyer == null)			return false;				buyer.setAddress1						( adminCensorBuyerForm.getAddress1());		buyer.setAddress2						( adminCensorBuyerForm.getAddress2());		buyer.setCity							( adminCensorBuyerForm.getCity());		buyer.setName							( adminCensorBuyerForm.getName());		buyer.setSurname						( adminCensorBuyerForm.getSurname());		buyer.setPostalCode						( adminCensorBuyerForm.getPostalCode());		buyer.setIntro							( adminCensorBuyerForm.getIntro());		buyer.setText							( adminCensorBuyerForm.getText());		buyer.setPreferredText					( adminCensorBuyerForm.getPreferredText());		buyer.setTextActive						( new Integer( 1));						buyerDAO.setBuyer( buyer);				return true;	}		public boolean deletePicture( Integer index, Integer id) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();				buyer = buyerDAO.getBuyerById( id, null);				if( buyer == null)			return false;				switch( index.intValue()) {			case 1: 				buyer.setPicture1( new Integer( 0));				buyer.setPicture1Waiting( new Integer( 0));			break;			case 2: 				buyer.setPicture2( new Integer( 0));				buyer.setPicture2Waiting( new Integer( 0));			break;			case 3: 				buyer.setPicture3( new Integer( 0));				buyer.setPicture3Waiting( new Integer( 0));			break;			case 4: 				buyer.setPicture4( new Integer( 0));				buyer.setPicture4Waiting( new Integer( 0));			break;			case 5: 				buyer.setPicture5( new Integer( 0));				buyer.setPicture5Waiting( new Integer( 0));			break;		}				if( ( buyer.getPicture1().intValue() == 0) &&			( buyer.getPicture2().intValue() == 0) &&			( buyer.getPicture3().intValue() == 0) &&			( buyer.getPicture4().intValue() == 0) &&			( buyer.getPicture5().intValue() == 0)) {			buyer.setHasPicture( new Integer( 0));			buyer.setMainPicture( new Integer( 0));			buyer.setMainPictureCode( new Integer( 0));		} else {			if( buyer.getMainPicture().intValue() == index.intValue()){				if( buyer.getPicture1().intValue() > 1){					buyer.setMainPicture( new Integer( 1));					buyer.setMainPictureCode( buyer.getPicture1());				}else if( buyer.getPicture2().intValue() > 1) {					buyer.setMainPicture( new Integer( 2));					buyer.setMainPictureCode( buyer.getPicture2());				}else if( buyer.getPicture3().intValue() > 1) {					buyer.setMainPicture( new Integer( 3));					buyer.setMainPictureCode( buyer.getPicture3());				}else if( buyer.getPicture4().intValue() > 1) {					buyer.setMainPicture( new Integer( 4));					buyer.setMainPictureCode( buyer.getPicture4());				}else if( buyer.getPicture5().intValue() > 1) {					buyer.setMainPicture( new Integer( 5));					buyer.setMainPictureCode( buyer.getPicture5());				}			}		}				buyerDAO.setBuyer( buyer);				return true;	}		public boolean markAsMainPicture( Integer index, BuyerSession buyerSession) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();				buyer = buyerDAO.getBuyerById( buyerSession.getId(), null);				if( buyer == null)			return false;								switch( index.intValue()) {			case 1: if( ( buyer.getPicture1().intValue() == 0) || ( buyer.getPicture1Waiting().intValue() == 1))						return false;					buyer.setMainPicture( new Integer( 1));					buyer.setMainPictureCode( buyer.getPicture1());			break;						case 2: if( ( buyer.getPicture2().intValue() == 0) || ( buyer.getPicture2Waiting().intValue() == 1))						return false;					buyer.setMainPicture( new Integer( 2)); 					buyer.setMainPictureCode( buyer.getPicture2());			break;			case 3: if( ( buyer.getPicture3().intValue() == 0) || ( buyer.getPicture3Waiting().intValue() == 1))						return false;					buyer.setMainPicture( new Integer( 3)); 					buyer.setMainPictureCode( buyer.getPicture3());			break;			case 4: if( ( buyer.getPicture4().intValue() == 0) || ( buyer.getPicture4Waiting().intValue() == 1))						return false;					buyer.setMainPicture( new Integer( 4)); 					buyer.setMainPictureCode( buyer.getPicture4());			break;			case 5: if( ( buyer.getPicture5().intValue() == 0) || ( buyer.getPicture5Waiting().intValue() == 1))						return false;					buyer.setMainPicture( new Integer( 5)); 					buyer.setMainPictureCode( buyer.getPicture5());			break;		}				buyerDAO.setBuyer( buyer);				return true;	}		public boolean setBuyerPreferences( BuyerPreferencesForm buyerPreferencesForm, BuyerSession buyerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO	buyerDAO	= new BuyerDAO();		Buyer		buyer		= null;		UtilDAO		utilDAO		= new UtilDAO();		int			ageHigh		= 99;		int			ageLow		= 18;				buyer = buyerDAO.getBuyerById( buyerSession.getId(), null);				if( buyer == null)			return false;				ageHigh = DBUtils.parseInteger( buyerPreferencesForm.getAgeHigh(), 99).intValue();		ageLow 	= DBUtils.parseInteger( buyerPreferencesForm.getAgeLow(), 18).intValue();				if( ageHigh > 99)			ageHigh = 99;				if( ageHigh < 18)			ageHigh = 18;				if( ageLow > 99)			ageLow = 99;				if( ageLow < 18)			ageLow = 18;				buyer.setPreferredSexConst				( buyerPreferencesForm.getSex());		buyer.setPreferredAgeHigh				( new Integer( ageHigh));		buyer.setPreferredAgeLow				( new Integer( ageLow));		buyer.setPreferredBreastSizeConst  		( buyerPreferencesForm.getBreastSize());		buyer.setPreferredEducationLevelConst	( buyerPreferencesForm.getEducationLevel());		buyer.setPreferredEyeColorConst			( buyerPreferencesForm.getEyeColor());		buyer.setPreferredHairColorConst		( buyerPreferencesForm.getHairColor());		buyer.setPreferredHairLengthConst		( buyerPreferencesForm.getHairLength());		buyer.setPreferredHeightConst			( buyerPreferencesForm.getHeight());		buyer.setPreferredLanguageConst			( buyerPreferencesForm.getLanguage());		buyer.setPreferredOrientationConst		( buyerPreferencesForm.getOrientation());		buyer.setPreferredOriginConst			( buyerPreferencesForm.getOrigin());		buyer.setPreferredPennisSizeConst		( buyerPreferencesForm.getPennisSize());		buyer.setPreferredPhysiqueConst			( buyerPreferencesForm.getPhysique());		buyer.setPreferredSkinColorConst		( buyerPreferencesForm.getSkinColor());		buyer.setPreferredSmokerConst			( buyerPreferencesForm.getSmoker());		buyer.setPreferredText					( buyerPreferencesForm.getText());		buyer.setPreferencesSaved				( new Integer( 1));				if(	!buyerSession.getText().equals( buyerPreferencesForm.getText())) { 			buyer.setTextActive( new Integer( 0));		}				buyerDAO.setBuyer( buyer);				return true;	}		public boolean increaseCredits( BuyCreditsForm buyCreditsForm, BuyerSession buyerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO				buyerDAO				= new BuyerDAO();		BuyerHistoricCreditDAO	buyerHistoricCreditDAO	= new BuyerHistoricCreditDAO();		Buyer					buyer					= null;		BuyerHistoricCredit		buyerHistoricCredit		= new BuyerHistoricCredit();				buyer = buyerDAO.getBuyerById( buyerSession.getId(), null);				if( buyer == null)			return false;				if( buyer.getId().intValue() != DBUtils.parseInteger( buyCreditsForm.getUserId(), 0).intValue())			return false;				buyer.setCredits( new Integer( buyer.getCredits().intValue() + DBUtils.parseInteger( buyCreditsForm.getCredits(), 0).intValue()));				buyerHistoricCredit.setBuyer( buyer);		buyerHistoricCredit.setBuyerId( buyer.getId());		switch( DBUtils.parseInteger( buyCreditsForm.getType(), 0).intValue()) {			case 1: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_TRANSFER)); break;			case 2: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_CREDIT_CARD)); break;			case 3: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_PAYPAL)); break;			case 4: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_SMS)); break;			default: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_BUY_WITH_OTHER)); break;		}		buyerHistoricCredit.setCredits( DBUtils.parseInteger( buyCreditsForm.getCredits(), 0));		buyerHistoricCredit.setDate( GregorianCalendar.getInstance( locale).getTime());		buyerHistoricCredit.setResult( buyer.getCredits());		buyerDAO.setBuyer( buyer);		buyerHistoricCreditDAO.setBuyerHistoricCredit( buyerHistoricCredit);				return true;	}		public boolean activateBuyerByLogin( String login, String activationCode, boolean sendMail, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		BuyerDAO 						buyerDAO 						= new BuyerDAO();		SellerDAO 						sellerDAO 						= new SellerDAO();		RecommendationDAO				recommendationDAO				= new RecommendationDAO();		Buyer							buyer							= null;		Iterator						iterator						= null;		BuyerRecomendation				buyerRecomendation				= null;		SellerRecomendation				sellerRecomendation				= null;		RecommendationUsedMailObject	recommendationUsedMailObject	= new RecommendationUsedMailObject( locale);				buyer = buyerDAO.getBuyerByLogin( login);				if( buyer == null)			return false;				if( buyer.getActive().intValue() == 1)			return false;				if( ! buyer.getActivationCode().equals( activationCode))			return false;				buyer.setActive( new Integer( 1));		buyerDAO.setBuyer( buyer);				iterator = recommendationDAO.getBuyerRecomendationByEmail( buyer.getEmail()).iterator();		while( iterator.hasNext()) {			buyerRecomendation = ( BuyerRecomendation) iterator.next();						if( recommendationDAO.getBuyerUsedRecommendationCount( buyerRecomendation.getBuyer().getId()) < 5) {				buyerRecomendation.getBuyer().setCredits( new Integer( buyerRecomendation.getBuyer().getCredits().intValue() + 1));				buyerRecomendation.setUsed( new Integer( 1));								buyerDAO.setBuyer( buyerRecomendation.getBuyer());				recommendationDAO.setBuyerRecommendation( buyerRecomendation);								if( sendMail) {					recommendationUsedMailObject.setCredits	( buyerRecomendation.getBuyer().getCredits().toString());										String text = ConfigurationParameterManager.getMessages().getMessage( locale, "recommendationUsedMailObject.subject");										Mail.sendMail( buyerRecomendation.getBuyer().getEmail(), text, recommendationUsedMailObject);				}			}		}				iterator = recommendationDAO.getSellerRecomendationByEmail( buyer.getEmail()).iterator();		while( iterator.hasNext()) {			sellerRecomendation = ( SellerRecomendation) iterator.next();						if( recommendationDAO.getSellerUsedRecommendationCount( sellerRecomendation.getSeller().getId()) < 5) {				sellerRecomendation.getSeller().setCredits( new Integer( sellerRecomendation.getSeller().getCredits().intValue() + 1));				sellerRecomendation.setUsed( new Integer( 1));								sellerDAO.setSeller( sellerRecomendation.getSeller());				recommendationDAO.setSellerRecommendation( sellerRecomendation);								if( sendMail) {					recommendationUsedMailObject.setCredits	( sellerRecomendation.getSeller().getCredits().toString());										String text = ConfigurationParameterManager.getMessages().getMessage( locale, "recommendationUsedMailObject.subject");										Mail.sendMail( sellerRecomendation.getSeller().getEmail(), text, recommendationUsedMailObject);				}			}		}				return true;	}		public BuyerView getBuyerById( Integer id, Boolean onlyPublic, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		BuyerDAO 	buyerDAO 	= new BuyerDAO();		Buyer		buyer		= null;				buyer = buyerDAO.getBuyerById( id, onlyPublic);				if( buyer == null)			return null;				return ( BuyerView) TranslatorFactory.getTranslator( buyer, locale).translateView();	}		public String getBuyerActivationCodeById( Integer id) throws DataAccessErrorException, TranslateValueObjectErrorException	{		BuyerDAO 	buyerDAO 	= new BuyerDAO();		Buyer		buyer		= null;				buyer = buyerDAO.getBuyerById( id, null);				if( buyer == null)			return null;				return buyer.getActivationCode();	}		public String getBuyerEmailById( Integer id) throws DataAccessErrorException, TranslateValueObjectErrorException	{		BuyerDAO 	buyerDAO 	= new BuyerDAO();		Buyer		buyer		= null;				buyer = buyerDAO.getBuyerById( id, null);				if( buyer == null)			return null;				return buyer.getEmail();	}		public Collection getBuyerToCensor() throws DataAccessErrorException, TranslateValueObjectErrorException	{		BuyerDAO				 			buyerDAO 			= new BuyerDAO();		Buyer								buyer				= null;		Iterator							iterator			= null;		ArrayList							result				= new ArrayList();		BuyerToCensorView 					buyerToCensorView 	= null;		BuyerToBuyerToCensorViewTranslator	translator			= new BuyerToBuyerToCensorViewTranslator();				iterator = buyerDAO.getBuyerToCensor( ).iterator();				while( iterator.hasNext()) {			buyer = ( Buyer) iterator.next();			translator.setObject( buyer);						buyerToCensorView = ( BuyerToCensorView) translator.translateView();						result.add( buyerToCensorView);		}				return result;	}		public Collection getBuyerToCensorPicture() throws DataAccessErrorException, TranslateValueObjectErrorException	{		BuyerDAO				 			buyerDAO 			= new BuyerDAO();		Buyer								buyer				= null;		Iterator							iterator			= null;		ArrayList							result				= new ArrayList();		BuyerToCensorView 					buyerToCensorView 	= null;		BuyerToBuyerToCensorViewTranslator	translator			= new BuyerToBuyerToCensorViewTranslator();				iterator = buyerDAO.getBuyerToCensorPicture( ).iterator();				while( iterator.hasNext()) {			buyer = ( Buyer) iterator.next();			translator.setObject( buyer);						buyerToCensorView = ( BuyerToCensorView) translator.translateView();						result.add( buyerToCensorView);		}				return result;	}		public BuyerToCensorView getBuyerToCensorById( Integer buyerId) throws DataAccessErrorException, TranslateValueObjectErrorException	{		BuyerDAO				 			buyerDAO 			= new BuyerDAO();		Buyer								buyer				= null;		BuyerToBuyerToCensorViewTranslator	translator			= new BuyerToBuyerToCensorViewTranslator();				buyer = buyerDAO.getBuyerById( buyerId, null);		if( buyer == null)			return null;				translator.setObject( buyer);					return ( BuyerToCensorView) translator.translateView();				}				public BuyerView getBuyerByLogin( String login, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		BuyerDAO 	buyerDAO 	= new BuyerDAO();		Buyer		buyer		= null;				buyer = buyerDAO.getBuyerByLogin( login);				if( buyer == null)			return null;				return ( BuyerView) TranslatorFactory.getTranslator( buyer, locale).translateView();	}		public BuyerView getBuyerByEmail( String email, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		BuyerDAO 	buyerDAO 	= new BuyerDAO();		Buyer		buyer		= null;				buyer = buyerDAO.getBuyerByEmail( email);				if( buyer == null)			return null;				return ( BuyerView) TranslatorFactory.getTranslator( buyer, locale).translateView();	}		public boolean decreaseCredits(Integer buyerId, Integer credits, int type, Locale locale)  throws DataAccessErrorException, DataUpdateErrorException{		BuyerDAO				buyerDAO 				= new BuyerDAO();		Buyer					buyer					= null;		BuyerHistoricCredit 	buyerHistoricCredit 	= new BuyerHistoricCredit(); 		BuyerHistoricCreditDAO	buyerHistoricCreditDAO	= new BuyerHistoricCreditDAO();				buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return false;				if( buyer.getCredits().intValue() < credits.intValue())			return false;				buyer.setCredits( new Integer( buyer.getCredits().intValue() - credits.intValue()));				buyerHistoricCredit.setBuyer	( buyer);		buyerHistoricCredit.setBuyerId( buyer.getId());				switch( type) {			case 1: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_CONTACT)); break;			case 2: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_PROMOTION)); break;			case 3: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_OTHER)); break;			default: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_OTHER)); break;		}				buyerHistoricCredit.setCredits	( credits);		buyerHistoricCredit.setDate		( GregorianCalendar.getInstance( locale).getTime());		buyerHistoricCredit.setResult	( buyer.getCredits());				buyerDAO.setBuyer( buyer);		buyerHistoricCreditDAO.setBuyerHistoricCredit( buyerHistoricCredit);				return true;	}		public boolean increaseCredits( Integer buyerId, Integer credits)  throws DataAccessErrorException, DataUpdateErrorException{		BuyerDAO			buyerDAO 	= new BuyerDAO();		Buyer				buyer		= null;		PersistenceBroker 	broker 		= null;						buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return false;						buyer.setCredits( new Integer( buyer.getCredits().intValue() + credits.intValue()));				buyerDAO.setBuyer( buyer);				return true;	}		public Buyer increaseCredits( Integer buyerId, Integer credits, int type, Locale locale)  throws DataAccessErrorException, DataUpdateErrorException{		BuyerDAO				buyerDAO 	= new BuyerDAO();		Buyer					buyer		= null;		BuyerHistoricCreditDAO	buyerrHistoricCreditDAO	= new BuyerHistoricCreditDAO();		BuyerHistoricCredit		buyerHistoricCredit	= new BuyerHistoricCredit();				buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return null;						buyer.setCredits( new Integer( buyer.getCredits().intValue() + credits.intValue()));				buyerHistoricCredit.setBuyer	( buyer);		buyerHistoricCredit.setBuyerId	( buyer.getId());				switch( type) {			case 1: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_CONTACT)); break;			case 2: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_PROMOTION)); break;			case 3: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_OTHER)); break;			default: buyerHistoricCredit.setCreditActionConst( new Integer( Constant.CREDIT_ACTION_USE_IN_OTHER)); break;		}				buyerHistoricCredit.setCredits	( credits);		buyerHistoricCredit.setDate		( GregorianCalendar.getInstance( locale).getTime());		buyerHistoricCredit.setResult	( buyer.getCredits());				buyerDAO.setBuyer( buyer);		buyerrHistoricCreditDAO.setBuyerHistoricCredit( buyerHistoricCredit);						return buyer;	}		public BuyerSession getBuyerSessionByLoginAndPassword( String login, String password, boolean onlyActives, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{				BuyerDAO						buyerDAO 		= new BuyerDAO();		Buyer							buyer			= null;		BuyerSession 					buyerSession 	= null;		BuyerToBuyerSessionTranslator	translator		= new BuyerToBuyerSessionTranslator();		if( (login == null) || ( password == null))			return null;				if( (login.length() == 0) || ( password.length() == 0))			return null;				buyer = buyerDAO.getBuyerByLoginAndPassword( login, password, onlyActives);				if ( buyer == null)			return null;					translator.setObject( buyer);		translator.setLocale( locale);				buyerSession = ( BuyerSession) translator.translateView();				return buyerSession;	}		public BuyerSession getBuyerSessionByEmailAndPassword( String email, String password, boolean onlyActives, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{				BuyerDAO						buyerDAO 		= new BuyerDAO();		Buyer							buyer			= null;		BuyerSession 					buyerSession 	= null;		BuyerToBuyerSessionTranslator	translator		= new BuyerToBuyerSessionTranslator();		if( (email == null) || ( password == null))			return null;				if( (email.length() == 0) || ( password.length() == 0))			return null;				buyer = buyerDAO.getBuyerByEmailAndPassword( email, password, onlyActives);				if ( buyer == null)			return null;					translator.setObject( buyer);		translator.setLocale( locale);				buyerSession = ( BuyerSession) translator.translateView();				return buyerSession;	}		public BuyerSession getBuyerSessionByBuyerId( Integer buyerId, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{				BuyerDAO						buyerDAO 		= new BuyerDAO();		Buyer							buyer			= null;		BuyerSession 					buyerSession 	= null;		BuyerToBuyerSessionTranslator	translator		= new BuyerToBuyerSessionTranslator();		if( buyerId == null || buyerId.intValue() <= 0)			return null;				buyer = buyerDAO.getBuyerById( buyerId, null);				if ( buyer == null)			return null;					translator.setObject( buyer);		translator.setLocale( locale);				buyerSession = ( BuyerSession) translator.translateView();				return buyerSession;	}		public Collection getBuyer( SellerBuyerSearchForm form, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		ArrayList 			Result 			= new ArrayList();		Iterator			buyerIterator 	= null;						BuyerDAO 			theDAO			= new BuyerDAO();		Buyer				buyer			= null;		BuyerViewList		buyerViewList	= null;		boolean				odd				= true;		Date 				birthDateLow;		Date				birthDateHigh;		int 				ageHight 		= 99;		int 				ageLow 			= 18;		int					breastSize 		= 0;		int					educationLevel	= 0;		int					eyeColor		= 0;		int					hairColor		= 0;		int					hairLength		= 0;		int					height			= 0;		int					language		= 0;		int					orientation		= 0;		int					origin			= 0;		int					pennisSize		= 0;		int					physique		= 0;		int					sex				= 0;		int					skinColor		= 0;		int					smoker			= 0;		String				login			= "";				Integer 			companyWithoutSexPriceHigh 	= null;		Integer 			companyWithSexPriceHigh 	= null;		Integer 			sexPriceHigh 				= null;		Integer 			eroticShowPriceHigh			= null;				if( form.getBreastSize_big().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_BIG;		if( form.getBreastSize_normal().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_NORMAL;		if( form.getBreastSize_small().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_SMALL;		if( form.getBreastSize_veryBig().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_VERY_BIG;				if( form.getEducationLevel_postDegree().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_POSTDEGREE;		if( form.getEducationLevel_primary().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_PRIMARY;		if( form.getEducationLevel_seconday().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_SECONDARY;		if( form.getEducationLevel_universitary().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_UNIVERSITARY;				if( form.getEyeColor_black().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BLACK;		if( form.getEyeColor_blue().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BLUE;		if( form.getEyeColor_brown().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BROWN;		if( form.getEyeColor_green().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_GREEN;				if( form.getHairColor_blonde().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_BLONDE;		if( form.getHairColor_brown().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_BROWN;		if( form.getHairColor_dark().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_DARK;		if( form.getHairColor_red().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_RED;		if( form.getHairColor_white().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_WHITE;				if( form.getHairLength_beyondShoulders().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_BEYOND_SHOULDERS;		if( form.getHairLength_noHair().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_NOT_HAIR;		if( form.getHairLength_short().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_SHORT;		if( form.getHairLength_untilNeck().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_UNTIL_NECK;		if( form.getHairLength_untilShoulders().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_UNTIL_SHOULDERS;		if( form.getHeight_between150And159().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_150_AND_159;		if( form.getHeight_between160And169().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_160_AND_169;		if( form.getHeight_between170And179().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_170_AND_179;		if( form.getHeight_between180And189().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_180_AND_189;		if( form.getHeight_between190And200().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_190_AND_200;		if( form.getHeight_lessThan150().booleanValue())			height = height | Constant.HEIGHT_LESS_THAN_150;		if( form.getHeight_moreThan200().booleanValue())			height = height | Constant.HEIGHT_MORE_THAN_200;				if( form.getLanguage_arabian().booleanValue())			language = language | Constant.LANGUAGE_ARABIAN;		if( form.getLanguage_chinesse().booleanValue())			language = language | Constant.LANGUAGE_CHINESSE;		if( form.getLanguage_english().booleanValue())			language = language | Constant.LANGUAGE_ENGLISH;		if( form.getLanguage_french().booleanValue())			language = language | Constant.LANGUAGE_FRENCH;		if( form.getLanguage_german().booleanValue())			language = language | Constant.LANGUAGE_GERMAN;		if( form.getLanguage_italian().booleanValue())			language = language | Constant.LANGUAGE_ITALIAN;		if( form.getLanguage_japanesse().booleanValue())			language = language | Constant.LANGUAGE_JAPANESSE;		if( form.getLanguage_portuguese().booleanValue())			language = language | Constant.LANGUAGE_PORTUGUESE;		if( form.getLanguage_spanish().booleanValue())			language = language | Constant.LANGUAGE_SPANISH;				if( form.getOrientation_bicurious().booleanValue())			orientation = orientation | Constant.ORIENTATION_BICURIOUS;		if( form.getOrientation_bisexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_BISEXUAL;		if( form.getOrientation_heterosexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_HETEROSEXUAL;		if( form.getOrientation_homosexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_HOMOSEXUAL;				if( form.getOrigin_african().booleanValue())			origin = origin | Constant.ORIGIN_AFRICAN;		if( form.getOrigin_arabian().booleanValue())			origin = origin | Constant.ORIGIN_ARABIAN;		if( form.getOrigin_caucasic().booleanValue())			origin = origin | Constant.ORIGIN_CAUCASIC;		if( form.getOrigin_hispanic().booleanValue())			origin = origin | Constant.ORIGIN_HISPANIC;		if( form.getOrigin_indian().booleanValue())			origin = origin | Constant.ORIGIN_INDIAN;		if( form.getOrigin_mediterranean().booleanValue())			origin = origin | Constant.ORIGIN_MEDITERRANEAN;		if( form.getOrigin_oriental().booleanValue())			origin = origin | Constant.ORIGIN_ORIENTAL;				if( form.getPennisSize_big().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_BIG;		if( form.getPennisSize_biggerThanNormal().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_BIGGER_THAN_NORMAL;		if( form.getPennisSize_normal().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_NORMAL;		if( form.getPennisSize_veryBig().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_VERY_BIG;				if( form.getPhysique_atlethic().booleanValue())			physique = physique | Constant.PHYSIQUE_ATLETHIC;		if( form.getPhysique_fat().booleanValue())			physique = physique | Constant.PHYSIQUE_FAT;		if( form.getPhysique_muscled().booleanValue())			physique = physique | Constant.PHYSIQUE_MUSCLED;		if( form.getPhysique_normal().booleanValue())			physique = physique | Constant.PHYSIQUE_NORMAL;		if( form.getPhysique_thin().booleanValue())			physique = physique | Constant.PHYSIQUE_THIN;		if( form.getSex_boy().booleanValue())			sex = sex | Constant.SEX_BOY;		if( form.getSex_boyAndGirlCouple().booleanValue())			sex = sex | Constant.SEX_BOY_AND_GIRL_COUPLE;		if( form.getSex_boysCouple().booleanValue())			sex = sex | Constant.SEX_BOYS_COUPLE;		if( form.getSex_girl().booleanValue())			sex = sex | Constant.SEX_GIRL;		if( form.getSex_girlsCouple().booleanValue())			sex = sex | Constant.SEX_GIRLS_COUPLE;		if( form.getSex_group().booleanValue())			sex = sex | Constant.SEX_GROUP;		if( form.getSex_shemale().booleanValue())			sex = sex | Constant.SEX_SHEMALE;				if( form.getSkinColor_black().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_BLACK;		if( form.getSkinColor_dark().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_DARK;		if( form.getSkinColor_veryDark().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_VERY_DARK;		if( form.getSkinColor_white().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_WHITE;				if( form.getSmoker_eventuallySmoker().booleanValue())			smoker = smoker | Constant.SMOKER_EVENTUALLY;		if( form.getSmoker_noSmoker().booleanValue())			smoker = smoker | Constant.SMOKER_NO;		if( form.getSmoker_smoker().booleanValue())			smoker = smoker | Constant.SMOKER_YES;				birthDateLow 	= DBUtils.getBirthDate( DBUtils.parseInteger( form.getAgeHigh(), 99).intValue(), locale);		birthDateHigh 	= DBUtils.getBirthDate( DBUtils.parseInteger( form.getAgeLow(), 18).intValue(), locale);		login			= DBUtils.controlNull( form.getLogin());				buyerIterator = theDAO.getBuyer(	new Integer( sex), 											form.getCountry(), 											form.getState(), 											birthDateLow, 											birthDateHigh, 											new Integer( origin), 											new Integer( skinColor), 											new Integer( hairColor), 											new Integer( hairLength), 											new Integer( eyeColor), 											new Integer( language), 											new Integer( educationLevel), 											new Integer( smoker), 											new Integer( physique), 											new Integer( height), 											new Integer( orientation), 											new Integer( pennisSize), 											new Integer( breastSize),											login,											form.getOrderedBy(),											startIndex, 											offset).iterator();		while( buyerIterator.hasNext()){			buyer = ( Buyer) buyerIterator.next();						BuyerToBuyerViewListTranslator translator = new BuyerToBuyerViewListTranslator();						translator.setObject( buyer);			translator.setLocale( locale);						buyerViewList = ( BuyerViewList) translator.translateView();						if( odd)				buyerViewList.setOddOrEven( "odd");			else				buyerViewList.setOddOrEven( "even");						odd = ! odd;						Result.add( buyerViewList);		}				return Result;	}		public int getBuyerCount( SellerBuyerSearchForm form, Locale locale) throws DataAccessErrorException	{		ArrayList 			Result 			= new ArrayList();		Iterator			sellerIterator 	= null;						BuyerDAO 			theDAO			= new BuyerDAO();		Buyer				buyer			= null;		BuyerView			buyerView		= null;		boolean				odd				= true;		Date 				birthDateLow;		Date				birthDateHigh;		int 				ageHight 		= 99;		int 				ageLow 			= 18;		int					breastSize 		= 0;		int					educationLevel	= 0;		int					eyeColor		= 0;		int					hairColor		= 0;		int					hairLength		= 0;		int					height			= 0;		int					language		= 0;		int					orientation		= 0;		int					origin			= 0;		int					pennisSize		= 0;		int					physique		= 0;		int					sex				= 0;		int					skinColor		= 0;		int					smoker			= 0;		String				login			= "";						if( form.getBreastSize_big().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_BIG;		if( form.getBreastSize_normal().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_NORMAL;		if( form.getBreastSize_small().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_SMALL;		if( form.getBreastSize_veryBig().booleanValue())			breastSize = breastSize | Constant.BREAST_SIZE_VERY_BIG;				if( form.getEducationLevel_postDegree().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_POSTDEGREE;		if( form.getEducationLevel_primary().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_PRIMARY;		if( form.getEducationLevel_seconday().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_SECONDARY;		if( form.getEducationLevel_universitary().booleanValue())			educationLevel = educationLevel | Constant.EDUCATION_LEVEL_UNIVERSITARY;				if( form.getEyeColor_black().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BLACK;		if( form.getEyeColor_blue().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BLUE;		if( form.getEyeColor_brown().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_BROWN;		if( form.getEyeColor_green().booleanValue())			eyeColor = eyeColor | Constant.EYE_COLOR_GREEN;				if( form.getHairColor_blonde().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_BLONDE;		if( form.getHairColor_brown().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_BROWN;		if( form.getHairColor_dark().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_DARK;		if( form.getHairColor_red().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_RED;		if( form.getHairColor_white().booleanValue())			hairColor = hairColor | Constant.HAIR_COLOR_WHITE;				if( form.getHairLength_beyondShoulders().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_BEYOND_SHOULDERS;		if( form.getHairLength_noHair().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_NOT_HAIR;		if( form.getHairLength_short().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_SHORT;		if( form.getHairLength_untilNeck().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_UNTIL_NECK;		if( form.getHairLength_untilShoulders().booleanValue())			hairLength = hairLength | Constant.HAIR_LENGTH_UNTIL_SHOULDERS;		if( form.getHeight_between150And159().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_150_AND_159;		if( form.getHeight_between160And169().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_160_AND_169;		if( form.getHeight_between170And179().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_170_AND_179;		if( form.getHeight_between180And189().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_180_AND_189;		if( form.getHeight_between190And200().booleanValue())			height = height | Constant.HEIGHT_BETWEEN_190_AND_200;		if( form.getHeight_lessThan150().booleanValue())			height = height | Constant.HEIGHT_LESS_THAN_150;		if( form.getHeight_moreThan200().booleanValue())			height = height | Constant.HEIGHT_MORE_THAN_200;				if( form.getLanguage_arabian().booleanValue())			language = language | Constant.LANGUAGE_ARABIAN;		if( form.getLanguage_chinesse().booleanValue())			language = language | Constant.LANGUAGE_CHINESSE;		if( form.getLanguage_english().booleanValue())			language = language | Constant.LANGUAGE_ENGLISH;		if( form.getLanguage_french().booleanValue())			language = language | Constant.LANGUAGE_FRENCH;		if( form.getLanguage_german().booleanValue())			language = language | Constant.LANGUAGE_GERMAN;		if( form.getLanguage_italian().booleanValue())			language = language | Constant.LANGUAGE_ITALIAN;		if( form.getLanguage_japanesse().booleanValue())			language = language | Constant.LANGUAGE_JAPANESSE;		if( form.getLanguage_portuguese().booleanValue())			language = language | Constant.LANGUAGE_PORTUGUESE;		if( form.getLanguage_spanish().booleanValue())			language = language | Constant.LANGUAGE_SPANISH;				if( form.getOrientation_bicurious().booleanValue())			orientation = orientation | Constant.ORIENTATION_BICURIOUS;		if( form.getOrientation_bisexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_BISEXUAL;		if( form.getOrientation_heterosexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_HETEROSEXUAL;		if( form.getOrientation_homosexual().booleanValue())			orientation = orientation | Constant.ORIENTATION_HOMOSEXUAL;				if( form.getOrigin_african().booleanValue())			origin = origin | Constant.ORIGIN_AFRICAN;		if( form.getOrigin_arabian().booleanValue())			origin = origin | Constant.ORIGIN_ARABIAN;		if( form.getOrigin_caucasic().booleanValue())			origin = origin | Constant.ORIGIN_CAUCASIC;		if( form.getOrigin_hispanic().booleanValue())			origin = origin | Constant.ORIGIN_HISPANIC;		if( form.getOrigin_indian().booleanValue())			origin = origin | Constant.ORIGIN_INDIAN;		if( form.getOrigin_mediterranean().booleanValue())			origin = origin | Constant.ORIGIN_MEDITERRANEAN;		if( form.getOrigin_oriental().booleanValue())			origin = origin | Constant.ORIGIN_ORIENTAL;				if( form.getPennisSize_big().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_BIG;		if( form.getPennisSize_biggerThanNormal().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_BIGGER_THAN_NORMAL;		if( form.getPennisSize_normal().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_NORMAL;		if( form.getPennisSize_veryBig().booleanValue())			pennisSize = pennisSize | Constant.PENNIS_SIZE_VERY_BIG;				if( form.getPhysique_atlethic().booleanValue())			physique = physique | Constant.PHYSIQUE_ATLETHIC;		if( form.getPhysique_fat().booleanValue())			physique = physique | Constant.PHYSIQUE_FAT;		if( form.getPhysique_muscled().booleanValue())			physique = physique | Constant.PHYSIQUE_MUSCLED;		if( form.getPhysique_normal().booleanValue())			physique = physique | Constant.PHYSIQUE_NORMAL;		if( form.getPhysique_thin().booleanValue())			physique = physique | Constant.PHYSIQUE_THIN;		if( form.getSex_boy().booleanValue())			sex = sex | Constant.SEX_BOY;		if( form.getSex_boyAndGirlCouple().booleanValue())			sex = sex | Constant.SEX_BOY_AND_GIRL_COUPLE;		if( form.getSex_boysCouple().booleanValue())			sex = sex | Constant.SEX_BOYS_COUPLE;		if( form.getSex_girl().booleanValue())			sex = sex | Constant.SEX_GIRL;		if( form.getSex_girlsCouple().booleanValue())			sex = sex | Constant.SEX_GIRLS_COUPLE;		if( form.getSex_group().booleanValue())			sex = sex | Constant.SEX_GROUP;		if( form.getSex_shemale().booleanValue())			sex = sex | Constant.SEX_SHEMALE;				if( form.getSkinColor_black().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_BLACK;		if( form.getSkinColor_dark().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_DARK;		if( form.getSkinColor_veryDark().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_VERY_DARK;		if( form.getSkinColor_white().booleanValue())			skinColor = skinColor | Constant.SKIN_COLOR_WHITE;				if( form.getSmoker_eventuallySmoker().booleanValue())			smoker = smoker | Constant.SMOKER_EVENTUALLY;		if( form.getSmoker_noSmoker().booleanValue())			smoker = smoker | Constant.SMOKER_NO;		if( form.getSmoker_smoker().booleanValue())			smoker = smoker | Constant.SMOKER_YES;				birthDateLow 	= DBUtils.getBirthDate	( DBUtils.parseInteger( form.getAgeHigh(), 99).intValue(), locale);		birthDateHigh 	= DBUtils.getBirthDate	( DBUtils.parseInteger( form.getAgeLow(), 18).intValue(), locale);		login			= DBUtils.controlNull	( form.getLogin());				return theDAO.getBuyerCount(	new Integer( sex),										form.getCountry(), 										form.getState(), 										birthDateLow, 										birthDateHigh, 										new Integer( origin), 										new Integer( skinColor), 										new Integer( hairColor), 										new Integer( hairLength), 										new Integer( eyeColor), 										new Integer( language), 										new Integer( educationLevel), 										new Integer( smoker), 										new Integer( physique), 										new Integer( height), 										new Integer( orientation), 										new Integer( pennisSize), 										new Integer( breastSize),										login);			}		public BuyerStartView getBuyerStartById( Integer id, Locale locale) throws DataAccessErrorException, DataUpdateErrorException, TranslateValueObjectErrorException	{				BuyerDAO			buyerDAO 			= new BuyerDAO();		MessageDAO			messageDAO			= new MessageDAO();		InvitationDAO		invitationDAO		= new InvitationDAO();		UtilDAO				utilDAO				= new UtilDAO();		Buyer				buyer				= null;		BuyerStartView		buyerStartView 		= new BuyerStartView();		Double 				positiveVotesPercent= new Double( 0); 		boolean 			odd					= true;				buyer = buyerDAO.getBuyerById( id, null);				if ( buyer == null)			return null;									if( buyer.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.seven")){			buyerStartView.setUserLevel( "7");		}else if( buyer.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.six")){			buyerStartView.setUserLevel( "6");		}else if( buyer.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.five")){			buyerStartView.setUserLevel( "5");		}else if( buyer.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.four")){			buyerStartView.setUserLevel( "4");		}else if( buyer.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.three")){			buyerStartView.setUserLevel( "3");		}else if( buyer.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.two")){			buyerStartView.setUserLevel( "2");		}else if( buyer.getPositiveVotes().intValue() > ConfigurationParameterManager.getParameterInt( "userLevel.one")){			buyerStartView.setUserLevel( "1");		} else {			buyerStartView.setUserLevel( "0");		}						if( (buyer.getPositiveVotes().intValue() + buyer.getNegativeVotes().intValue()) != 0)			positiveVotesPercent = new Double(( ( double) buyer.getPositiveVotes().intValue() / ( ( double) buyer.getPositiveVotes().intValue() + ( double) buyer.getNegativeVotes().intValue())) * 100);				buyerStartView.setId					( DBUtils.controlNull( buyer.getId()));		buyerStartView.setHasPicture			( DBUtils.controlNull( buyer.getHasPicture()));		buyerStartView.setMainPicture			( DBUtils.controlNull( buyer.getMainPicture()));		buyerStartView.setMainPictureCode		( DBUtils.controlNull( buyer.getMainPictureCode()));		buyerStartView.setUserLevelText			( ConfigurationParameterManager.getMessages().getMessage( locale, "userLevel." + buyerStartView.getUserLevel()));		buyerStartView.setCredits				( DBUtils.controlNull( buyer.getCredits()));		buyerStartView.setLogin					( DBUtils.controlNull( buyer.getLogin()));		buyerStartView.setBriefLogin			( DBUtils.controlNull( buyer.getLogin(), 15));		buyerStartView.setNegativeVotes			( DBUtils.controlNull( buyer.getNegativeVotes()));		buyerStartView.setPositiveVotes			( DBUtils.controlNull( buyer.getPositiveVotes()));		buyerStartView.setPositiveVotesPercent	( DBUtils.controlNull( positiveVotesPercent));		buyerStartView.setNewMessages			( Integer.toString( messageDAO.getBuyerMessageByBuyerIdCount(id, Boolean.TRUE, Boolean.TRUE)));		buyerStartView.setNewInvitations		( Integer.toString( invitationDAO.getInvitationByBuyerIdCount(id, Boolean.TRUE)));		buyerStartView.setPreferencesSaved		( DBUtils.controlNull( buyer.getPreferencesSaved()));		buyerStartView.setPicturesSaved			( DBUtils.controlNull( buyer.getPicturesSaved()));				if( 	( buyer.getPreferencesSaved().intValue() == 1) &&				( buyer.getPicturesSaved().intValue() == 1)) {				buyerStartView.setHasPenddingTasks( "0");			} else {				buyerStartView.setHasPenddingTasks( "1");			}				return buyerStartView;	}			public Buyer setBuyerMaxCredits( Integer buyerId )  throws DataAccessErrorException, DataUpdateErrorException{		BuyerDAO				buyerDAO 	= new BuyerDAO();		Buyer					buyer		= null;		buyer = buyerDAO.getBuyerById( buyerId, null);				if( buyer == null)			return null;				buyer.setCredits(new Integer(ConfigurationParameterManager.getParameterInt( "initialBuyerCredits")));		buyerDAO.setBuyer( buyer);				return buyer;	}}