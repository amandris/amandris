package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Collection;import java.util.Hashtable;import java.util.Iterator;import java.util.Locale;import com.amandris.clients.service.dao.SellerDAO;import com.amandris.clients.service.dao.SellerServiceDAO;import com.amandris.clients.service.vo.Seller;import com.amandris.clients.service.vo.SellerService;import com.amandris.clients.util.ConfigurationParameterManager;import com.amandris.clients.util.Constant;import com.amandris.clients.util.DBUtils;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.form.AddServiceForm;import com.amandris.clients.web.form.ChangeCurrencyForm;import com.amandris.clients.web.form.EditServiceForm;import com.amandris.clients.web.util.Price;import com.amandris.clients.web.util.SellerSession;import com.amandris.clients.web.util.ServiceSex;import com.amandris.clients.web.view.SellerServiceView;import com.amandris.clients.web.view.ServiceView;public class SellerServiceFacade {		public boolean setService( AddServiceForm addServiceForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		SellerServiceDAO	sellerServiceDAO	= new SellerServiceDAO();		SellerDAO			sellerDAO			= new SellerDAO();		Seller				seller				= null;		Collection			collection			= null;		int					serviceType			= 0;		SellerService		sellerService		= null;		collection = sellerServiceDAO.getSellerServiceBySellerIdAndServiceType( sellerSession.getId(), DBUtils.parseInteger( addServiceForm.getServiceType(), 0));						if( ( collection != null) && ( collection.size() != 0))			return false;				serviceType = DBUtils.parseInteger( addServiceForm.getServiceType(), 0).intValue();		seller		= sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;						if( ( serviceType != 1) && ( serviceType != 2) && ( serviceType != 4) && ( serviceType != 8))			return false;				if( DBUtils.parseInteger( addServiceForm.getCurrencyConst(), 0).intValue() == 0)			return false;				for( int i = 0; i < 7; i++){			sellerService = new SellerService();			sellerService.setCurrencyConst				( DBUtils.parseInteger( addServiceForm.getCurrencyConst(), 0));			sellerService.setSeller						( seller);			sellerService.setSellerId					( seller.getId());			sellerService.setServiceAdditionalHoursPrice( DBUtils.parseDouble( addServiceForm.getAdditionalHoursPrice(), 0));			sellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( addServiceForm.getFirstHourPrice(), 0));			sellerService.setServiceTypeConst			( new Integer( serviceType));			sellerService.setToAsk						( new Integer( 0));						if( ( sellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( sellerService.getServiceFirstHourPrice().doubleValue() == 0))				sellerService.setServiceFirstHourPrice( sellerService.getServiceAdditionalHoursPrice());						switch( i){				case 0:					if( addServiceForm.isSex1Checked()) {						sellerService.setSexConst( new Integer( 1));						sellerServiceDAO.setSellerService( sellerService);					}				break;				case 1:					if( addServiceForm.isSex2Checked()) {						sellerService.setSexConst( new Integer( 2));						sellerServiceDAO.setSellerService( sellerService);					}				break;				case 2:					if( addServiceForm.isSex4Checked()) {						sellerService.setSexConst( new Integer( 4));						sellerServiceDAO.setSellerService( sellerService);					}				break;				case 3:					if( addServiceForm.isSex8Checked()) {						sellerService.setSexConst( new Integer( 8));						sellerServiceDAO.setSellerService( sellerService);					}				break;				case 4:					if( addServiceForm.isSex16Checked()) {						sellerService.setSexConst( new Integer( 16));						sellerServiceDAO.setSellerService( sellerService);					}				break;				case 5:					if( addServiceForm.isSex32Checked()) {						sellerService.setSexConst( new Integer( 32));						sellerServiceDAO.setSellerService( sellerService);					}				break;				case 6:					if( addServiceForm.isSex64Checked()) {						sellerService.setSexConst( new Integer( 64));						sellerServiceDAO.setSellerService( sellerService);					}				break;							}		}				seller.setServicesSaved( new Integer( 1));				sellerDAO.setSeller( seller);				return true;	}			public boolean setService( EditServiceForm editServiceForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException, DataDeleteErrorException	{		SellerServiceDAO	sellerServiceDAO	= new SellerServiceDAO();		SellerDAO			sellerDAO			= new SellerDAO();		Seller				seller				= null;		Collection			collection			= null;		int					serviceType			= 0;		SellerService		sellerService		= null;		SellerService		newSellerService	= null;		collection = sellerServiceDAO.getSellerServiceBySellerIdAndServiceType( sellerSession.getId(), DBUtils.parseInteger( editServiceForm.getServiceType(), 0));				if( ( collection == null) || ( collection.size() == 0))			return false;		serviceType = DBUtils.parseInteger( editServiceForm.getServiceType(), 0).intValue();		seller		= sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				if( ( serviceType != 1) && ( serviceType != 2) && ( serviceType != 4) && ( serviceType != 8))			return false;				if( DBUtils.parseInteger( editServiceForm.getCurrencyConst(), 0).intValue() == 0)			return false;				Hashtable 	hashtable = new Hashtable();		Iterator	iterator = collection.iterator();				while( iterator.hasNext()) {			sellerService = ( SellerService) iterator.next();						hashtable.put( sellerService.getSexConst().toString(), sellerService);		}						for( int i = 0; i < 7; i++) {			newSellerService 	= null;			sellerService 		= new SellerService();						sellerService.setCurrencyConst				( DBUtils.parseInteger( editServiceForm.getCurrencyConst(), 0));			sellerService.setSeller						( seller);			sellerService.setSellerId					( seller.getId());			sellerService.setServiceAdditionalHoursPrice( DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0));			sellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0));			sellerService.setServiceTypeConst			( new Integer( serviceType));			sellerService.setToAsk						( new Integer(0));						if( ( sellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( sellerService.getServiceFirstHourPrice().doubleValue() == 0))				sellerService.setServiceFirstHourPrice( sellerService.getServiceAdditionalHoursPrice());						switch( i){				case 0:					newSellerService = ( SellerService) hashtable.get( "1");										if( editServiceForm.isSex1Checked()) {						if( newSellerService == null) {							sellerService.setSexConst( new Integer( 1));							sellerServiceDAO.setSellerService( sellerService);						} else {							if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0).doubleValue()) ||								( newSellerService.getServiceFirstHourPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0).doubleValue())) {																	newSellerService.setServiceAdditionalHoursPrice	( DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0));									newSellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0));																		if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( newSellerService.getServiceFirstHourPrice().doubleValue() == 0))										newSellerService.setServiceFirstHourPrice( newSellerService.getServiceAdditionalHoursPrice());																		sellerServiceDAO.setSellerService( newSellerService);							}						}					} else if( newSellerService != null){						sellerServiceDAO.deleteSellerService( newSellerService);					}				break;								case 1:					newSellerService = ( SellerService) hashtable.get( "2");										if( editServiceForm.isSex2Checked()) {						if( newSellerService == null) {							sellerService.setSexConst( new Integer( 2));							sellerServiceDAO.setSellerService( sellerService);						} else {							if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0).doubleValue()) ||								( newSellerService.getServiceFirstHourPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0).doubleValue())) {																	newSellerService.setServiceAdditionalHoursPrice	( DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0));									newSellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0));																		if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( newSellerService.getServiceFirstHourPrice().doubleValue() == 0))										newSellerService.setServiceFirstHourPrice( newSellerService.getServiceAdditionalHoursPrice());																		sellerServiceDAO.setSellerService( newSellerService);							}						}					} else if( newSellerService != null){						sellerServiceDAO.deleteSellerService( newSellerService);					}				break;								case 2:					newSellerService = ( SellerService) hashtable.get( "4");										if( editServiceForm.isSex4Checked()) {						if( newSellerService == null) {							sellerService.setSexConst( new Integer( 4));							sellerServiceDAO.setSellerService( sellerService);						} else {							if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0).doubleValue()) ||								( newSellerService.getServiceFirstHourPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0).doubleValue())) {																	newSellerService.setServiceAdditionalHoursPrice	( DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0));									newSellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0));																		if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( newSellerService.getServiceFirstHourPrice().doubleValue() == 0))										newSellerService.setServiceFirstHourPrice( newSellerService.getServiceAdditionalHoursPrice());																		sellerServiceDAO.setSellerService( newSellerService);							}						}					} else if( newSellerService != null){						sellerServiceDAO.deleteSellerService( newSellerService);					}				break;								case 3:					newSellerService = ( SellerService) hashtable.get( "8");										if( editServiceForm.isSex8Checked()) {						if( newSellerService == null) {							sellerService.setSexConst( new Integer( 8));							sellerServiceDAO.setSellerService( sellerService);						} else {							if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0).doubleValue()) ||								( newSellerService.getServiceFirstHourPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0).doubleValue())) {																	newSellerService.setServiceAdditionalHoursPrice	( DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0));									newSellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0));																		if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( newSellerService.getServiceFirstHourPrice().doubleValue() == 0))										newSellerService.setServiceFirstHourPrice( newSellerService.getServiceAdditionalHoursPrice());																		sellerServiceDAO.setSellerService( newSellerService);							}						}					} else if( newSellerService != null){						sellerServiceDAO.deleteSellerService( newSellerService);					}				break;								case 4:					newSellerService = ( SellerService) hashtable.get( "16");										if( editServiceForm.isSex16Checked()) {						if( newSellerService == null) {							sellerService.setSexConst( new Integer( 16));							sellerServiceDAO.setSellerService( sellerService);						} else {							if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0).doubleValue()) ||								( newSellerService.getServiceFirstHourPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0).doubleValue())) {																	newSellerService.setServiceAdditionalHoursPrice	( DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0));									newSellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0));																		if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( newSellerService.getServiceFirstHourPrice().doubleValue() == 0))										newSellerService.setServiceFirstHourPrice( newSellerService.getServiceAdditionalHoursPrice());																		sellerServiceDAO.setSellerService( newSellerService);							}						}					} else if( newSellerService != null){						sellerServiceDAO.deleteSellerService( newSellerService);					}				break;								case 5:					newSellerService = ( SellerService) hashtable.get( "32");										if( editServiceForm.isSex32Checked()) {						if( newSellerService == null) {							sellerService.setSexConst( new Integer( 32));							sellerServiceDAO.setSellerService( sellerService);						} else {							if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0).doubleValue()) ||								( newSellerService.getServiceFirstHourPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0).doubleValue())) {																	newSellerService.setServiceAdditionalHoursPrice	( DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0));									newSellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0));																		if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( newSellerService.getServiceFirstHourPrice().doubleValue() == 0))										newSellerService.setServiceFirstHourPrice( newSellerService.getServiceAdditionalHoursPrice());																		sellerServiceDAO.setSellerService( newSellerService);							}						}					} else if( newSellerService != null){						sellerServiceDAO.deleteSellerService( newSellerService);					}				break;								case 6:					newSellerService = ( SellerService) hashtable.get( "64");										if( editServiceForm.isSex64Checked()) {						if( newSellerService == null) {							sellerService.setSexConst( new Integer( 64));							sellerServiceDAO.setSellerService( sellerService);						} else {							if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0).doubleValue()) ||								( newSellerService.getServiceFirstHourPrice().doubleValue() != DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0).doubleValue())) {																	newSellerService.setServiceAdditionalHoursPrice	( DBUtils.parseDouble( editServiceForm.getAdditionalHoursPrice(), 0));									newSellerService.setServiceFirstHourPrice		( DBUtils.parseDouble( editServiceForm.getFirstHourPrice(), 0));																		if( ( newSellerService.getServiceAdditionalHoursPrice().doubleValue() > 0) && ( newSellerService.getServiceFirstHourPrice().doubleValue() == 0))										newSellerService.setServiceFirstHourPrice( newSellerService.getServiceAdditionalHoursPrice());																		sellerServiceDAO.setSellerService( newSellerService);							}						}					} else if( newSellerService != null){						sellerServiceDAO.deleteSellerService( newSellerService);					}				break;							}		}				return true;	}		public boolean changeCurrency( ChangeCurrencyForm changeCurrencyForm, SellerSession sellerSession, Locale locale) throws DataAccessErrorException, DataUpdateErrorException, DataDeleteErrorException	{		SellerServiceDAO	sellerServiceDAO	= new SellerServiceDAO();		SellerDAO			sellerDAO			= new SellerDAO();		Seller				seller				= null;		Collection			collection			= null;		int					serviceType			= 0;		SellerService		sellerService		= null;		SellerService		newSellerService	= null;		collection 	= sellerServiceDAO.getSellerServiceBySellerId( sellerSession.getId());		seller		= sellerDAO.getSellerById( sellerSession.getId());				if( seller == null)			return false;				if( DBUtils.parseInteger( changeCurrencyForm.getCurrencyConst(), 0).intValue() == 0)			return false;				Iterator iterator = collection.iterator();				while( iterator.hasNext()) {			sellerService = ( SellerService) iterator.next();						sellerService.setCurrencyConst( DBUtils.parseInteger( changeCurrencyForm.getCurrencyConst(), 0));						sellerServiceDAO.setSellerService( sellerService);		}				seller.setDefaultCurrency( DBUtils.parseInteger( changeCurrencyForm.getCurrencyConst(), 0));				sellerDAO.setSeller( seller);				return true;	}		public Price getSellerServicePrice( Integer sellerId, Integer serviceType, Integer sex) throws DataAccessErrorException	{		SellerServiceDAO 	sellerServiceDAO 		= new SellerServiceDAO();		SellerService		sellerService			= null;		Price				price					= new Price();				sellerService = sellerServiceDAO.getSellerServiceBySellerIdServiceTypeAndSex( sellerId, serviceType, sex);				if( sellerService == null)			return null;				price.setAdditionalHoursPrice	( sellerService.getServiceAdditionalHoursPrice().doubleValue());		price.setFirstHourPrice			( sellerService.getServiceFirstHourPrice().doubleValue());		price.setCurrency				( sellerService.getCurrencyConst().intValue());				return price;	}			public SellerServiceView getSellerServiceBySellerId( Integer sellerId, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerServiceDAO 	sellerServiceDAO 			= new SellerServiceDAO();		Collection			collection					= null;		SellerService		sellerService				= null;		Iterator			sellerServiceIterator		= null;		SellerServiceView	sellerServiceView			= new SellerServiceView();		String 				companyWithoutSexSex		= "";		String 				companyWithSexSex			= "";		String 				sexSex						= "";		String 				eroticShowSex				= "";		ServiceSex			companyWithoutSexService 	= new ServiceSex();		ServiceSex			companyWithSexService 		= new ServiceSex();		ServiceSex			sexService 					= new ServiceSex();		ServiceSex			eroticShowService 			= new ServiceSex();				collection = sellerServiceDAO.getSellerServiceBySellerId( sellerId);		if( (collection == null) || ( collection.size() == 0))			sellerServiceView.setNoService( "1");		else {			sellerServiceView.setNoService( "0");					sellerServiceIterator = collection.iterator();						while( sellerServiceIterator.hasNext()) {				sellerService = ( SellerService) sellerServiceIterator.next();								if( sellerService.getServiceTypeConst().intValue() == Constant.SERVICE_TYPE_COMPANY_WITHOUT_SEX){					sellerServiceView.setCompanyWithoutSexPrice( DBUtils.controlNull( sellerService.getServiceFirstHourPrice()));					sellerServiceView.setCompanyWithoutSexAdditionalHoursPrice( DBUtils.controlNull( sellerService.getServiceAdditionalHoursPrice()));					companyWithoutSexSex = companyWithoutSexSex + ConfigurationParameterManager.getMessages().getMessage( locale, "sex." + sellerService.getSexConst()) + ", ";					if( sellerService.getServiceFirstHourPrice().doubleValue() == 0)						sellerServiceView.setCompanyWithoutSexIsFree( "1");					else						sellerServiceView.setCompanyWithoutSexIsFree( "0");										if( sellerService.getToAsk() == null || sellerService.getToAsk().intValue() == 0)						sellerServiceView.setCompanyWithoutSexIsToAsk( "0");					else						sellerServiceView.setCompanyWithoutSexIsToAsk( "1");										switch( sellerService.getSexConst().intValue()){						case 1: companyWithoutSexService.setSex1( true);break;						case 2: companyWithoutSexService.setSex2( true);break;						case 4: companyWithoutSexService.setSex4( true);break;						case 8: companyWithSexService.setSex8( true);break;						case 16: companyWithoutSexService.setSex16( true);break;						case 32: companyWithoutSexService.setSex32( true);break;						case 64: companyWithoutSexService.setSex64( true);break;					}				}								if( sellerService.getServiceTypeConst().intValue() == Constant.SERVICE_TYPE_COMPANY_WITH_SEX){					sellerServiceView.setCompanyWithSexPrice( DBUtils.controlNull( sellerService.getServiceFirstHourPrice()));					sellerServiceView.setCompanyWithSexAdditionalHoursPrice( DBUtils.controlNull( sellerService.getServiceAdditionalHoursPrice()));					companyWithSexSex = companyWithSexSex + ConfigurationParameterManager.getMessages().getMessage( locale, "sex." + sellerService.getSexConst()) + ", ";					if( sellerService.getServiceFirstHourPrice().doubleValue() == 0)						sellerServiceView.setCompanyWithSexIsFree( "1");					else						sellerServiceView.setCompanyWithSexIsFree( "0");										if( sellerService.getToAsk() == null || sellerService.getToAsk().intValue() == 0)						sellerServiceView.setCompanyWithSexIsToAsk( "0");					else						sellerServiceView.setCompanyWithSexIsToAsk( "1");										switch( sellerService.getSexConst().intValue()){						case 1: companyWithSexService.setSex1( true);break;						case 2: companyWithSexService.setSex2( true);break;						case 4: companyWithSexService.setSex4( true);break;						case 8: companyWithSexService.setSex8( true);break;						case 16: companyWithSexService.setSex16( true);break;						case 32: companyWithSexService.setSex32( true);break;						case 64: companyWithSexService.setSex64( true);break;					}				}					if( sellerService.getServiceTypeConst().intValue() == Constant.SERVICE_TYPE_SEX){					sellerServiceView.setSexPrice( DBUtils.controlNull( sellerService.getServiceFirstHourPrice()));					sellerServiceView.setSexAdditionalHoursPrice( DBUtils.controlNull( sellerService.getServiceAdditionalHoursPrice()));					sexSex = sexSex + ConfigurationParameterManager.getMessages().getMessage( locale, "sex." + sellerService.getSexConst()) + ", ";					if( sellerService.getServiceFirstHourPrice().doubleValue() == 0)						sellerServiceView.setSexIsFree( "1");					else						sellerServiceView.setSexIsFree( "0");									if( sellerService.getToAsk() == null || sellerService.getToAsk().intValue() == 0)						sellerServiceView.setSexIsToAsk( "0");					else						sellerServiceView.setSexIsToAsk( "1");										switch( sellerService.getSexConst().intValue()){						case 1: sexService.setSex1( true);break;						case 2: sexService.setSex2( true);break;						case 4: sexService.setSex4( true);break;						case 8: sexService.setSex8( true);break;						case 16: sexService.setSex16( true);break;						case 32: sexService.setSex32( true);break;						case 64: sexService.setSex64( true);break;					}				}					if( sellerService.getServiceTypeConst().intValue() == Constant.SERVICE_TYPE_EROTIC_SHOW){					sellerServiceView.setEroticShowPrice( DBUtils.controlNull( sellerService.getServiceFirstHourPrice()));					sellerServiceView.setEroticShowAdditionalHoursPrice( DBUtils.controlNull( sellerService.getServiceAdditionalHoursPrice()));					eroticShowSex = eroticShowSex + ConfigurationParameterManager.getMessages().getMessage( locale, "sex." + sellerService.getSexConst()) + ", ";					if( sellerService.getServiceFirstHourPrice().doubleValue() == 0)						sellerServiceView.setEroticShowIsFree( "1");					else						sellerServiceView.setEroticShowIsFree( "0");										if( sellerService.getToAsk() == null || sellerService.getToAsk().intValue() == 0)						sellerServiceView.setEroticShowIsToAsk( "0");					else						sellerServiceView.setEroticShowIsToAsk( "1");										switch( sellerService.getSexConst().intValue()){						case 1: eroticShowService.setSex1( true);break;						case 2: eroticShowService.setSex2( true);break;						case 4: eroticShowService.setSex4( true);break;						case 8: eroticShowService.setSex8( true);break;						case 16: eroticShowService.setSex16( true);break;						case 32: eroticShowService.setSex32( true);break;						case 64: eroticShowService.setSex64( true);break;					}				}								sellerServiceView.setCurrency		( ConfigurationParameterManager.getMessages().getMessage( locale, "currency." + sellerService.getCurrencyConst()));				sellerServiceView.setCurrencyConst	( DBUtils.controlNull( sellerService.getCurrencyConst()));			}		}					if( companyWithoutSexSex.length() > 2)			companyWithoutSexSex = companyWithoutSexSex.substring( 0, companyWithoutSexSex.length() -2);		if( companyWithSexSex.length() > 2)			companyWithSexSex = companyWithSexSex.substring( 0, companyWithSexSex.length() -2);		if( sexSex.length() > 2)			sexSex = sexSex.substring( 0, sexSex.length() -2);		if( eroticShowSex.length() > 2)			eroticShowSex = eroticShowSex.substring( 0, eroticShowSex.length() -2);				sellerServiceView.setCompanyWithoutSexSex		( companyWithoutSexSex);		sellerServiceView.setCompanyWithoutSexService	( companyWithoutSexService);		sellerServiceView.setCompanyWithSexSex			( companyWithSexSex);		sellerServiceView.setCompanyWithSexService		( companyWithSexService);		sellerServiceView.setSexSex						( sexSex);		sellerServiceView.setSexService					( sexService);		sellerServiceView.setEroticShowSex				( eroticShowSex);		sellerServiceView.setEroticShowService			( eroticShowService);								return sellerServiceView;	}		public Collection getSellerServiceBySellerIdAndServiceType( Integer sellerId, Integer serviceType, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		SellerServiceDAO 	sellerServiceDAO 		= new SellerServiceDAO();		Collection			collection				= null;		SellerService		sellerService			= null;		ServiceView			serviceView				= null;		Iterator			sellerServiceIterator	= null;		ArrayList			arrayList				= new ArrayList();				collection = sellerServiceDAO.getSellerServiceBySellerIdAndServiceType( sellerId, serviceType);		if( ( collection == null) || ( collection.size() == 0))			return null;		else {			sellerServiceIterator = collection.iterator();						while( sellerServiceIterator.hasNext()) {				sellerService = ( SellerService) sellerServiceIterator.next();								serviceView = ( ServiceView) TranslatorFactory.getTranslator( sellerService, locale).translateView();								arrayList.add( serviceView);			}		}								return arrayList;	}			}