package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Calendar;import java.util.Collection;import java.util.Iterator;import java.util.Locale;import com.amandris.clients.service.dao.BuyerDAO;import com.amandris.clients.service.dao.InvitationDAO;import com.amandris.clients.service.dao.SellerDAO;import com.amandris.clients.service.vo.Buyer;import com.amandris.clients.service.vo.Invitation;import com.amandris.clients.service.vo.Seller;import com.amandris.clients.util.ConfigurationParameterManager;import com.amandris.clients.util.DBUtils;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.mail.InvitationMailObject;import com.amandris.clients.util.mail.Mail;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.view.InvitationDataView;import com.amandris.clients.web.view.InvitationView;public class InvitationFacade {		public boolean setInvitation( Integer sellerId, Integer buyerId, boolean freeContact, boolean sendEmail, Locale locale) throws DataUpdateErrorException, DataAccessErrorException	{		InvitationDAO 				invitationDAO 			= new InvitationDAO();		BuyerDAO					buyerDAO				= new BuyerDAO();		SellerDAO					sellerDAO				= new SellerDAO();		Invitation					invitation				= new Invitation();		Invitation					testInvitation			= null;		Buyer						buyer					= null;		Seller						seller					= null;		Calendar 					today 					= Calendar.getInstance( locale);		InvitationMailObject		invitationMailObject	= new InvitationMailObject( locale);		buyer = buyerDAO.getBuyerById( buyerId, Boolean.TRUE);		seller = sellerDAO.getSellerById( sellerId);				if( ( buyer == null) || ( seller == null)){			return false;		}				if( freeContact) {			testInvitation = invitationDAO.getInvitationByBuyerIdAndSellerId( buyerId, sellerId, Boolean.TRUE, locale);		} else {			testInvitation = invitationDAO.getInvitationByBuyerIdAndSellerId( buyerId, sellerId, null, locale);		}				if( testInvitation != null){			return false;		}				invitation.setBuyer				( buyer);		invitation.setBuyerId			( buyerId);		invitation.setBuyerVisible		( new Integer( 1));		invitation.setDate				( today.getTime());		invitation.setSeller			( seller);		invitation.setSellerId			( sellerId);		invitation.setSellerVisible		( new Integer( 1));		invitation.setFreeContactUsed	( new Integer( 0));				today.add( Calendar.DAY_OF_YEAR, ConfigurationParameterManager.getParameterInt( "invitationExpirationTime"));				invitation.setExpirationDate( today.getTime());		if( freeContact == false) {			invitation.setIsFreeContact				( new Integer( 0));			invitationMailObject.setIsFreeContact	( false);		}		else {			invitation.setIsFreeContact				( new Integer( 1));			invitationMailObject.setIsFreeContact	( true);		}				invitationDAO.setInvitation( invitation);				if( sendEmail) {			invitationMailObject.setLogin		( seller.getLogin());			invitationMailObject.setBuyerLogin	( buyer.getLogin());			invitationMailObject.setDate		( DBUtils.getDate( today.getTime(), 4));			invitationMailObject.setId			( seller.getId().toString());						String text = ConfigurationParameterManager.getMessages().getMessage( locale, "invitationMailObject.subject", buyer.getLogin(), seller.getLogin());						Mail.sendMail( buyer.getEmail(), text, invitationMailObject);		}				return true;	}		public boolean deleteInvitationById( Integer id, Integer buyerId) throws DataDeleteErrorException, DataAccessErrorException	{		InvitationDAO 	invitationDAO 	= new InvitationDAO();		Invitation		invitation		= null;				invitation = invitationDAO.getInvitationById( id);				if( invitation == null)			return false;				if( invitation.getBuyerId().intValue() != buyerId.intValue())			return false;				invitationDAO.deleteInvitation( invitation);				return true;	}		public boolean setBuyerInvitationVisibilityById( Integer id, Integer buyerId, boolean visibility) throws DataUpdateErrorException, DataAccessErrorException	{		InvitationDAO 	invitationDAO 	= new InvitationDAO();		Invitation		invitation		= null;				invitation = invitationDAO.getInvitationById( id);				if( invitation == null)			return false;				if( invitation.getBuyerId().intValue() != buyerId.intValue())			return false;				invitation.setBuyerVisible( DBUtils.boolean2Integer( visibility));				invitationDAO.setInvitation( invitation);				return true;	}		public boolean setSellerInvitationVisibilityById( Integer id, Integer sellerId, boolean visibility) throws DataUpdateErrorException, DataAccessErrorException	{		InvitationDAO 	invitationDAO 	= new InvitationDAO();		Invitation		invitation		= null;				invitation = invitationDAO.getInvitationById( id);				if( invitation == null)			return false;				if( invitation.getSellerId().intValue() != sellerId.intValue())			return false;				invitation.setSellerVisible( DBUtils.boolean2Integer( visibility));				invitationDAO.setInvitation( invitation);				return true;	}		public InvitationView getFreeContactInvitationByBuyerIdAndSellerId( Integer buyerId, Integer sellerId, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		InvitationDAO 	invitationDAO 	= new InvitationDAO();		Invitation		invitation		= null;				invitation = invitationDAO.getFreeContactInvitationByBuyerIdAndSellerId( buyerId, sellerId, locale);				if( invitation == null)			return null;					return ( InvitationView) TranslatorFactory.getTranslator( invitation, locale).translateView();	}		public InvitationDataView getInvitationDataByBuyerId( Integer buyerId, Boolean onlyActives, String orderBy, boolean orderDirection, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		InvitationDAO 		invitationDAO 	= new InvitationDAO();		Collection 			collection 		= null;		InvitationDataView 	result			= new InvitationDataView();		Invitation			invitation		= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		InvitationView		invitationView	= null;		int					totalInvitations= 0;		boolean				odd				= true;				collection = invitationDAO.getInvitationByBuyerId( buyerId, onlyActives, orderBy, orderDirection, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			invitation = ( Invitation) iterator.next();						invitationView = ( InvitationView) TranslatorFactory.getTranslator( invitation, locale).translateView();						totalInvitations = totalInvitations + 1;						if( odd)				invitationView.setOddOrEven( "odd");			else				invitationView.setOddOrEven( "even");											list.add( invitationView);		}				result.setInvitations		( list);		result.setTotalInvitations	( Integer.toString( totalInvitations));				return result;	}		public InvitationDataView getInvitationDataBySellerId( Integer sellerId, Boolean onlyActives, String orderBy, boolean orderDirection, int startIndex, int offset, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		InvitationDAO 		invitationDAO 	= new InvitationDAO();		Collection 			collection 		= null;		InvitationDataView 	result			= new InvitationDataView();		Invitation			invitation		= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		InvitationView		invitationView	= null;		int					totalInvitations= 0;		boolean				odd				= true;				collection = invitationDAO.getInvitationBySellerId( sellerId, onlyActives, orderBy, orderDirection, startIndex, offset);				if( collection == null)			return null;				iterator = collection.iterator();		while( iterator.hasNext()){			invitation = ( Invitation) iterator.next();						invitationView = ( InvitationView) TranslatorFactory.getTranslator( invitation, locale).translateView();						totalInvitations = totalInvitations + 1;						if( odd)				invitationView.setOddOrEven( "odd");			else				invitationView.setOddOrEven( "even");											list.add( invitationView);		}				result.setInvitations		( list);		result.setTotalInvitations	( Integer.toString( totalInvitations));				return result;	}			}