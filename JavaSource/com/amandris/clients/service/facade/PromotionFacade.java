package com.amandris.clients.service.facade;import java.util.ArrayList;import java.util.Calendar;import java.util.Collection;import java.util.Date;import java.util.Iterator;import java.util.Locale;import java.util.Random;import com.amandris.clients.service.dao.PromotionDAO;import com.amandris.clients.service.dao.SellerDAO;import com.amandris.clients.service.vo.Seller;import com.amandris.clients.service.vo.SellerPromotion;import com.amandris.clients.util.ConfigurationParameterManager;import com.amandris.clients.util.Constant;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;import com.amandris.clients.util.exception.TranslateValueObjectErrorException;import com.amandris.clients.util.translator.SellerToSellerViewListTranslator;import com.amandris.clients.util.translator.SellerToSellerViewSmallTranslator;import com.amandris.clients.util.translator.TranslatorFactory;import com.amandris.clients.web.view.PromotionDataView;import com.amandris.clients.web.view.PromotionView;import com.amandris.clients.web.view.SellerViewList;import com.amandris.clients.web.view.SellerViewSmall;public class PromotionFacade {		public boolean setPromotion( Integer sellerId, int promotionType, Date endDate, Locale locale) throws DataAccessErrorException, DataUpdateErrorException	{		PromotionDAO 	promotionDAO 	= new PromotionDAO();		SellerDAO		sellerDAO		= new SellerDAO();		Seller			seller			= null;		SellerPromotion sellerPromotion = new SellerPromotion();		Calendar		today			= Calendar.getInstance( locale);		boolean			sellerChanged	= false;				seller = sellerDAO.getSellerById( sellerId);				if( seller == null)			return false;		if( endDate.before( today.getTime()))			return false;					int lastId = 0;				Iterator iterator = promotionDAO.getLastPromotion().iterator();		while( iterator.hasNext()) {			SellerPromotion sellerPromotionTmp = ( SellerPromotion) iterator.next();									if( sellerPromotionTmp.getId().intValue() > lastId){				lastId = sellerPromotionTmp.getId().intValue();			}		}				sellerPromotion.setEndDate			( endDate);		sellerPromotion.setPromotionConst	( new Integer( promotionType));		sellerPromotion.setSeller			( seller);		sellerPromotion.setSellerId			( seller.getId());		sellerPromotion.setStartDate		( today.getTime());		sellerPromotion.setId				( new Integer(lastId));				promotionDAO.setPromotion( sellerPromotion);				if( promotionType == Constant.PROMOTION_ALBUM){			seller.setHasAlbum( new Integer( 1));			sellerChanged = true;		}				if( promotionType == Constant.PROMOTION_FREE_CONTACT){			seller.setFreeContactsUntil( endDate);			sellerChanged = true;		}				if( promotionType == Constant.PROMOTION_FIRST_PLACE_IN_SEARCH){			seller.setFirstPlaceInSearchUntil( endDate);			sellerChanged = true;		}				if( sellerChanged)			sellerDAO.setSeller( seller);				return true;	}			public PromotionView getPromotionById( Integer id, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException, DataUpdateErrorException	{		PromotionDAO 	promotionDAO 	= new PromotionDAO();		SellerPromotion	sellerPromotion	= null;		PromotionView	promotionView	= null;				sellerPromotion = promotionDAO.getPromotionById( id);				if( sellerPromotion == null)			return null;				promotionView = ( PromotionView) TranslatorFactory.getTranslator( sellerPromotion, locale).translateView();						return promotionView;	}			public Collection getShowInIndexSellerRandomSellection( Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		PromotionDAO 		promotionDAO 		= new PromotionDAO();		Collection 			collection 			= null;		SellerPromotion		sellerPromotion		= null;		Iterator			iterator			= null;		ArrayList			list				= new ArrayList();		Calendar			presentDay			= Calendar.getInstance( locale); 		SellerViewSmall		sellerViewSmall		= null;		Random				random				= new Random(); 		int					promotionCount		= 0;		int					startIndex			= 0;		int					endIndex			= 0;		int					showInIndexElements	= ConfigurationParameterManager.getParameterInt( "showInIndexElements");		int					maxElements			= 0;				promotionCount = promotionDAO.getPromotionCount( Constant.PROMOTION_SHOW_IN_INDEX, presentDay.getTime());		if( promotionCount == 0)			return null;				maxElements = promotionCount - showInIndexElements + 1; 				if( maxElements < 1)			maxElements = 1;				startIndex 	= random.nextInt( maxElements) + 1;		endIndex 	= startIndex + showInIndexElements - 1;				collection = promotionDAO.getPromotion( Constant.PROMOTION_SHOW_IN_INDEX, presentDay.getTime(), startIndex, endIndex);		if( collection == null)			return null;				iterator = collection.iterator();				while( iterator.hasNext()){			sellerPromotion = ( SellerPromotion) iterator.next();						SellerToSellerViewSmallTranslator translator = new SellerToSellerViewSmallTranslator();						translator.setObject( sellerPromotion.getSeller());			translator.setLocale( locale);						sellerViewSmall = ( SellerViewSmall) translator.translateView();									list.add( sellerViewSmall);		}						return list;	}		public Collection getMainSeller( int index, int itemsPerPage, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		PromotionDAO 		promotionDAO 		= new PromotionDAO();		Collection 			collection 			= null;		SellerPromotion		sellerPromotion		= null;		Iterator			iterator			= null;		ArrayList			list				= new ArrayList();		Calendar			presentDay			= Calendar.getInstance( locale); 		SellerViewList		sellerViewList		= null;		boolean				odd					= true;					collection = promotionDAO.getPromotion( Constant.PROMOTION_SHOW_IN_INDEX, presentDay.getTime(), index, index + itemsPerPage - 1);		if( collection == null)			return null;				iterator = collection.iterator();				while( iterator.hasNext()){			sellerPromotion = ( SellerPromotion) iterator.next();						SellerToSellerViewListTranslator translator = new SellerToSellerViewListTranslator();						translator.setObject( sellerPromotion.getSeller());			translator.setLocale( locale);						sellerViewList = ( SellerViewList) translator.translateView();									sellerViewList.setOddOrEven( (odd ? "odd" : "even"));						odd = !odd;						list.add( sellerViewList);		}						return list;	}		public int getMainSellerCount( Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		PromotionDAO 		promotionDAO 		= new PromotionDAO();		Calendar			presentDay			= Calendar.getInstance( locale); 					return  promotionDAO.getPromotionCount( Constant.PROMOTION_SHOW_IN_INDEX, presentDay.getTime());	}			public PromotionDataView getPromotionDataBySellerId( Integer sellerId, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		PromotionDAO 		promotionDAO 	= new PromotionDAO();		Collection 			collection 		= null;		PromotionDataView 	result			= new PromotionDataView();		SellerPromotion		sellerPromotion	= null;		Iterator			iterator		= null;		ArrayList			list			= new ArrayList();		PromotionView		promotionView	= null;		Calendar			presentDay		= Calendar.getInstance( locale); 		int					promotionCount	= 0;		int					totalMessages	= 0;		boolean				odd				= true;				collection = promotionDAO.getPromotionBySellerId( sellerId, presentDay.getTime());				if( collection == null)			return null;		iterator = collection.iterator();		while( iterator.hasNext()){			sellerPromotion = ( SellerPromotion) iterator.next();						promotionView = ( PromotionView) TranslatorFactory.getTranslator( sellerPromotion, locale).translateView();						promotionCount = promotionCount + 1;						if( odd)				promotionView.setOddOrEven( "odd");			else				promotionView.setOddOrEven( "even");							odd = !odd;						if( sellerPromotion.getPromotionConst().intValue() == Constant.PROMOTION_ALBUM)				promotionView.setEndDate( "-");						list.add( promotionView);		}				result.setPromotions	( list);		result.setPromotionCount( Integer.toString( promotionCount));				return result;	}		public int getHighlightedPromotionBySellerId( Integer sellerId, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		PromotionDAO 		promotionDAO 	= new PromotionDAO();		Collection 			collection 		= null;		SellerPromotion		sellerPromotion	= null;		Iterator			iterator		= null;		Calendar			presentDay		= Calendar.getInstance( locale); 				collection = promotionDAO.getPromotionBySellerId( sellerId, presentDay.getTime());				if( collection == null)			return 0;		iterator = collection.iterator();				while( iterator.hasNext()){			sellerPromotion = ( SellerPromotion) iterator.next();						if ( sellerPromotion.getPromotionConst().intValue() == Constant.PROMOTION_HIGHLIGHT_PROFILE_1)				return Constant.PROMOTION_HIGHLIGHT_PROFILE_1;						if ( sellerPromotion.getPromotionConst().intValue() == Constant.PROMOTION_HIGHLIGHT_PROFILE_2)				return Constant.PROMOTION_HIGHLIGHT_PROFILE_2;						if ( sellerPromotion.getPromotionConst().intValue() == Constant.PROMOTION_HIGHLIGHT_PROFILE_3)				return Constant.PROMOTION_HIGHLIGHT_PROFILE_3;		}				return 0;	}		public boolean isPromotionActive( Integer sellerId, int promotionType, Locale locale) throws DataAccessErrorException, TranslateValueObjectErrorException	{		PromotionDAO 		promotionDAO 	= new PromotionDAO();		SellerPromotion		sellerPromotion	= null;		Calendar			cal = Calendar.getInstance( locale);				sellerPromotion = promotionDAO.getPromotionBySellerIdAndType( sellerId, promotionType, cal.getTime());				if( sellerPromotion == null)			return false;		else			return true;	}}