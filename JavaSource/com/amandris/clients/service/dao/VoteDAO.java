package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.VoteToBuyer;import com.amandris.clients.service.vo.VoteToSeller;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class VoteDAO{		public void setVoteToSeller( VoteToSeller voteToSeller)  throws DataUpdateErrorException{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( voteToSeller);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException( VoteToSeller.class.getName(), this.getClass().getName() + ".setVoteToSeller()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void setVoteToBuyer( VoteToBuyer voteToBuyer)  throws DataUpdateErrorException{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( voteToBuyer);			broker.commitTransaction();		}catch (PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException( VoteToBuyer.class.getName(), this.getClass().getName() + ".setVoteToBuyer()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public VoteToSeller getVoteToSellerByContactId( Integer contactId)  throws DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;			if( contactId.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "contactId", contactId);						QueryByCriteria query = new QueryByCriteria( VoteToSeller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( VoteToSeller) broker.getObjectByQuery( query);					}catch ( PersistenceBrokerException ex) {			ex.printStackTrace();			throw new DataAccessErrorException( VoteToSeller.class.getName(), this.getClass().getName() + ".getVoteToSellerByContactId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public VoteToBuyer getVoteToBuyerByContactId( Integer contactId)  throws DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;			if( contactId.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "contactId", contactId);						QueryByCriteria query = new QueryByCriteria( VoteToBuyer.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( VoteToBuyer) broker.getObjectByQuery( query);					}catch ( PersistenceBrokerException ex) {			ex.printStackTrace();			throw new DataAccessErrorException( VoteToBuyer.class.getName(), this.getClass().getName() + ".getVoteToBuyerByContactId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public VoteToBuyer getVoteToBuyerById( Integer id)  throws DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;			if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						QueryByCriteria query = new QueryByCriteria( VoteToBuyer.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( VoteToBuyer) broker.getObjectByQuery( query);					}catch ( PersistenceBrokerException ex) {			ex.printStackTrace();			throw new DataAccessErrorException( VoteToBuyer.class.getName(), this.getClass().getName() + ".getVoteToBuyerById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public VoteToSeller getVoteToSellerById( Integer id)  throws DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;			if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						QueryByCriteria query = new QueryByCriteria( VoteToSeller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( VoteToSeller) broker.getObjectByQuery( query);					}catch ( PersistenceBrokerException ex) {			ex.printStackTrace();			throw new DataAccessErrorException( VoteToSeller.class.getName(), this.getClass().getName() + ".getVoteToSellerById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getVoteToSellerBySellerId(Integer sellerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset)  throws DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", sellerId);						if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( VoteToSeller.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( VoteToSeller.class.getName(), this.getClass().getName() + ".getVoteToSellerBySellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getVoteToBuyerByBuyerId(Integer buyerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset)  throws DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);						if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( VoteToBuyer.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( VoteToBuyer.class.getName(), this.getClass().getName() + ".getVoteToBuyerByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getVoteToSellerByBuyerId(Integer buyerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset)  throws DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);						if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( VoteToSeller.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( VoteToSeller.class.getName(), this.getClass().getName() + ".getVoteToSellerByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getVoteToBuyerBySellerId(Integer sellerId, String orderBy, boolean orderDirection, Boolean onlyActives, int startIndex, int offset)  throws DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", sellerId);						if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( VoteToBuyer.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( VoteToBuyer.class.getName(), this.getClass().getName() + ".getVoteToBuyerBySellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getVoteToBuyerToCensor()  throws DataAccessErrorException{		Criteria 			criteria			= new Criteria();		Criteria 			replyCriteria 		= new Criteria();		Criteria 			andReplyCriteria 	= new Criteria();		PersistenceBroker 	broker 				= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));			criteria.addEqualTo				( "active", new Integer( 0));						replyCriteria.addNotNull		( "reply");			replyCriteria.addEqualTo		( "replyActive", new Integer( 0));						criteria.addOrCriteria	( replyCriteria);						QueryByCriteria query = new QueryByCriteria( VoteToBuyer.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( VoteToBuyer.class.getName(), this.getClass().getName() + ".getVoteToBuyerToCensor()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getVoteToSellerToCensor()  throws DataAccessErrorException{		Criteria 			criteria			= new Criteria();		Criteria 			replyCriteria 		= new Criteria();		Criteria 			andReplyCriteria 	= new Criteria();		PersistenceBroker 	broker 				= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));			criteria.addEqualTo				( "active", new Integer( 0));						replyCriteria.addNotNull		( "reply");			replyCriteria.addEqualTo		( "replyActive", new Integer( 0));						criteria.addOrCriteria	( replyCriteria);						QueryByCriteria query = new QueryByCriteria( VoteToSeller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( VoteToBuyer.class.getName(), this.getClass().getName() + ".getVoteToSellerToCensor()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}}