package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.BuyerSavedSearch;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class SavedSearchDAO{		public void setSavedSearch( BuyerSavedSearch savedSearch)  throws DataUpdateErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( savedSearch);			broker.commitTransaction();		}catch (PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataUpdateErrorException(BuyerSavedSearch.class.getName(), this.getClass().getName() + ".setSavedSearch()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteSavedSearch( Integer id)  throws DataDeleteErrorException, DataAccessErrorException{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		BuyerSavedSearch 	savedSearch	= null;				if( id.intValue() == 0)			return;				try {						if( (savedSearch = getSavedSearchById( id)) == null)				return;						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.beginTransaction();			broker.delete( savedSearch);			broker.commitTransaction();					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( BuyerSavedSearch.class.getName(), this.getClass().getName() + ".deleteSavedSearch()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteBuyerSavedSearchByBuyerId( Integer buyerId) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);									QueryByCriteria query = new QueryByCriteria( BuyerSavedSearch.class, criteria);									broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.deleteByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( BuyerSavedSearch.class.getName(), this.getClass().getName() + ".deleteBuyerSavedSearchByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public BuyerSavedSearch getSavedSearchByBuyerIdAndName( Integer buyerId, String name) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);			criteria.addEqualTo		( "name", name);						Query query = new QueryByCriteria( BuyerSavedSearch.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( BuyerSavedSearch) broker.getObjectByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerSavedSearch.class.getName(), this.getClass().getName() + ".getSavedSearch()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public BuyerSavedSearch getSavedSearchById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "id", id);						Query query = new QueryByCriteria( BuyerSavedSearch.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( BuyerSavedSearch) broker.getObjectByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerSavedSearch.class.getName(), this.getClass().getName() + ".getSavedSearch()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getSavedSearch( Integer BuyerId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", BuyerId);						Query query = new QueryByCriteria( BuyerSavedSearch.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerSavedSearch.class.getName(), this.getClass().getName() + ".getSavedSearchByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}	}