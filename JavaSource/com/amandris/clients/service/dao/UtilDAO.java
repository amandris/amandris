package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.Country;import com.amandris.clients.service.vo.State;import com.amandris.clients.util.exception.DataAccessErrorException;public class UtilDAO{				public Collection getState( ) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addNotEqualTo	( "id", new Integer( 0));						Query query = new QueryByCriteria( State.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( State.class.getName(), this.getClass().getName() + ".getState()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public State getStateById( Integer stateId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo	( "id", stateId);						Query query = new QueryByCriteria( State.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( State) broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( State.class.getName(), this.getClass().getName() + ".getStateById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getCountry( ) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addNotEqualTo	( "id", new Integer( 0));						Query query = new QueryByCriteria( Country.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Country.class.getName(), this.getClass().getName() + ".getCountry()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Country getCountryById( Integer countryId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo	( "id", countryId);						Query query = new QueryByCriteria( Country.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Country) broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Country.class.getName(), this.getClass().getName() + ".getCountryById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}}