package com.amandris.clients.service.dao;import java.util.Collection;import java.util.Random;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.Buyer;import com.amandris.clients.service.vo.Seller;import com.amandris.clients.util.Constant;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class SellerDAO{				public void setSeller( Seller seller)  throws DataUpdateErrorException{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( seller);			broker.commitTransaction();		}catch (PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException( Seller.class.getName(), this.getClass().getName() + ".setSeller()", ex);		}finally {			if (broker != null) {				broker.close();			}		}	}		public void deleteSeller( Seller seller)  throws DataDeleteErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( seller);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataDeleteErrorException( Seller.class.getName(), this.getClass().getName() + ".deleteSeller()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getSellerToCensor() throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addNotEqualTo	( "id", 		new Integer( 0));			criteria.addEqualTo		( "textActive",	new Integer( 0));						Query query = new QueryByCriteria( Seller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerToCensor()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getSellerListForBuyer( Buyer buyer) throws DataAccessErrorException	{		Criteria 			criteria			= new Criteria();		Criteria			mainCriteria 		= new Criteria();		Criteria 			sellerSexCriteria 	= new Criteria();		String				orderedBy			= "email";				Random random = new Random();		int orderType 		= random.nextInt( 9);		int orderDirection 	= random.nextInt( 2);				switch( orderType){			case 1: orderedBy = "login"; break;			case 2: orderedBy = "password"; break;			case 3: orderedBy = "intro"; break;			case 4: orderedBy = "text"; break;			case 5: orderedBy = "email"; break;			case 6: orderedBy = "id"; break;			case 7: orderedBy = "birthdate"; break;			case 8: orderedBy = "city"; break;			case 9: orderedBy = "lastLogin"; break;		}				PersistenceBroker 	broker 		= null;		try {			//mainCriteria.addEqualTo			( "active",				new Integer( 1));			mainCriteria.addEqualTo			( "isCalendarGenerated",new Integer( 1));			mainCriteria.addEqualTo			( "servicesSaved",		new Integer( 1));						if( buyer.getSexConst().intValue() == Constant.SEX_BOY && (buyer.getOrientationConst().intValue() == Constant.ORIENTATION_HETEROSEXUAL || buyer.getOrientationConst().intValue() == Constant.ORIENTATION_NA)){				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_GIRL));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_BOY_AND_GIRL_COUPLE));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_GIRLS_COUPLE));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_GROUP));				sellerSexCriteria.addOrCriteria( criteria);			}						if( buyer.getSexConst().intValue() == Constant.SEX_BOY && buyer.getOrientationConst().intValue() == Constant.ORIENTATION_HOMOSEXUAL){				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_BOY));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_BOY_AND_GIRL_COUPLE));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_BOYS_COUPLE));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_GROUP));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_SHEMALE));				sellerSexCriteria.addOrCriteria( criteria);			}						if( buyer.getSexConst().intValue() == Constant.SEX_GIRL && (buyer.getOrientationConst().intValue() == Constant.ORIENTATION_HETEROSEXUAL || buyer.getOrientationConst().intValue() == Constant.ORIENTATION_NA)){				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_BOY));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_BOY_AND_GIRL_COUPLE));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_BOYS_COUPLE));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_GROUP));				sellerSexCriteria.addOrCriteria( criteria);			}						if( buyer.getSexConst().intValue() == Constant.SEX_GIRL && buyer.getOrientationConst().intValue() == Constant.ORIENTATION_HOMOSEXUAL){				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_GIRL));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_BOY_AND_GIRL_COUPLE));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_GIRLS_COUPLE));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_GROUP));				sellerSexCriteria.addOrCriteria( criteria);				criteria = new Criteria();				criteria.addEqualTo( "sexConst" , new Integer( Constant.SEX_SHEMALE));				sellerSexCriteria.addOrCriteria( criteria);			}						if( sellerSexCriteria.isEmpty() == false)				mainCriteria.addAndCriteria( sellerSexCriteria);							QueryByCriteria query = new QueryByCriteria( Seller.class, mainCriteria);						if( orderDirection == 1)				query.addOrderBy		( orderedBy, true);			else				query.addOrderBy		( orderedBy, false);						query.setStartAtIndex	( 0);			query.setEndAtIndex		( 9);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerToCensor()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getSellerToCensorPicture() throws DataAccessErrorException	{		Criteria 			criteria		= new Criteria();		Criteria 			mainCriteria	= new Criteria();		Criteria			picture1Criteria = new Criteria();		Criteria			picture2Criteria = new Criteria();		Criteria			picture3Criteria = new Criteria();		Criteria			picture4Criteria = new Criteria();		Criteria			picture5Criteria = new Criteria();		PersistenceBroker 	broker 			= null;		try {			mainCriteria.addNotEqualTo	( "id", 				new Integer( 0));			picture1Criteria.addEqualTo	( "picture1Waiting",	new Integer( 1));			picture2Criteria.addEqualTo	( "picture2Waiting",	new Integer( 1));			picture3Criteria.addEqualTo	( "picture3Waiting",	new Integer( 1));			picture4Criteria.addEqualTo	( "picture4Waiting",	new Integer( 1));			picture5Criteria.addEqualTo	( "picture5Waiting",	new Integer( 1));						criteria.addOrCriteria( picture1Criteria);			criteria.addOrCriteria( picture2Criteria);			criteria.addOrCriteria( picture3Criteria);			criteria.addOrCriteria( picture4Criteria);			criteria.addOrCriteria( picture5Criteria);						mainCriteria.addAndCriteria( criteria);						Query query = new QueryByCriteria( Seller.class, mainCriteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerToCensorPicture()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getSellerToGenerateCalendar() throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addNotEqualTo	( "id", 		new Integer( 0));			criteria.addEqualTo		( "isCalendarGenerated",	new Integer( 1));						Query query = new QueryByCriteria( Seller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerToGenerateCalendar()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Seller getSellerById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo		( "id", id);						Query query = new QueryByCriteria( Seller.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Seller) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Seller getSellerByLoginAndPassword( String login, String password, boolean onlyActives) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo		( "login", 		login);			criteria.addEqualTo		( "password", 	password);			criteria.addNotEqualTo	( "id", 		new Integer( 0));						if ( onlyActives == true){				criteria.addEqualTo( "active",new Integer( 1));			}						Query query = new QueryByCriteria( Seller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Seller)broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerByLoginAndPassword()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Seller getSellerByEmailAndPassword( String email, String password, boolean onlyActives) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo		( "email", 		email);			criteria.addEqualTo		( "password", 	password);			criteria.addNotEqualTo	( "id", 		new Integer( 0));						if ( onlyActives == true){				criteria.addEqualTo( "active",new Integer( 1));			}						Query query = new QueryByCriteria( Seller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Seller)broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerByEmailAndPassword()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Seller getSellerByLogin( String login) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo		( "login", 		login);			criteria.addNotEqualTo	( "id", 		new Integer( 0));									Query query = new QueryByCriteria( Seller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Seller)broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerByLogin()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Seller getSellerByEmail( String email) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo		( "email", 		email);			criteria.addNotEqualTo	( "id", 		new Integer( 0));									Query query = new QueryByCriteria( Seller.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Seller)broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSellerByEmail()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getSeller( ) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addNotEqualTo	( "id", new Integer( 0));						Query query = new QueryByCriteria( Seller.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Seller.class.getName(), this.getClass().getName() + ".getSeller()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}	}