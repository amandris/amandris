package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.BuyerRecomendation;import com.amandris.clients.service.vo.SellerRecomendation;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class RecommendationDAO{		public void setBuyerRecommendation( BuyerRecomendation buyerRecomendation)  throws DataUpdateErrorException{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( buyerRecomendation);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException( BuyerRecomendation.class.getName(), this.getClass().getName() + ".setBuyerRecommendation()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void setSellerRecommendation( SellerRecomendation sellerRecomendation)  throws DataUpdateErrorException{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( sellerRecomendation);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException( SellerRecomendation.class.getName(), this.getClass().getName() + ".setSellerRecommendation()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteOldBuyerRecomendation( ) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		java.util.Calendar 	today 		= java.util.Calendar.getInstance( );				today.setTimeInMillis( today.getTime().getTime() - 2678400000l);				try {			broker = PersistenceBrokerFactory.defaultPersistenceBroker();						criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addLessThan	( "date", today.getTime());			QueryByCriteria query = new QueryByCriteria( BuyerRecomendation.class, criteria);						broker.beginTransaction();			broker.deleteByQuery( query);			broker.commitTransaction();					} catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( BuyerRecomendation.class.getName(), this.getClass().getName() + ".deleteOldBuyerRecomendation()", ex);		} finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteBuyerRecomendationByBuyerId( Integer buyerId) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);									QueryByCriteria query = new QueryByCriteria( BuyerRecomendation.class, criteria);									broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.deleteByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( BuyerRecomendation.class.getName(), this.getClass().getName() + ".deleteBuyerrecomendationByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteOldSellerRecomendation( ) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		java.util.Calendar 	today 		= java.util.Calendar.getInstance( );				today.setTimeInMillis( today.getTime().getTime() - 2678400000l);				try {			broker = PersistenceBrokerFactory.defaultPersistenceBroker();						criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addLessThan	( "date", today.getTime());			QueryByCriteria query = new QueryByCriteria( SellerRecomendation.class, criteria);						broker.beginTransaction();			broker.deleteByQuery( query);			broker.commitTransaction();					} catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( SellerRecomendation.class.getName(), this.getClass().getName() + ".deleteOldSellerRecomendation()", ex);		} finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteSellerRecomendationBySellerId( Integer sellerId) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", sellerId);									QueryByCriteria query = new QueryByCriteria( SellerRecomendation.class, criteria);									broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.deleteByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( SellerRecomendation.class.getName(), this.getClass().getName() + ".deleteSellerRecomendationByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public BuyerRecomendation getBuyerRecommendationByBuyerIdAndEmail( Integer buyerId, String email) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo		( "buyerId", 	buyerId);			criteria.addEqualTo		( "email", 		email);						Query query = new QueryByCriteria( BuyerRecomendation.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( BuyerRecomendation)broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerRecomendation.class.getName(), this.getClass().getName() + ".getBuyerRecommendationByBuyerIdAndEmail()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public SellerRecomendation getSellerRecommendationBySellerIdAndEmail( Integer sellerId, String email) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo		( "sellerId", 	sellerId);			criteria.addEqualTo		( "email", 		email);						Query query = new QueryByCriteria( SellerRecomendation.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( SellerRecomendation)broker.getObjectByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerRecomendation.class.getName(), this.getClass().getName() + ".getSellerRecommendationBySellerIdAndEmail()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getBuyerRecomendationByEmail( String email) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo( "email", email);						Query query = new QueryByCriteria( BuyerRecomendation.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerRecomendation.class.getName(), this.getClass().getName() + ".getBuyerRecommendationByEmail()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getSellerRecomendationByEmail( String email) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo( "email", email);						Query query = new QueryByCriteria( SellerRecomendation.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerRecomendation.class.getName(), this.getClass().getName() + ".getSellerRecommendationByEmail()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getBuyerUsedRecommendationCount( Integer buyerId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo( "buyerId", buyerId);			criteria.addEqualTo( "used", new Integer( 1));						Query query = new QueryByCriteria( BuyerRecomendation.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerRecomendation.class.getName(), this.getClass().getName() + ".getBuyerUsedRecommendationCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getSellerUsedRecommendationCount( Integer sellerId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addEqualTo( "sellerId", sellerId);			criteria.addEqualTo( "used", new Integer( 1));						Query query = new QueryByCriteria( SellerRecomendation.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerRecomendation.class.getName(), this.getClass().getName() + ".getSellerUsedRecommendationCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		}