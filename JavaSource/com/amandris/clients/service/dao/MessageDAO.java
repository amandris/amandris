package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.BuyerMessage;import com.amandris.clients.service.vo.SellerMessage;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class MessageDAO{			public void setBuyerMessage( BuyerMessage buyerMessage)  throws DataUpdateErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( buyerMessage);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataUpdateErrorException( BuyerMessage.class.getName(), this.getClass().getName() + ".setBuyerMessage()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void setSellerMessage( SellerMessage sellerMessage)  throws DataUpdateErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( sellerMessage);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataUpdateErrorException( SellerMessage.class.getName(), this.getClass().getName() + ".setSellerMessage()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteBuyerMessage( BuyerMessage buyerMessage)  throws DataDeleteErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( buyerMessage);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataDeleteErrorException( BuyerMessage.class.getName(), this.getClass().getName() + ".deleteBuyerMessage()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteBuyerMessageByBuyerId( Integer buyerId) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);									QueryByCriteria query = new QueryByCriteria( BuyerMessage.class, criteria);									broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.deleteByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( BuyerMessage.class.getName(), this.getClass().getName() + ".deleteBuyerMessageByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteSellerMessage( SellerMessage sellerMessage)  throws DataDeleteErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( sellerMessage);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataDeleteErrorException( SellerMessage.class.getName(), this.getClass().getName() + ".deleteSellerMessage()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteSellerMessageBySellerId( Integer sellerId) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", sellerId);									QueryByCriteria query = new QueryByCriteria( SellerMessage.class, criteria);									broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.deleteByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( SellerMessage.class.getName(), this.getClass().getName() + ".deleteSellerMessageBySellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public BuyerMessage getBuyerMessageById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						Query query = new QueryByCriteria( BuyerMessage.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( BuyerMessage) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerMessage.class.getName(), this.getClass().getName() + ".getBuyerMessageById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public SellerMessage getSellerMessageById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						Query query = new QueryByCriteria( SellerMessage.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( SellerMessage) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerMessage.class.getName(), this.getClass().getName() + ".getSellerMessageById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getBuyerMessageByBuyerId( Integer buyerId, Boolean onlyNews, Boolean onlyActives, String orderBy, boolean orderDirection, int startIndex, int offset) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));						criteria.addEqualTo	( "buyerId", buyerId);									if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						if( onlyNews != null) {				if( onlyNews.booleanValue())					criteria.addEqualTo( "isNew", new Integer( 1));				else					criteria.addEqualTo( "isNew", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( BuyerMessage.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerMessage.class.getName(), this.getClass().getName() + ".getBuyerMessageByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getSellerMessageBySellerId( Integer sellerId, Boolean onlyNews, Boolean onlyActives, String orderBy, boolean orderDirection, int startIndex, int offset) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));						criteria.addEqualTo	( "sellerId", sellerId);									if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						if( onlyNews != null) {				if( onlyNews.booleanValue())					criteria.addEqualTo( "isNew", new Integer( 1));				else					criteria.addEqualTo( "isNew", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( SellerMessage.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerMessage.class.getName(), this.getClass().getName() + ".getSellerMessageBySellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getBuyerMessageByBuyerIdCount( Integer buyerId, Boolean onlyNews, Boolean onlyActives) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));						criteria.addEqualTo	( "buyerId", buyerId);						if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						if( onlyNews != null) {				if( onlyNews.booleanValue())					criteria.addEqualTo( "isNew", new Integer( 1));				else					criteria.addEqualTo( "isNew", new Integer( 0));			}						Query query = new QueryByCriteria( BuyerMessage.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( BuyerMessage.class.getName(), this.getClass().getName() + ".getBuyerMessageByBuyerIdCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getSellerMessageBySellerIdCount( Integer sellerId, Boolean onlyNews, Boolean onlyActives) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));						criteria.addEqualTo	( "sellerId", sellerId);						if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						if( onlyNews != null) {				if( onlyNews.booleanValue())					criteria.addEqualTo( "isNew", new Integer( 1));				else					criteria.addEqualTo( "isNew", new Integer( 0));			}						Query query = new QueryByCriteria( SellerMessage.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerMessage.class.getName(), this.getClass().getName() + ".getSellerMessageBySellerIdCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}}