package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.AlbumElement;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class AlbumElementDAO{				public void deleteAlbumElement( AlbumElement albumElement)  throws DataUpdateErrorException{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( albumElement);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException( AlbumElement.class.getName(), this.getClass().getName() + ".deleteAlbumElement()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void setAlbumElement( AlbumElement albumElement)  throws DataUpdateErrorException{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( albumElement);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException( AlbumElement.class.getName(), this.getClass().getName() + ".setAlbumElement()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public AlbumElement getAlbumElementById( Integer id, Boolean onlyActive) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						if( onlyActive != null) {				if( onlyActive.booleanValue() == true)					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}						Query query = new QueryByCriteria( AlbumElement.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( AlbumElement) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( AlbumElement.class.getName(), this.getClass().getName() + ".getAlbumElementById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getAlbumElement( Integer sellerId, Boolean onlyActive) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));			criteria.addEqualTo				( "sellerId", sellerId);						if( onlyActive != null) {				if( onlyActive.booleanValue() == true)					criteria.addEqualTo( "active", new Integer( 1));				else					criteria.addEqualTo( "active", new Integer( 0));			}								QueryByCriteria query = new QueryByCriteria( AlbumElement.class, criteria);								broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( AlbumElement.class.getName(), this.getClass().getName() + ".getAlbumElement()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getAlbumElementToCensor() throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;		try {			criteria.addNotEqualTo	( "id", 	new Integer( 0));			criteria.addEqualTo		( "active",	new Integer( 0));						Query query = new QueryByCriteria( AlbumElement.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( AlbumElement.class.getName(), this.getClass().getName() + ".getAlbumElementToCensor()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getAlbumElementCount( Integer sellerId) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));			criteria.addEqualTo				( "sellerId", sellerId);								QueryByCriteria query = new QueryByCriteria( AlbumElement.class, criteria);								broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( AlbumElement.class.getName(), this.getClass().getName() + ".getAlbumElementCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}	}