package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.Contact;import com.amandris.clients.util.Constant;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class ContactDAO{					public void setContact(Contact contact)  throws DataUpdateErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( contact);			broker.commitTransaction();		}catch (PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException(Contact.class.getName(), this.getClass().getName() + ".setContact()", ex);		}finally {			if (broker != null) {				broker.close();			}		}	}		public void deleteContact( Contact contact)  throws DataDeleteErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( contact);			broker.commitTransaction();		}catch (PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataDeleteErrorException( Contact.class.getName(), this.getClass().getName() + ".deleteContact()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Contact getContactById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						Query query = new QueryByCriteria( Contact.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Contact) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getContactById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Contact getContactBySellerIdAndBuyerId( Integer sellerId, Integer buyerId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( sellerId.intValue() == 0 || buyerId.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "sellerId", sellerId);			criteria.addEqualTo	( "buyerId", buyerId);						Query query = new QueryByCriteria( Contact.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Contact) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getContactBySellerIdAndBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getBuyerContact( Integer buyerId, String orderBy, boolean orderDirection, int startIndex, int offset) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);			criteria.addEqualTo		( "buyerActive", new Integer( 1));						QueryByCriteria query = new QueryByCriteria( Contact.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getBuyerContact()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getSellerContact( Integer sellerId, String orderBy, boolean orderDirection, int startIndex, int offset) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", sellerId);			criteria.addEqualTo		( "sellerActive", new Integer( 1));						QueryByCriteria query = new QueryByCriteria( Contact.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getSellerContact()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getBuyerContact( Integer BuyerId, String orderBy, boolean orderDirection, int messageStatusConst, int paymentStatusConst, int dateStatusConst, int voteStatusConst, int startIndex, int offset) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", BuyerId);			criteria.addEqualTo		( "buyerActive", new Integer( 1));						if( messageStatusConst != Constant.MESSAGE_STATUS_NA)				criteria.addEqualTo( "messageStatusConst", new Integer( messageStatusConst));						if( paymentStatusConst != Constant.PAYMENT_STATUS_NA)				criteria.addEqualTo( "paymentStatusConst", new Integer( messageStatusConst));						if( dateStatusConst != Constant.DATE_STATUS_NA)				criteria.addEqualTo( "dateStatusConst", new Integer( dateStatusConst));						if( voteStatusConst != Constant.VOTE_STATUS_NA)				criteria.addEqualTo( "voteStatusConst", new Integer( messageStatusConst));						QueryByCriteria query = new QueryByCriteria( Contact.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getBuyerContact()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getBuyerContactCount( Integer BuyerId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", BuyerId);			criteria.addEqualTo		( "buyerActive", new Integer( 1));						Query query = new QueryByCriteria( Contact.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getBuyerContactCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getSellerContactCount( Integer SellerId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", SellerId);			criteria.addEqualTo		( "sellerActive", new Integer( 1));						Query query = new QueryByCriteria( Contact.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getSellerContactCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getBuyerContactCount( Integer buyerId, int messageStatusConst, int paymentStatusConst, int dateStatusConst, int voteStatusConst) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);			criteria.addEqualTo		( "buyerActive", new Integer( 1));							if( messageStatusConst != Constant.MESSAGE_STATUS_NA)				criteria.addEqualTo( "messageStatusConst", new Integer( messageStatusConst));						if( paymentStatusConst != Constant.PAYMENT_STATUS_NA)				criteria.addEqualTo( "paymentStatusConst", new Integer( paymentStatusConst));						if( dateStatusConst != Constant.DATE_STATUS_NA)				criteria.addEqualTo( "dateStatusConst", new Integer( dateStatusConst));						if( voteStatusConst != Constant.VOTE_STATUS_NA)				criteria.addEqualTo( "voteStatusConst", new Integer( voteStatusConst));						Query query = new QueryByCriteria( Contact.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getBuyerContactCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getSellerContactCount( Integer sellerId, int messageStatusConst, int paymentStatusConst, int dateStatusConst, int voteStatusConst) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", sellerId);			criteria.addEqualTo		( "sellerActive", new Integer( 1));							if( messageStatusConst != Constant.MESSAGE_STATUS_NA)				criteria.addEqualTo( "messageStatusConst", new Integer( messageStatusConst));						if( paymentStatusConst != Constant.PAYMENT_STATUS_NA)				criteria.addEqualTo( "paymentStatusConst", new Integer( paymentStatusConst));						if( dateStatusConst != Constant.DATE_STATUS_NA)				criteria.addEqualTo( "dateStatusConst", new Integer( dateStatusConst));						if( voteStatusConst != Constant.VOTE_STATUS_NA)				criteria.addEqualTo( "sellerVoteStatusConst", new Integer( voteStatusConst));						Query query = new QueryByCriteria( Contact.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Contact.class.getName(), this.getClass().getName() + ".getSellerContactCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}}