package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.ContactMessage;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class ContactMessageDAO{					public void setContactMessage(ContactMessage contactMessage)  throws DataUpdateErrorException{		PersistenceBroker broker = null;			try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( contactMessage);			broker.commitTransaction();		}catch (PersistenceBrokerException ex){			broker.abortTransaction();			throw new DataUpdateErrorException(ContactMessage.class.getName(), this.getClass().getName() + ".setContactMessage()", ex);		}finally {			if (broker != null) {				broker.close();			}		}	}		public ContactMessage getContactMessageById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						Query query = new QueryByCriteria( ContactMessage.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( ContactMessage) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( ContactMessage.class.getName(), this.getClass().getName() + ".getContactMessageById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getContactMessageByContactId( Integer contactId) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "contactId", contactId);						QueryByCriteria query = new QueryByCriteria( ContactMessage.class, criteria);						query.addOrderBy( "date", true);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( ContactMessage.class.getName(), this.getClass().getName() + ".getContactMessageByContactId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}}