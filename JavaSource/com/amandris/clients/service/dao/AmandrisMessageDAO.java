package com.amandris.clients.service.dao;import java.util.Collection;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.AmandrisMessage;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class AmandrisMessageDAO{			public void setAmandrisMessage( AmandrisMessage amandrisMessage)  throws DataUpdateErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( amandrisMessage);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataUpdateErrorException( AmandrisMessage.class.getName(), this.getClass().getName() + ".setAmandrisMessage()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}				public void deleteAmandrisMessage( AmandrisMessage amandrisMessage)  throws DataDeleteErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( amandrisMessage);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataDeleteErrorException( AmandrisMessage.class.getName(), this.getClass().getName() + ".deleteAmandrisMessage()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public AmandrisMessage getAmandrisMessageById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						Query query = new QueryByCriteria( AmandrisMessage.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( AmandrisMessage) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( AmandrisMessage.class.getName(), this.getClass().getName() + ".getAmandrisMessageById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getAmandrisMessage( Boolean onlyNew) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo( "id", new Integer( 0));								if( onlyNew != null) {				if( onlyNew.booleanValue())					criteria.addEqualTo( "isNew", new Integer( 1));				else					criteria.addEqualTo( "isNew", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( AmandrisMessage.class, criteria);								query.addOrderBy( "date", true);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( AmandrisMessage.class.getName(), this.getClass().getName() + ".getAmandrisMessage()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public int getAmandrisMessageCount( ) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));								QueryByCriteria query = new QueryByCriteria( AmandrisMessage.class, criteria);								broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( AmandrisMessage.class.getName(), this.getClass().getName() + ".getAmandrisMessageCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}	}