package com.amandris.clients.service.dao;import java.util.Collection;import java.util.GregorianCalendar;import java.util.Locale;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.Invitation;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class InvitationDAO{			public void deleteInvitation( Invitation invitation)  throws DataDeleteErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( invitation);			broker.commitTransaction();		}catch (PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataDeleteErrorException(Invitation.class.getName(), this.getClass().getName() + ".deleteInvitation()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteInvitationByBuyerId( Integer buyerId) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "buyerId", buyerId);									QueryByCriteria query = new QueryByCriteria( Invitation.class, criteria);									broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.deleteByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( Invitation.class.getName(), this.getClass().getName() + ".deleteInvitationByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteInvitationBySellerId( Integer sellerId) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", sellerId);									QueryByCriteria query = new QueryByCriteria( Invitation.class, criteria);									broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.deleteByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( Invitation.class.getName(), this.getClass().getName() + ".deleteInvitationBySellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void setInvitation( Invitation invitation)  throws DataUpdateErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( invitation);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataUpdateErrorException( Invitation.class.getName(), this.getClass().getName() + ".setInvitation()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Invitation getInvitationById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						Query query = new QueryByCriteria( Invitation.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Invitation) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Invitation.class.getName(), this.getClass().getName() + ".getInvitationById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Invitation getFreeContactInvitationByBuyerIdAndSellerId( Integer buyerId, Integer sellerId, Locale locale) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( ( buyerId.intValue() == 0) || ( sellerId.intValue() == 0))			return null;				try {			criteria.addEqualTo				( "buyerId", buyerId);			criteria.addEqualTo				( "sellerId", sellerId);			criteria.addEqualTo				( "buyerVisible", new Integer( 1));			criteria.addEqualTo				( "isFreeContact", new Integer( 1));			criteria.addEqualTo				( "freeContactUsed", new Integer( 0));			criteria.addGreaterOrEqualThan	( "expirationDate", GregorianCalendar.getInstance( locale).getTime());			criteria.addLessOrEqualThan		( "date", GregorianCalendar.getInstance( locale).getTime());						Query query = new QueryByCriteria( Invitation.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Invitation) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Invitation.class.getName(), this.getClass().getName() + ".getFreeContactInvitationByBuyerIdAndSellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Invitation getInvitationByBuyerIdAndSellerId( Integer buyerId, Integer sellerId, Boolean freeContact, Locale locale) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( ( buyerId.intValue() == 0) || ( sellerId.intValue() == 0))			return null;				try {			criteria.addEqualTo				( "buyerId", buyerId);			criteria.addEqualTo				( "sellerId", sellerId);			criteria.addGreaterOrEqualThan	( "expirationDate", GregorianCalendar.getInstance( locale).getTime());						if( freeContact != null) {				if( freeContact.booleanValue() == true)					criteria.addEqualTo( "isFreeContact", new Integer( 1));				else					criteria.addEqualTo( "isFreeContact", new Integer( 0));			}						Query query = new QueryByCriteria( Invitation.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( Invitation) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Invitation.class.getName(), this.getClass().getName() + ".getInvitationByBuyerIdAndSellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getInvitationByBuyerId( Integer buyerId, Boolean onlyActives, String orderBy, boolean orderDirection, int startIndex, int offset) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));						criteria.addEqualTo	( "buyerId", buyerId);									if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "buyerVisible", new Integer( 1));				else					criteria.addEqualTo( "buyerVisible", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( Invitation.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Invitation.class.getName(), this.getClass().getName() + ".getInvitationByBuyerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public Collection getInvitationBySellerId( Integer sellerId, Boolean onlyActives, String orderBy, boolean orderDirection, int startIndex, int offset) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));						criteria.addEqualTo	( "sellerId", sellerId);									if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "sellerVisible", new Integer( 1));				else					criteria.addEqualTo( "sellerVisible", new Integer( 0));			}						QueryByCriteria query = new QueryByCriteria( Invitation.class, criteria);						query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( startIndex + offset);			query.addOrderBy		( orderBy, orderDirection);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Invitation.class.getName(), this.getClass().getName() + ".getInvitationBySellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public int getInvitationByBuyerIdCount( Integer buyerId, Boolean onlyActives) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));						criteria.addEqualTo	( "buyerId", buyerId);						if( onlyActives != null) {				if( onlyActives.booleanValue())					criteria.addEqualTo( "buyerVisible", new Integer( 1));				else					criteria.addEqualTo( "buyerVisible", new Integer( 0));			}						Query query = new QueryByCriteria( Invitation.class, criteria);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( Invitation.class.getName(), this.getClass().getName() + ".getInvitationByBuyerIdCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}}