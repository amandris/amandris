package com.amandris.clients.service.dao;import java.util.Collection;import java.util.Date;import org.apache.ojb.broker.PersistenceBroker;import org.apache.ojb.broker.PersistenceBrokerException;import org.apache.ojb.broker.PersistenceBrokerFactory;import org.apache.ojb.broker.query.Criteria;import org.apache.ojb.broker.query.Query;import org.apache.ojb.broker.query.QueryByCriteria;import com.amandris.clients.service.vo.SellerPromotion;import com.amandris.clients.util.exception.DataAccessErrorException;import com.amandris.clients.util.exception.DataDeleteErrorException;import com.amandris.clients.util.exception.DataUpdateErrorException;public class PromotionDAO{			public void setPromotion( SellerPromotion sellerPromotion)  throws DataUpdateErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.store( sellerPromotion);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataUpdateErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".setPromotion()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public void deletePromotion( SellerPromotion sellerPromotion)  throws DataDeleteErrorException{		PersistenceBroker broker = null;				try{			broker = PersistenceBrokerFactory.defaultPersistenceBroker();			broker.beginTransaction();			broker.delete( sellerPromotion);			broker.commitTransaction();		}catch ( PersistenceBrokerException ex){			broker.abortTransaction();			ex.printStackTrace();			throw new DataDeleteErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".deletePromotion()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}		public void deleteSellerPromotionBySellerId( Integer sellerId) throws DataDeleteErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo	( "id", new Integer( 0));			criteria.addEqualTo		( "sellerId", sellerId);									QueryByCriteria query = new QueryByCriteria( SellerPromotion.class, criteria);									broker = PersistenceBrokerFactory.defaultPersistenceBroker();				broker.deleteByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataDeleteErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".deleteSellerPromotionBySellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public SellerPromotion getPromotionById( Integer id) throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				if( id.intValue() == 0)			return null;				try {			criteria.addEqualTo	( "id", id);						Query query = new QueryByCriteria( SellerPromotion.class, criteria);			broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( SellerPromotion) broker.getObjectByQuery(query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".getSellerPromotionById()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getLastPromotion() throws DataAccessErrorException	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			QueryByCriteria query = new QueryByCriteria( SellerPromotion.class, criteria);						query.addOrderBy( "id", true);						broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);		}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".getLastPromotion()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getPromotionBySellerId( Integer sellerId, Date presentDay) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));			criteria.addEqualTo				( "sellerId", sellerId);			criteria.addLessOrEqualThan		( "startDate", presentDay);			criteria.addGreaterOrEqualThan	( "endDate", presentDay);								QueryByCriteria query = new QueryByCriteria( SellerPromotion.class, criteria);								broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".getPromotionBySellerId()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public Collection getPromotion( int promotion, Date presentDay, int startIndex, int endIndex) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));			criteria.addLessOrEqualThan		( "startDate", presentDay);			criteria.addGreaterOrEqualThan	( "endDate", presentDay);			criteria.addEqualTo				( "promotionConst", new Integer( promotion));								QueryByCriteria query = new QueryByCriteria( SellerPromotion.class, criteria);								broker = PersistenceBrokerFactory.defaultPersistenceBroker();				query.setStartAtIndex	( startIndex);			query.setEndAtIndex		( endIndex);						return broker.getCollectionByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".getPromotion()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public int getPromotionCount( int promotion, Date presentDay) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));			criteria.addLessOrEqualThan		( "startDate", presentDay);			criteria.addGreaterOrEqualThan	( "endDate", presentDay);			criteria.addEqualTo				( "promotionConst", new Integer( promotion));								QueryByCriteria query = new QueryByCriteria( SellerPromotion.class, criteria);								broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return broker.getCount( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".getPromotionCount()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}			public SellerPromotion getPromotionBySellerIdAndType( Integer sellerId, int promotionType, Date presentDay) throws DataAccessErrorException 	{		Criteria 			criteria	= new Criteria();		PersistenceBroker 	broker 		= null;				try {			criteria.addNotEqualTo			( "id", new Integer( 0));			criteria.addEqualTo				( "sellerId", sellerId);			criteria.addEqualTo				( "promotionConst", new Integer( promotionType));			criteria.addLessOrEqualThan		( "startDate", presentDay);			criteria.addGreaterOrEqualThan	( "endDate", presentDay);								QueryByCriteria query = new QueryByCriteria( SellerPromotion.class, criteria);								broker = PersistenceBrokerFactory.defaultPersistenceBroker();				return ( SellerPromotion) broker.getObjectByQuery( query);					}catch ( PersistenceBrokerException ex) {			throw new DataAccessErrorException( SellerPromotion.class.getName(), this.getClass().getName() + ".getPromotionBySellerIdAndType()", ex);		}finally {			if ( broker != null) {				broker.close();			}		}	}	}